!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=1)}([function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var s=e(t)+1,i=this.firstOrDefault(t=>e(t)==s);return i||(i=this.first(t=>1==e(t))),i},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,s){"use strict";s.r(e);class i{constructor(){this.drawFunctions=[],this.resize=(()=>{console.log("canvas.resize()"),this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight}),this.draw=(()=>{for(const t of this.drawFunctions)t(this.ctx,this.width,this.height)}),this.addDrawFunction=(t=>{this.drawFunctions.push(t)}),this.removeDrawFunction=(t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)})}get width(){return this.canvas.width}get height(){return this.canvas.height}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new i;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}i.cursorLock=null,i.SetCursor=((t,e)=>{e?(document.body.style.cursor="pointer",i.cursorLock=t):t==i.cursorLock&&(document.body.style.cursor="default",i.cursorLock=null)});class r{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i,this.collidesWith=(t=>{var e=!1,s=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(s=!0):t.y<=this.y&&t.y+t.width>this.y&&(s=!0)),e&&s}),this.isHitBy=((t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height)}}class n{constructor(){this.updateFunctions=[],this.isRunning=!1,this.addUpdateFunction=(t=>{this.updateFunctions.push(t)}),this.removeUpdateFunction=(t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)}),this.setFps=(t=>{this.fps=t,this.fpsInterval=1e3/this.fps}),this.animationLoop=(()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var s=e/1e3;for(const t of this.updateFunctions)t(s)}}),this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(console.log("play"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(console.log("pause"),this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class o{constructor(t){this.canvas=t,this.mouseMove=(t=>{this.view.mouseMove(t)}),this.click=(t=>{this.view&&this.view.click(t)}),this.render=((t,e,s)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new r(0,0,e,s)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,s),this.view.render(t))}),this.setView=(t=>{this.view=t,this.shouldUpdateLayout=!0}),t.addDrawFunction(this.render),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("click",this.click)}static create(){var t=i.createFullScreen(),e=new o(t);return(new n).addUpdateFunction(t.draw),e}}class h{constructor(){this.generateNewId=(()=>(h.idCounter++,h.idCounter)),this.bounds=new r(0,0,0,0),this.id=this.generateNewId(),this.name="object "+this.id}}h.idCounter=0;class a extends h{constructor(){super(...arguments),this.children=[],this.shouldUpdateLayout=!1,this.triggerUpdateLayout=(()=>{this.shouldUpdateLayout=!0})}render(t){this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1);for(const e of this.children)e.render(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}class d extends h{constructor(t){super(),this.star=t}render(t){t.fillStyle="white",t.beginPath(),t.arc(this.star.x,this.star.y,this.star.r,0,2*Math.PI),t.fill()}mouseMove(t){throw new Error("Method not implemented.")}click(t){throw new Error("Method not implemented.")}}class l extends a{constructor(t){super(),this.starLayer=t,this.triggerUpdateLayout()}updateLayout(t,e){for(const t of this.starLayer.stars)this.children.push(new d(t))}mouseMove(t){}click(t){}}var c;!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(c||(c={}));class u{constructor(){this.state=c.hidden}}class y{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=(t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class p extends h{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new y,this.mouseMove=(t=>{this.isEnabled&&(this.bounds.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,i.SetCursor(this.name,!0)):(this.isMouseOver=!1,i.SetCursor(this.name,!1)))}),this.click=(t=>{this.isEnabled&&this.bounds.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)})}}class v{constructor(){this.fontSize=40,this.fillStyle="black",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0}}class f extends p{constructor(){super(...arguments),this.properties=new v,this.isVisible=!0,this.horizontalAlign="center",this.verticalAlign="center",this.render=(t=>{this.isVisible&&(this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.bounds.x,this.bounds.y,this.bounds.width,this.bounds.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.fontSize+"px Arial",t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.bounds.x,this.bounds.y))}),this.align=((t,e)=>{t.font=this.properties.fontSize+"px Arial",t.textAlign="left",t.textBaseline="top";var s=t.measureText(this.text),i=new r(0,0,s.width,this.properties.fontSize);switch(this.horizontalAlign){case"left":i.x=e.x;break;case"center":i.x=e.x-s.width/2;break;case"right":i.x=e.x-s.width}switch(this.verticalAlign){case"top":i.y=e.y;break;case"center":i.y=e.y-this.properties.fontSize/2;break;case"bottom":i.y=e.y-this.properties.fontSize}this.bounds=i})}}class w{constructor(t,e){this.x=t,this.y=e}}class m{constructor(t,e){this.x=t,this.y=e}}class g extends a{constructor(){super(...arguments),this.spacing=30}get items(){return this.children}set items(t){this.children=t}updateLayout(t,e){var s=this.items.length;if(s>0){var i=e.width/2;for(let n=0;n<s;n++){var r=e.height/2-this.spacing*(s-1)/2+n*this.spacing;this.items[n].align(t,new m(i,r))}}}}class L extends a{constructor(){super(),this.viewModel=new u,this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.addStarLayer=(t=>{this.updateSettings()}),this.removeStarLayer=(t=>{this.updateSettings()}),this.showHideOverlayClicked=(t=>{this.viewModel.state==c.visible?this.setState(c.beforeVisible):this.setState(c.visible)}),this.mouseMove=(t=>{this.viewModel.state!=c.hidden&&this.viewModel.state!=c.beforeVisible||this.setState(c.beforeVisible),super.mouseMove(t)}),this.mouseInactivityHandler=(()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.viewModel.state==c.beforeVisible&&this.setState(c.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))}),this.setState=(t=>{switch(t){case c.hidden:this.showOverLayerButton.isVisible=!1,this.viewModel.state=c.hidden;break;case c.beforeVisible:this.lastMoved=Date.now(),this.viewModel.state==c.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.showOverLayerButton.isVisible=!0),this.viewModel.state==c.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.removeItemIfExists(this.settingsList)),this.viewModel.state=c.beforeVisible;break;case c.visible:this.viewModel.state==c.beforeVisible&&(this.children.push(this.settingsList),this.updateSettings()),this.viewModel.state=c.visible}}),this.showOverLayerButton=new f,this.showOverLayerButton.text="Show/Hide Settings",this.showOverLayerButton.properties.fillStyle="green",this.showOverLayerButton.verticalAlign="top",this.showOverLayerButton.horizontalAlign="left",this.showOverLayerButton.clicked.addEventListener(this.showHideOverlayClicked),this.showOverLayerButton.properties.backgroundFillStyle="rgba(0, 0, 0, 0.5)",this.children.push(this.showOverLayerButton),this.settingsList=new g;var t=new f;t.properties.fillStyle="white",this.settingsList.items.push(t),M.settings.onAddStarLayer.addEventListener(this.addStarLayer),M.settings.onRemoveStarLayer.addEventListener(this.removeStarLayer)}updateLayout(t,e){this.showOverLayerButton.align(t,new w(e.x,e.y)),this.settingsList.updateLayout(t,new r(100,100,400,400))}updateSettings(){this.settingsList.items=[];for(const e of M.settings.starLayers){var t=new f;t.text="Remove Layer",t.tag=e,t.properties.fillStyle="white",this.settingsList.items.push(t),t.clicked.addEventListener(t=>{M.settings.removeStarLayer(e)})}var e=new f;e.text="Add Layer",e.properties.fillStyle="white",this.settingsList.items.push(e),e.clicked.addEventListener(t=>{M.settings.addStarLayer()}),this.triggerUpdateLayout()}}class b{constructor(t){this.starLayer=t,this.update=(t=>{for(const e of this.starLayer.stars)e.x+=this.starLayer.speed*t,e.x>M.settings.width&&(e.x-=M.settings.width)})}}class x extends a{constructor(){super(),this.starLayers=[],this.starAnimators=[],this.addStarLayer=(t=>{var e=new l(t);this.starLayers.push(e),this.children.splice(0,0,e),this.triggerUpdateLayout();var s=new b(t);this.anim.addUpdateFunction(s.update),this.starAnimators.push(s)}),this.removeStarLayer=(t=>{var e=this.starLayers.first(e=>e.starLayer==t);this.children.remove(t=>t==e),this.starLayers.remove(t=>t==e);var s=this.starAnimators.first(e=>e.starLayer==t);this.anim.removeUpdateFunction(s.update),this.starAnimators.removeItem(s),this.triggerUpdateLayout()}),this.settingsOverlay=new L,this.children.push(this.settingsOverlay),this.anim=new n,M.settings.onAddStarLayer.addEventListener(this.addStarLayer),M.settings.onRemoveStarLayer.addEventListener(this.removeStarLayer)}updateLayout(t,e){for(const s of this.starLayers)s.updateLayout(t,e);this.settingsOverlay.updateLayout(t,e)}}class S{constructor(){this.stars=[],this.speed=20*Math.random()+5}}class M{constructor(){this.run=(()=>{console.log("hi"),document.body.style.backgroundColor="black";var t=o.create(),e=new x;t.setView(e)})}}M.settings=new class{constructor(t,e){this.width=t,this.height=e,this.onAddStarLayer=new y,this.onRemoveStarLayer=new y,this.starLayers=[],this.addStarLayer=(()=>{var t=new S;for(let e=0;e<100;e++)t.stars.push({x:Math.random()*this.width,y:Math.random()*this.height,r:2*Math.random()+.05});this.starLayers.push(t),this.onAddStarLayer.dispatchEvent(t)}),this.removeStarLayer=(t=>{this.starLayers.removeItem(t),this.onRemoveStarLayer.dispatchEvent(t)})}}(window.innerWidth,window.innerHeight);s(0);document.addEventListener("DOMContentLoaded",function(){(new M).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,