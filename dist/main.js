!function(t){var e={};function i(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(s,a,function(e){return t[e]}.bind(null,a));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=7)}([function(t,e,i){t.exports=i.p+"4548616750b49599e29ad31f27052fc7.mp3"},function(t,e,i){t.exports=i.p+"42e1c91573e0327cd3f17f251e8af2a6.mp3"},function(t,e,i){t.exports=i.p+"f1ceea5d555947c80281f368bfaf8fa8.mp3"},function(t,e,i){t.exports=i.p+"689f34416f2a30b778e18f523a068af4.png"},function(t,e,i){t.exports=i.p+"4a2d1fef95cd91bc66caa315b22be2dd.png"},function(t,e,i){t.exports=i.p+"43075ffb3d6eafe5a17341ce79d9eb1d.png"},function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var i=e(t)+1,s=this.firstOrDefault(t=>e(t)==i);return s||(s=this.first(t=>1==e(t))),s},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,i){"use strict";i.r(e);class s{constructor(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s,this.collidesWith=(t=>{var e=!1,i=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(i=!0):t.y<=this.y&&t.y+t.width>this.y&&(i=!0)),e&&i}),this.isHitBy=((t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height)}}class a{constructor(t){this.canvas=t,this.canvasResized=(()=>{this.shouldUpdateLayout=!0}),this.mouseDown=(t=>{this.view&&this.view.mouseDown({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.mouseUp=(t=>{this.view&&this.view.mouseUp({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.mouseMove=(t=>{this.view&&this.view.mouseMove({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.click=(t=>{this.view&&this.view.click({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.render=((t,e,i)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new s(0,0,e,i)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,i),this.view.render(t))}),this.setView=(t=>{this.view=t,this.shouldUpdateLayout=!0}),t.addDrawFunction(this.render),t.resized.addEventListener(this.canvasResized),document.addEventListener("mousedown",this.mouseDown),document.addEventListener("mouseup",this.mouseUp),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("click",this.click)}}var n,r,h,o,d,l;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(n||(n={})),function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom"}(r||(r={}));class u{constructor(){this.top=0,this.right=0,this.bottom=0,this.left=0}}class c{constructor(){this.horizontalAlign=n.Center,this.verticalAlign=r.Center,this.margin=new u,this.calculateDimensionsX=((t,e)=>{switch(this.horizontalAlign){case n.Left:return t.x+this.margin.left;case n.Center:return t.x+t.width/2-e/2;case n.Right:return t.x+t.width-e-this.margin.right}}),this.calculateDimensionsY=((t,e)=>{switch(this.verticalAlign){case r.Top:return t.y+this.margin.top;case r.Center:return t.y+t.height/2-e/2;case r.Bottom:return t.y+t.height-e-this.margin.bottom}})}}class p{constructor(t,e,i){this.executer=t,this.setMethod=i,this.methods=[],this.add=(t=>{var e=t(this.methods[this.methods.length-1]);this.methods.push(e),this.setMethod(e)}),this.remove=(()=>{this.methods.pop(),this.setMethod(this.methods[this.methods.length-1])}),this.reset=(()=>{this.setMethod(this.methods[this.methods.length-1])}),this.clear=(()=>{this.setMethod(()=>{})}),e.bind(this.executer),this.methods.push(e)}}class g{constructor(t){this.durationSeconds=t,this.getValue=(()=>{return(Date.now()-this.startTime)/1e3/this.durationSeconds}),this.ended=(()=>{return(Date.now()-this.startTime)/1e3>this.durationSeconds}),this.startTime=Date.now()}}class m{constructor(){this.generateNewId=(()=>(m.idCounter++,m.idCounter)),this.bounds=new s(0,0,0,0),this.dimensions=new s(0,0,0,0),this.alignement=new c,this.shouldUpdateLayout=!1,this.render=(t=>{this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1)}),this.triggerUpdateLayout=(()=>{this.shouldUpdateLayout=!0}),this.isActive=!0,this.activate=(t=>{this.renderMethodManipulation.reset();var e=new g(t);this.renderMethodManipulation.add(t=>i=>{e.ended()?(t(i),this.renderMethodManipulation.remove()):(i.save(),i.globalAlpha=e.getValue(),t(i),i.restore())})}),this.deactivated=(()=>{this.renderMethodManipulation.clear()}),this.deactivate=(t=>{var e=new g(t);this.renderMethodManipulation.add(t=>i=>{e.ended()?(this.renderMethodManipulation.remove(),this.renderMethodManipulation.clear()):(i.save(),i.globalAlpha=1-e.getValue(),t(i),i.restore())})}),this.disableMouseEvents=(()=>{this.mouseDown=(()=>{}),this.mouseUp=(()=>{}),this.mouseMove=(()=>{}),this.click=(()=>{})}),this.id=this.generateNewId(),this.name="object "+this.id}get renderMethodManipulation(){return this._renderMethodManipulation||(this._renderMethodManipulation=new p(this,this.render,t=>this.render=t)),this._renderMethodManipulation}updateLayout(t,e){this.bounds=e,this.shouldUpdateLayout=!1}}m.idCounter=0;class y extends m{constructor(){super(...arguments),this.children=[],this.superRender=this.render,this.render=(t=>{this.superRender(t);for(const e of this.children)e.render(t)})}mouseDown(t){for(const e of this.children)e.mouseDown(t)}mouseUp(t){for(const e of this.children)e.mouseUp(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}class v extends m{constructor(t){super(),this.star=t,this.render=(t=>{var e=3*this.star.r,i=t.createRadialGradient(this.star.x,this.star.y,this.star.r,this.star.x,this.star.y,e);i.addColorStop(0,"rgba(255, 255, 255, 0.2)"),i.addColorStop(1,"rgba(255, 255, 255, 0)"),t.fillStyle=i,t.arc(this.star.x,this.star.y,e,0,2*Math.PI),t.fill(),t.fillStyle="white",t.beginPath(),t.arc(this.star.x,this.star.y,this.star.r,0,2*Math.PI),t.fill()})}mouseDown(t){}mouseUp(t){}mouseMove(t){throw new Error("Method not implemented.")}click(t){throw new Error("Method not implemented.")}}!function(t){t[t.AddStarLayer=0]="AddStarLayer",t[t.RemoveStarLayer=1]="RemoveStarLayer",t[t.ChangeNumberOfStars=2]="ChangeNumberOfStars",t[t.ChangeSpeed=3]="ChangeSpeed",t[t.ChangeSizes=4]="ChangeSizes"}(h||(h={}));class f extends y{constructor(t){super(),this.starLayer=t,this.settingsUpdated=(t=>{switch(t){case h.ChangeNumberOfStars:this.updateNumberOfStars()}}),this.updateNumberOfStars=(()=>{this.triggerUpdateLayout()}),ct.settingManager.update.addEventListener(this.settingsUpdated),this.disableMouseEvents(),this.triggerUpdateLayout()}updateLayout(t,e){this.children=[];for(const t of this.starLayer.stars)this.children.push(new v(t))}mouseMove(t){}click(t){}}!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(o||(o={}));class w{constructor(){this.state=o.hidden}}class L{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.addEventListenerIfNotExists=(t=>{!t||this.listeners.indexOf(t)>=0||this.listeners.push(t)}),this.dispatchEvent=(()=>{for(let t=0;t<this.listeners.length;t++){(0,this.listeners[t])()}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)}),this.removeEventListenerIfExists=(t=>{!t||this.listeners.indexOf(t)<0||this.listeners.splice(this.listeners.indexOf(t),1)})}}class x{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=(t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class S{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=((t,e)=>{for(let i=0;i<this.listeners.length;i++){(0,this.listeners[i])(t,e)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class b{constructor(){this.drawFunctions=[],this.dpr=1,this.dprScalingEnabled=!1,this.enableDprScaling=(()=>{this.dprScalingEnabled=!0,this.resize()}),this.disableDprScaling=(()=>{this.dprScalingEnabled=!1,this.resize()}),this.resized=new L,this.resize=(()=>{this.dpr=this.dprScalingEnabled&&window.devicePixelRatio||1,this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight,this.resized.dispatchEvent()}),this.draw=(()=>{this.ctx.save(),this.ctx.scale(this.dpr,this.dpr);for(const t of this.drawFunctions)t(this.ctx,this.width,this.height);this.ctx.restore()}),this.addDrawFunction=(t=>{this.drawFunctions.push(t)}),this.removeDrawFunction=(t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)})}get width(){return this.canvas.clientWidth/this.dpr}get height(){return this.canvas.clientHeight/this.dpr}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new b;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}b.cursorLock=null,b.SetCursor=((t,e)=>{e?(document.body.style.cursor="pointer",b.cursorLock=t):t==b.cursorLock&&(document.body.style.cursor="default",b.cursorLock=null)});class M extends m{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new x,this.click=(t=>{this.isEnabled&&this.dimensions.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)})}mouseMove(t){this.isEnabled&&(this.dimensions.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,b.SetCursor(this.name,!0)):(this.isMouseOver=!1,b.SetCursor(this.name,!1)))}mouseDown(t){}mouseUp(t){}}class V{constructor(){this.fontSize=40,this.fontPrefix="",this.fontFamily="fontawesome",this.fillStyle="blue",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0,this.getFont=(()=>{var t="";return this.fontPrefix&&(t+=this.fontPrefix+" "),t+=this.fontSize+"px "+this.fontFamily})}}class I extends M{constructor(){super(...arguments),this.properties=new V,this.render=(t=>{this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.dimensions.x,this.dimensions.y)}),this.updateLayout=((t,e)=>{super.updateLayout(t,e),t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top";var i=t.measureText(this.text),a=this.alignement.calculateDimensionsX(e,i.width),n=this.alignement.calculateDimensionsY(e,this.properties.fontSize);this.dimensions=new s(a,n,i.width,this.properties.fontSize)})}}!function(t){t[t.Horizontal=0]="Horizontal",t[t.Vertical=1]="Vertical"}(d||(d={}));class E{constructor(){this.itemSpacing=30,this.orientation=d.Vertical}}class C extends y{constructor(){super(...arguments),this.properties=new E,this.addItem=(t=>{t.alignement.horizontalAlign=n.Left,t.alignement.verticalAlign=r.Top,this.children.push(t),this.triggerUpdateLayout()}),this.removeItem=(t=>{this.children.removeItem(t),this.triggerUpdateLayout()})}updateLayout(t,e){super.updateLayout(t,e);var i=this.alignement.calculateDimensionsX(e,this.dimensions.width),a=this.alignement.calculateDimensionsY(e,this.dimensions.height),n=0,r=0;if(this.properties.orientation==d.Vertical)for(let e=0;e<this.children.length;e++){const h=this.children[e];e>0&&(a+=this.properties.itemSpacing,r+=this.properties.itemSpacing),h.updateLayout(t,new s(i,a,0,0)),a+=h.dimensions.height,r+=h.dimensions.height,n=Math.max(n,h.dimensions.width)}else for(let e=0;e<this.children.length;e++){const h=this.children[e];e>0&&(i+=this.properties.itemSpacing,n+=this.properties.itemSpacing),h.updateLayout(t,new s(i,a,0,0)),i+=h.dimensions.width,n+=h.dimensions.width,r=Math.max(r,h.dimensions.height)}this.dimensions.x==i&&this.dimensions.y==a&&this.dimensions.width==n&&this.dimensions.height==r||(this.dimensions.x=i,this.dimensions.y=a,this.dimensions.height=r,this.dimensions.width=n,this.updateLayout(t,e))}}class A extends M{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValue=50,this.valueChanged=new x,this.render=(t=>{var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke();var s=(this.currentValue-this.minValue)/(this.maxValue-this.minValue);t.fillStyle="blue",t.beginPath(),t.arc(e+this.radius+(this.dimensions.width-2*this.radius)*s,i+this.dimensions.height/2,this.radius,0,2*Math.PI),t.closePath(),t.fill()}),this.updateLayout=((t,e)=>{super.updateLayout(t,e),this.dimensions=new s(e.x,e.y,200,2*this.radius)}),this.mouseDown=(t=>{this.dimensions.isHitBy(t.clientX,t.clientY)&&(this.isDragging=!0,this.updateCurrentValue(t))}),this.mouseUp=(t=>{this.isDragging=!1})}mouseMove(t){super.mouseMove(t),this.isDragging&&this.updateCurrentValue(t)}updateCurrentValue(t){var e=t.clientX-this.dimensions.x-this.radius;(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),this.currentValue=e,this.valueChanged.dispatchEvent(this.currentValue)}}class F extends M{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValueLow=25,this.currentValueHigh=75,this.minDiff=.1,this.valuesChanged=new S,this.render=(t=>{var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke(),t.fillStyle="blue";var s=i+this.dimensions.height/2,a=(this.currentValueLow-this.minValue)/(this.maxValue-this.minValue),n=e+this.radius+(this.dimensions.width-2*this.radius)*a,r=(this.currentValueHigh-this.minValue)/(this.maxValue-this.minValue),h=e+this.radius+(this.dimensions.width-2*this.radius)*r;t.strokeStyle="blue",t.lineWidth=2,t.beginPath(),t.moveTo(n,s),t.lineTo(h,s),t.stroke(),t.beginPath(),t.arc(n,s,this.radius,0,2*Math.PI),t.closePath(),t.fill(),t.beginPath(),t.arc(h,s,this.radius,0,2*Math.PI),t.closePath(),t.fill()}),this.updateLayout=((t,e)=>{super.updateLayout(t,e),this.dimensions=new s(e.x,e.y,200,2*this.radius)}),this.mouseDown=(t=>{if(this.dimensions.isHitBy(t.clientX,t.clientY)){var e=this.getClickedValue(t),i=Math.abs(this.currentValueLow-e),s=Math.abs(this.currentValueHigh-e);i==s?e<this.currentValueLow?this.isDraggingLow=!0:this.isDraggingHigh=!0:i>s?this.isDraggingHigh=!0:this.isDraggingLow=!0,this.updateCurrentValues(t)}}),this.mouseUp=(t=>{this.isDraggingHigh=!1,this.isDraggingLow=!1})}mouseMove(t){super.mouseMove(t),(this.isDraggingHigh||this.isDraggingLow)&&this.updateCurrentValues(t)}updateCurrentValues(t){var e=this.getClickedValue(t);this.isDraggingLow?e>this.currentValueHigh-this.minDiff&&(e=this.currentValueHigh-this.minDiff):e<this.currentValueLow+this.minDiff&&(e=this.currentValueLow+this.minDiff),this.isDraggingLow?this.currentValueLow=e:this.currentValueHigh=e,this.valuesChanged.dispatchEvent(this.currentValueLow,this.currentValueHigh)}getClickedValue(t){var e=t.clientX-this.dimensions.x-this.radius;return(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),e}}class O extends y{constructor(t){super(),this.starLayer=t,this.numberOfStarsChanged=(t=>{ct.settingManager.changeNumberOfStars(this.starLayer,Math.round(t))}),this.speedChanged=(t=>{ct.settingManager.changeSpeed(this.starLayer,t)}),this.sizesChanged=((t,e)=>{ct.settingManager.changeSizes(this.starLayer,t,e)}),this.settingsList=new C,this.settingsList.alignement.horizontalAlign=n.Left,this.settingsList.alignement.verticalAlign=r.Top;var e=new I;e.text="Remove Layer",e.properties.fillStyle="white",this.settingsList.addItem(e),this.children.push(e),e.clicked.addEventListener(t=>{ct.settingManager.removeStarLayer(this.starLayer)});var i=new A;i.minValue=10,i.maxValue=1e3,i.currentValue=t.stars.length,this.children.push(i),this.settingsList.addItem(i),i.valueChanged.addEventListener(this.numberOfStarsChanged);var s=new A;s.minValue=0,s.maxValue=20,s.currentValue=t.speed,this.children.push(s),this.settingsList.addItem(s),s.valueChanged.addEventListener(this.speedChanged);var a=new F,h=this.starLayer.stars.map(t=>t.r);a.minValue=.001,a.maxValue=2,a.currentValueLow=Math.min(...h),a.currentValueHigh=Math.max(...h),this.children.push(a),this.settingsList.addItem(a),a.valuesChanged.addEventListener(this.sizesChanged)}updateLayout(t,e){this.settingsList.updateLayout(t,new s(e.x,e.y,0,0))}}class k extends y{constructor(){super(),this.viewModel=new w,this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.layerButtons=[],this.settingsUpdated=(t=>{switch(t){case h.AddStarLayer:for(const t of ct.settings.starLayers)if(!this.layerButtons.map(t=>t.tag).contains(t)){this.settingsList.removeItem(this.addLayerBtn);var e=new I;e.text="Edit Layer",e.tag=t,e.properties.fillStyle="white",this.settingsList.addItem(e),this.layerButtons.push(e),e.clicked.addEventListener(e=>{this.toggleShowHideStarLayerView(t)}),this.settingsList.addItem(this.addLayerBtn);break}break;case h.RemoveStarLayer:for(const t of this.layerButtons)if(!ct.settings.starLayers.contains(t.tag)){this.settingsList.removeItem(t),this.layerButtons.removeItem(t);break}this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0}}),this.toggleShowHideStarLayerView=(t=>{if(this.detailedStarLayerView)if(this.detailedStarLayerView.starLayer!=t){this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;e=new O(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}else this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;else{var e=new O(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}}),this.showHideOverlayClicked=(t=>{this.viewModel.state==o.visible?this.setState(o.beforeVisible):this.setState(o.visible)}),this.mouseMove=(t=>{this.viewModel.state!=o.hidden&&this.viewModel.state!=o.beforeVisible||this.setState(o.beforeVisible),super.mouseMove(t)}),this.mouseInactivityHandler=(()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.viewModel.state==o.beforeVisible&&this.setState(o.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))}),this.setState=(t=>{switch(t){case o.hidden:this.children.removeItem(this.showOverLayerButton),this.viewModel.state=o.hidden;break;case o.beforeVisible:this.lastMoved=Date.now(),this.viewModel.state==o.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.addItemIfNotExists(this.showOverLayerButton)),this.viewModel.state==o.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.removeItemIfExists(this.settingsList),this.children.removeItemIfExists(this.detailedStarLayerView),this.detailedStarLayerView=void 0),this.viewModel.state=o.beforeVisible;break;case o.visible:this.viewModel.state==o.beforeVisible&&this.children.push(this.settingsList),this.viewModel.state=o.visible}}),this.showOverLayerButton=new I,this.showOverLayerButton.text="Show/Hide Settings",this.showOverLayerButton.properties.fillStyle="green",this.showOverLayerButton.alignement.verticalAlign=r.Top,this.showOverLayerButton.alignement.horizontalAlign=n.Left,this.showOverLayerButton.clicked.addEventListener(this.showHideOverlayClicked),this.showOverLayerButton.properties.backgroundFillStyle="rgba(0, 0, 0, 0.5)",this.children.push(this.showOverLayerButton),this.settingsList=new C,this.settingsList.alignement.horizontalAlign=n.Left,this.settingsList.alignement.verticalAlign=r.Top;var t=new I;t.text="Add Layer",t.properties.fillStyle="white",this.settingsList.addItem(t),t.clicked.addEventListener(t=>{ct.settingManager.addStarLayer()}),this.addLayerBtn=t,ct.settingManager.update.addEventListener(this.settingsUpdated)}updateLayout(t,e){super.updateLayout(t,e),this.showOverLayerButton.updateLayout(t,e);var i=2*this.showOverLayerButton.dimensions.height;this.settingsList.updateLayout(t,new s(e.x,e.y+i,e.width,e.height-i)),this.detailedStarLayerView&&this.detailedStarLayerView.updateLayout(t,new s(e.x+this.settingsList.dimensions.width,e.y+i,e.width,e.height-i))}}class D{constructor(t){this.starLayer=t,this.update=(t=>{for(const e of this.starLayer.stars)e.x+=this.starLayer.speed*t,e.y+=this.starLayer.speed*t,e.x>ct.settings.width&&(e.x-=ct.settings.width),e.y>ct.settings.height&&(e.y-=ct.settings.height)})}}class T{}T.instances={},T.addInstance=((t,e)=>{T.instances[t]=e}),T.getInstance=(t=>T.instances[t]);class P extends y{constructor(){super(),this.playIconText="",this.pauseIconText="",this.stopIconText="",this.nextIconText="",this.previousIconText="";var t=T.getInstance("audio"),e=new C;e.alignement.verticalAlign=r.Bottom,e.alignement.margin.bottom=10,e.properties.orientation=d.Horizontal,this.children.push(e);var i=new I;i.properties.fontPrefix="900",i.properties.fontFamily="'Font Awesome 5 Free'",i.text=this.playIconText,i.clicked.addEventListener(()=>{i.text==this.playIconText?(t.play(),i.text=this.pauseIconText):(t.pause(),i.text=this.playIconText),this.triggerUpdateLayout()}),e.addItem(i);var s=new I;s.properties.fontPrefix="900",s.properties.fontFamily="'Font Awesome 5 Free'",s.text=this.stopIconText,s.clicked.addEventListener(()=>{t.stop(),i.text==this.pauseIconText&&(i.text=this.playIconText),this.triggerUpdateLayout()}),e.addItem(s);var a=new I;a.properties.fontPrefix="900",a.properties.fontFamily="'Font Awesome 5 Free'",a.text=this.previousIconText,a.clicked.addEventListener(()=>{t.previous()}),e.addItem(a);var n=new I;n.properties.fontPrefix="900",n.properties.fontFamily="'Font Awesome 5 Free'",n.text=this.nextIconText,n.clicked.addEventListener(()=>{t.next()}),e.addItem(n)}updateLayout(t,e){super.updateLayout(t,e);for(const e of this.children)e.updateLayout(t,this.bounds)}}!function(t){t[t.FitAndOverfill=0]="FitAndOverfill",t[t.FitAndSpace=1]="FitAndSpace"}(l||(l={}));class U{constructor(){this.imageScalingMode=l.FitAndSpace,this.scale=1}}class B extends M{constructor(t){super(),this.properties=new U,this.superRender=this.render,this.render=(t=>{this.superRender(t),t.drawImage(this.image,this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height),this.isMouseOver&&this.isEnabled&&(t.fillStyle="rgba(255,255,255,0.5)",t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height))}),this.image=t}updateLayout(t,e){super.updateLayout(t,e);var i=1,s=this.image.naturalWidth/this.image.naturalHeight>e.width/e.height;switch(this.properties.imageScalingMode){case l.FitAndOverfill:i=s?e.height/this.image.height:e.width/this.image.width;break;case l.FitAndSpace:i=s?e.width/this.image.width:e.height/this.image.height}var a=this.image.naturalWidth*i,n=this.image.naturalHeight*i;this.dimensions.x=this.alignement.calculateDimensionsX(e,a),this.dimensions.y=this.alignement.calculateDimensionsY(e,a),this.dimensions.width=a,this.dimensions.height=n}}B.createFromUrl=(t=>new Promise((e,i)=>{var s=new Image;s.src=t,s.onload=(()=>{e(new B(s))})}));class N extends y{constructor(){super();var t=T.getInstance("assets").getImage("background"),e=new B(t);e.disableMouseEvents(),e.properties.imageScalingMode=l.FitAndOverfill,this.children.push(e)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class z extends y{constructor(){super(),this.frequencyIndex=7,this.lowerBorder=.4,this.upperBorder=.9;var t=T.getInstance("assets"),e=T.getInstance("audio");this.analyser=e.getAnalyser();var i=t.getImage("logo"),s=t.getImage("logo-nova");this.disableMouseEvents();var a=new B(s);a.properties.imageScalingMode=l.FitAndOverfill,this.children.push(a);var n=a.render;a.render=(t=>{var e=this.analyser.getSpectrum(),i=this.calculateRelDataValue(e[this.frequencyIndex]);t.save(),t.globalAlpha=i,n(t),t.restore()});var r=new B(i);r.properties.imageScalingMode=l.FitAndOverfill,this.children.push(r)}calculateRelDataValue(t){var e=t/255;return e<this.lowerBorder&&(e=this.lowerBorder),e>this.upperBorder&&(e=this.upperBorder),(e-this.lowerBorder)/(this.upperBorder-this.lowerBorder)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class H{constructor(){this.fontSize=40,this.fontPrefix="",this.fontFamily="fontawesome",this.fillStyle="blue",this.backgroundFillStyle=void 0,this.getFont=(()=>{var t="";return this.fontPrefix&&(t+=this.fontPrefix+" "),t+=this.fontSize+"px "+this.fontFamily})}}class R extends M{constructor(){super(),this.properties=new H,this.render=(t=>{t.fillStyle=this.properties.fillStyle,t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.dimensions.x,this.dimensions.y)}),this.updateLayout=((t,e)=>{super.updateLayout(t,e),t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top";var i=t.measureText(this.text),a=this.alignement.calculateDimensionsX(e,i.width),n=this.alignement.calculateDimensionsY(e,this.properties.fontSize);this.dimensions=new s(a,n,i.width,this.properties.fontSize),console.log(this.dimensions)}),this.disableMouseEvents()}}class K extends y{constructor(){super();var t=new R;t.text="Loading...",t.properties.fillStyle="white",this.children.push(t)}updateLayout(t,e){super.updateLayout(t,e);for(const e of this.children)e.updateLayout(t,this.bounds)}}class X extends y{constructor(){super(),this.starLayers=[],this.starAnimators=[],this.start=(()=>{this.loadingView.deactivate(1),setTimeout(()=>{this.children.removeItem(this.loadingView);var t=new N;t.deactivated(),this.children.push(t),t.activate(3),document.testit=t;var e=new P;e.deactivated(),this.children.push(e),e.activate(3);var i=new z;i.deactivated(),this.children.push(i),i.activate(3);var s=new k;s.deactivated(),this.children.push(s),s.activate(3),ct.settingManager.update.addEventListener(this.appSettingsUpdated),this.triggerUpdateLayout()},1200)}),this.appSettingsUpdated=(t=>{switch(t){case h.AddStarLayer:this.addStarLayer();break;case h.RemoveStarLayer:this.removeStarLayer()}}),this.addStarLayer=(()=>{for(const i of ct.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==i)){var t=new f(i);this.starLayers.push(t),this.children.splice(1,0,t),this.triggerUpdateLayout();var e=new D(i);this.animation.addUpdateFunction(e.update),this.starAnimators.push(e);break}}),this.removeStarLayer=(()=>{for(const e of this.starLayers)if(null==ct.settings.starLayers.firstOrDefault(t=>t==e.starLayer)){var t=this.starAnimators.first(t=>t.starLayer==e.starLayer);this.animation.removeUpdateFunction(t.update),this.starAnimators.removeItem(t),this.children.remove(t=>t==e),this.starLayers.remove(t=>t==e),this.triggerUpdateLayout()}}),this.animation=T.getInstance("animation"),this.loadingView=new K,this.children.push(this.loadingView)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class Y{constructor(){this.stars=[],this.speed=1*Math.random()+.1}}class W{constructor(){this.updateFunctions=[],this.isRunning=!1,this.addUpdateFunction=(t=>{this.updateFunctions.push(t)}),this.removeUpdateFunction=(t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)}),this.setFps=(t=>{this.fps=t,this.fpsInterval=1e3/this.fps}),this.animationLoop=(()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var i=e/1e3;for(const t of this.updateFunctions)t(i)}}),this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class j{constructor(){this.loadFontawesomeFree=(()=>this.loadFont("","","900 20px 'Font Awesome 5 Free'")),this.loadFontawesomeBrands=(()=>this.loadFont("","","400 20px 'Font Awesome 5 Brands'")),this.countPixels=(t=>{var e=0;for(let r=0;r<t.data.length;r+=4){var i=t.data[r],s=t.data[r+1],a=t.data[r+2],n=t.data[r+3];i<50&&s<50&&a<50&&n>.9&&e++}return e}),this.getIconPixels=((t,e,i)=>{t.clearRect(0,0,e.width,e.height),t.fillText(i,0,0);var s=t.getImageData(0,0,e.width,e.height);return this.countPixels(s)}),this.loadFont=((t,e,i)=>{var s=10;return new Promise((a,n)=>{console.log('loading font "'+i+'"');var r=document.createElement("canvas");r.width=20,r.height=20;var h=r.getContext("2d");h.font=i,h.fillStyle="black",h.textAlign="left",h.textBaseline="top";var o=()=>{var n=this.getIconPixels(h,r,t),d=this.getIconPixels(h,r,e);Math.abs(d-n)>5?(console.log('loaded font "'+i+'"'),a()):0==--s?(console.log("stop loading font after "+s+" retries with 500ms delay"),a()):setTimeout(()=>{o()},500)};o()})})}}class _{constructor(t,e){this.name=t,this.audioCtx=e}}class G extends _{constructor(){super(...arguments),this.getAudioNode=(()=>this.analyserNode)}reload(){return new Promise((t,e)=>{this.analyserNode||(this.analyserNode=this.audioCtx.createAnalyser()),this.analyserNode.fftSize=32,this.analyserNode.smoothingTimeConstant=.9,this.bufferLength=this.analyserNode.frequencyBinCount,this.dataArray=new Uint8Array(this.bufferLength),t()})}getSpectrum(){return this.analyserNode?(this.analyserNode.getByteFrequencyData(this.dataArray),this.dataArray):new Uint8Array(0)}getWave(){return this.analyserNode?(this.analyserNode.getByteTimeDomainData(this.dataArray),this.dataArray):new Uint8Array(0)}}class q extends _{constructor(){super(...arguments),this.getAudioNode=(()=>this.audioCtx.destination)}reload(){}}class J extends _{constructor(t,e,i){super(t,e),this.audioEnded=new L,this.audioEndedEvent=(()=>{this.audioEnded.dispatchEvent()}),this.getAudioNode=(()=>this.source),this.play=(()=>{this.audio.play()}),this.pause=(()=>{this.audio.pause()}),this.stop=(()=>{this.audio.pause(),this.audio.currentTime=0}),this.setUrl=(t=>{var e=!this.audio.paused;this.url=t,this.audio.src=t,this.audio.load(),e&&this.audio.play()}),this.url=i,this.audio=document.createElement("audio"),this.audio.controls=!0,this.audio.src=this.url,this.audio.addEventListener("ended",this.audioEndedEvent)}reload(){return new Promise((t,e)=>{this.source||(this.source=this.audioCtx.createMediaElementSource(this.audio)),t()})}}class Q{constructor(){this.audioNodes=[],this.addMediaElementSource=((t,e)=>{var i=new J(t,this.audioCtx,e);return this.audioNodes.push(i),i}),this.addAnalyzer=(t=>{var e=new G(t,this.audioCtx);return this.audioNodes.push(e),e}),this.getAudioGraphNode=(t=>this.audioNodes.first(e=>e.name==t)),this.audioContextStateChanged=new x,this.documentClick=(()=>{"suspended"===this.audioCtx.state&&(this.audioCtx.resume(),document.removeEventListener("click",this.documentClick))}),this.audioContextStateChangedEvaluator=(()=>{"running"===this.audioCtx.state&&(console.log("audio context state changed"),this.audioCtx.removeEventListener("statechange",this.audioContextStateChangedEvaluator),this.reload().then(()=>{this.audioContextStateChanged.dispatchEvent(this.audioCtx.state)}))}),this.reload=(()=>new Promise((t,e)=>{console.log("realoading audio graph"),Promise.all(this.audioNodes.map(t=>t.reload())).then(()=>{console.log("reloaded audio graph");for(let t=0;t<this.audioNodes.length;t++){const e=this.audioNodes[t];e.getAudioNode().disconnect(),t<this.audioNodes.length-1?e.getAudioNode().connect(this.audioNodes[t+1].getAudioNode()):e.getAudioNode().connect(this.destinationNode.getAudioNode())}t()})})),this.audioCtx=new AudioContext,this.audioCtx.addEventListener("statechange",this.audioContextStateChangedEvaluator),"suspended"===this.audioCtx.state&&(document.addEventListener("click",this.documentClick),console.log("Audio context is suspended. Click the dom to make it running.")),this.destinationNode=new q("destination",this.audioCtx)}}var Z=i(0),$=i.n(Z),tt=i(1),et=i.n(tt),it=i(2),st=i.n(it);class at{constructor(){this.songs=[$.a,et.a,st.a],this.reload=(()=>this.audioGraph.reload()),this.play=(()=>{this.source.play()}),this.pause=(()=>{this.source.pause()}),this.next=(()=>{var t=this.songs.indexOf(this.source.url)+1;t==this.songs.length&&(t=0),this.source.setUrl(this.songs[t])}),this.previous=(()=>{var t=this.songs.indexOf(this.source.url)-1;-1==t&&(t=this.songs.length-1),this.source.setUrl(this.songs[t])}),this.getAnalyser=(()=>this.analyser),this.stop=(()=>{this.source.stop()}),this.audioGraph=new Q,this.source=this.audioGraph.addMediaElementSource("source",this.songs[0]),this.analyser=this.audioGraph.addAnalyzer("analyser")}}class nt{constructor(){this.imageAssets=[],this.addImage=((t,e)=>{this.imageAssets.push({name:t,url:e,image:void 0})}),this.getImage=(t=>{var e=this.imageAssets.firstOrDefault(e=>e.name==t);return e?e.image:void 0}),this.load=(()=>Promise.all(this.imageAssets.map(t=>new Promise((e,i)=>{if(t.image)e();else{var s=new Image;s.src=t.url,s.onload=(()=>{t.image=s,e()})}}))))}}var rt=i(3),ht=i.n(rt),ot=i(4),dt=i.n(ot),lt=i(5),ut=i.n(lt);class ct{constructor(){this.run=(()=>{document.body.style.backgroundColor="black";var t=b.createFullScreen(),e=new a(t),i=new W;i.addUpdateFunction(t.draw),T.addInstance("canvas",t),T.addInstance("stage",e),T.addInstance("animation",i);var s=new X;s.deactivated(),e.setView(s),s.activate(1),console.log("loading app"),Promise.all([(new j).loadFontawesomeFree(),new Promise((t,e)=>{var i=new at;i.reload(),T.addInstance("audio",i),t()}),new Promise((t,e)=>{setTimeout(()=>{t()},2e3)}),new Promise((t,e)=>{var i=new nt;T.addInstance("assets",i),i.addImage("background",ht.a),i.addImage("logo",dt.a),i.addImage("logo-nova",ut.a),i.load().then(()=>{t()})})]).then(()=>{console.log("loaded app"),ct.settingManager.addStarLayer(),ct.settingManager.addStarLayer(),ct.settingManager.addStarLayer(),ct.settingManager.addStarLayer(),s.start()})})}}ct.settings=new class{constructor(t,e){this.width=t,this.height=e,this.starLayers=[]}}(window.innerWidth,window.innerHeight),ct.settingManager=new class{constructor(){this.update=new x,this.addStarLayer=(()=>{var t=new Y;for(let e=0;e<300;e++)t.stars.push({x:Math.random()*ct.settings.width,y:Math.random()*ct.settings.height,r:.5*Math.random()+.05});ct.settings.starLayers.push(t),this.update.dispatchEvent(h.AddStarLayer)}),this.removeStarLayer=(t=>{ct.settings.starLayers.removeItem(t),this.update.dispatchEvent(h.RemoveStarLayer)}),this.changeNumberOfStars=((t,e)=>{if(e>0){var i=e-t.stars.length;if(i>0)for(let e=0;e<i;e++){var s=t.stars.map(t=>t.r),a=Math.min(...s),n=Math.max(...s);t.stars.push({x:Math.random()*ct.settings.width,y:Math.random()*ct.settings.height,r:Math.random()*(n-a)+a})}else if(i<0)for(let e=0;e<-i;e++)t.stars.splice(Math.floor(Math.random()*t.stars.length),1);this.update.dispatchEvent(h.ChangeNumberOfStars)}}),this.changeSpeed=((t,e)=>{t.speed=e,this.update.dispatchEvent(h.ChangeSpeed)}),this.changeSizes=((t,e,i)=>{var s=t.stars.map(t=>t.r),a=Math.min(...s),n=Math.max(...s)-a;n<=0&&(n=1e-4);for(const s of t.stars)s.r=(s.r-a)/n*(i-e)+e;this.update.dispatchEvent(h.ChangeSpeed)})}};i(6);document.addEventListener("DOMContentLoaded",function(){(new ct).run()},!1),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("service-worker.js").then(t=>{console.log("SW registered: ",t)}).catch(t=>{console.log("SW registration failed: ",t)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9kZW1vL1RyYWlsZXJfZmFpbnRDb2xvci5tcDMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9kZW1vL1RyYWlsZXJfRGVlcEZpZWxkLm1wMyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2RlbW8vVHJhaWxlcl9EcmlmdGluZ0ludG9UaGVBdG1vc3BoZXJlLm1wMyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2JhY2tncm91bmQucG5nIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvbG9nby1mcm9udC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9sb2dvLW5vdmEucG5nIiwid2VicGFjazovLy8uL2VuYy9zcmMvZXh0ZW5zaW9ucy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZS50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL3N0YWdlLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvYWxpZ25lbWVudC9ob3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2FsaWduZW1lbnQvdmVydGljYWxBbGlnbmVtZW50T3B0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9zZXR0aW5ncy9zZXR0aW5nT3BlcmF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L292ZXJsYXkvc2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9hbGlnbmVtZW50L29yaWVudGF0aW9uLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvaW1hZ2VTY2FsaW5nTW9kZS50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2FsaWduZW1lbnQvc3BhY2luZy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2FsaWduZW1lbnQvYWxpZ25lbWVudC50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL21ldGhvZE1hbmlwdWxhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL3VpbWF0aW9uL3VpbWF0aW9uLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvcmVuZGVyT2JqZWN0LnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9zdGFyUmVuZGVyT2JqZWN0LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L3N0YXJMYXllckRyYXdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9vdmVybGF5L3NldHRpbmdzT3ZlcmxheVZpZXdNb2RlbC50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2VFdmVudC50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2VDYW52YXMudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9jb250cm9scy9jb250cm9sLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvYnV0dG9uUHJvcGVydGllcy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2J1dHRvbi50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xpc3RWaWV3UHJvcGVydGllcy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xpc3RWaWV3LnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvc2xpZGVyLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvcmFuZ2VTbGlkZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvb3ZlcmxheS9zdGFyTGF5ZXJWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L292ZXJsYXkvc2V0dGluZ3NPdmVybGF5Vmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9zdGFyTGF5ZXJBbmltYXRvci50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2RpbmplY3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvcGxheWVyVmlldy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2ltYWdlUHJvcGVydGllcy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2ltYWdlLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L2JhY2tncm91bmRJbWFnZVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvZnJvbnRWaWV3LnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvbGFiZWxQcm9wZXJ0aWVzLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvbGFiZWwudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvbG9hZGluZ1ZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvaW5zcGllcnR5UGxheWVyVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWxzL3N0YXJMYXllci50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2VBbmltYXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9jYW52YXNIZWxwZXIudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9hdWRpby9hdWRpb0dyYXBoTm9kZS50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2F1ZGlvL2F1ZGlvR3JhcGhOb2RlQW5hbHlzZXIudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9hdWRpby9hdWRpb0dyYXBoTm9kZURlc3RpbmF0aW9uLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvYXVkaW8vYXVkaW9HcmFwaE5vZGVFbGVtZW50U291cmNlLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvYXVkaW8vYXVkaW9HcmFwaC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYXVkaW9NYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvYXNzZXRNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9zZXR0aW5ncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2V0dGluZ3Mvc2V0dGluZ3NNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkFycmF5IiwiZmlyc3RPckRlZmF1bHQiLCJmdW5jIiwiYXJyYXlJdGVtIiwidGhpcyIsImZpcnN0IiwiY29uc29sZSIsImxvZyIsImdldE5leHQiLCJjdXJyZW50Iiwic2VsZWN0b3IiLCJuZXh0UG9zaXRpb24iLCJuZXh0IiwieCIsInJlbW92ZUl0ZW0iLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiY29udGFpbnMiLCJyZW1vdmVJdGVtSWZFeGlzdHMiLCJhZGRJdGVtSWZOb3RFeGlzdHMiLCJwdXNoIiwicmVtb3ZlIiwidG9MaXN0IiwiZmlsdGVyIiwiUmVjdGFuZ2xlIiwiW29iamVjdCBPYmplY3RdIiwieSIsIndpZHRoIiwiaGVpZ2h0IiwiY29sbGlkZXNXaXRoIiwicmVjdGFuZ2xlIiwiaGl0eCIsImhpdHkiLCJpc0hpdEJ5Iiwic3RhZ2VfU3RhZ2UiLCJjYW52YXMiLCJjYW52YXNSZXNpemVkIiwic2hvdWxkVXBkYXRlTGF5b3V0IiwibW91c2VEb3duIiwiZXYiLCJ2aWV3IiwiY2xpZW50WCIsImRwciIsImNsaWVudFkiLCJhbHRLZXkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJtb3VzZVVwIiwibW91c2VNb3ZlIiwiY2xpY2siLCJyZW5kZXIiLCJjdHgiLCJ1cGRhdGVMYXlvdXQiLCJjbGVhclJlY3QiLCJzZXRWaWV3IiwiYWRkRHJhd0Z1bmN0aW9uIiwicmVzaXplZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJkb2N1bWVudCIsIkhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uIiwiVmVydGljYWxBbGlnbmVtZW50T3B0aW9uIiwiU2V0dGluZ09wZXJhdGlvbiIsIlNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlIiwiT3JpZW50YXRpb24iLCJJbWFnZVNjYWxpbmdNb2RlIiwiU3BhY2luZyIsInRvcCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsImFsaWduZW1lbnRfQWxpZ25lbWVudCIsImhvcml6b250YWxBbGlnbiIsIkNlbnRlciIsInZlcnRpY2FsQWxpZ24iLCJtYXJnaW4iLCJjYWxjdWxhdGVEaW1lbnNpb25zWCIsImJvdW5kcyIsIkxlZnQiLCJSaWdodCIsImNhbGN1bGF0ZURpbWVuc2lvbnNZIiwiVG9wIiwiQm90dG9tIiwiTWV0aG9kTWFuaXB1bGF0aW9uIiwiZXhlY3V0ZXIiLCJpbml0aWFsTWV0aG9kIiwic2V0TWV0aG9kIiwibWV0aG9kcyIsImFkZCIsImJ1aWxkTWV0aG9kIiwibmV3TWV0aG9kIiwibGVuZ3RoIiwicG9wIiwicmVzZXQiLCJjbGVhciIsIlVJbWF0aW9uIiwiZHVyYXRpb25TZWNvbmRzIiwiZ2V0VmFsdWUiLCJEYXRlIiwibm93Iiwic3RhcnRUaW1lIiwiZW5kZWQiLCJyZW5kZXJPYmplY3RfUmVuZGVyT2JqZWN0IiwiZ2VuZXJhdGVOZXdJZCIsImlkQ291bnRlciIsImRpbWVuc2lvbnMiLCJhbGlnbmVtZW50IiwidHJpZ2dlclVwZGF0ZUxheW91dCIsImlzQWN0aXZlIiwiYWN0aXZhdGUiLCJyZW5kZXJNZXRob2RNYW5pcHVsYXRpb24iLCJ1aW1hdGlvbiIsImN1cnJlbnRNZXRob2QiLCJzYXZlIiwiZ2xvYmFsQWxwaGEiLCJyZXN0b3JlIiwiZGVhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlIiwiZGlzYWJsZU1vdXNlRXZlbnRzIiwiaWQiLCJfcmVuZGVyTWV0aG9kTWFuaXB1bGF0aW9uIiwibGF5b3V0Vmlld19MYXlvdXRWaWV3IiwiY2hpbGRyZW4iLCJzdXBlclJlbmRlciIsImNoaWxkIiwic3RhclJlbmRlck9iamVjdF9TdGFyUmVuZGVyT2JqZWN0Iiwic3RhciIsInN1cGVyIiwiZW5kIiwiZ3JhZCIsImNyZWF0ZVJhZGlhbEdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiZmlsbFN0eWxlIiwiYXJjIiwiTWF0aCIsIlBJIiwiZmlsbCIsImJlZ2luUGF0aCIsIkVycm9yIiwic3RhckxheWVyRHJhd2VyX1N0YXJMYXllckRyYXdlciIsInN0YXJMYXllciIsInNldHRpbmdzVXBkYXRlZCIsIm9wZXJhdGlvbiIsIkNoYW5nZU51bWJlck9mU3RhcnMiLCJ1cGRhdGVOdW1iZXJPZlN0YXJzIiwiYXBwX0FwcCIsInNldHRpbmdNYW5hZ2VyIiwidXBkYXRlIiwic3RhcnMiLCJzZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxfU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsIiwic3RhdGUiLCJoaWRkZW4iLCJFRXZlbnQiLCJsaXN0ZW5lcnMiLCJsaXN0ZW5lciIsImFkZEV2ZW50TGlzdGVuZXJJZk5vdEV4aXN0cyIsImRpc3BhdGNoRXZlbnQiLCJldmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVySWZFeGlzdHMiLCJFRXZlbnRUIiwiYXJnIiwiRUV2ZW50VFQiLCJhcmcxIiwiYXJnMiIsImVDYW52YXNfRUNhbnZhcyIsImRyYXdGdW5jdGlvbnMiLCJkcHJTY2FsaW5nRW5hYmxlZCIsImVuYWJsZURwclNjYWxpbmciLCJyZXNpemUiLCJkaXNhYmxlRHByU2NhbGluZyIsIndpbmRvdyIsImRldmljZVBpeGVsUmF0aW8iLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImRyYXciLCJzY2FsZSIsImRyYXdGdW5jdGlvbiIsInJlbW92ZURyYXdGdW5jdGlvbiIsImJvZHkiLCJwYXJlbnRFbGVtZW50Iiwic3R5bGUiLCJvdmVyZmxvdyIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImVuQ2FudmFzIiwiZ2V0Q29udGV4dCIsImN1cnNvckxvY2siLCJTZXRDdXJzb3IiLCJwb2ludGVyIiwiY3Vyc29yIiwiY29udHJvbF9Db250cm9sIiwiaXNNb3VzZU92ZXIiLCJpc0VuYWJsZWQiLCJjbGlja2VkIiwiQnV0dG9uUHJvcGVydGllcyIsImZvbnRTaXplIiwiZm9udFByZWZpeCIsImZvbnRGYW1pbHkiLCJtb3VzZU92ZXJGaWxsU3R5bGUiLCJiYWNrZ3JvdW5kRmlsbFN0eWxlIiwidW5kZWZpbmVkIiwiZ2V0Rm9udCIsImZvbnQiLCJidXR0b25fQnV0dG9uIiwicHJvcGVydGllcyIsImZpbGxSZWN0IiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwiZmlsbFRleHQiLCJ0ZXh0Iiwic2l6ZSIsIm1lYXN1cmVUZXh0IiwibGlzdFZpZXdQcm9wZXJ0aWVzX0xpc3RWaWV3UHJvcGVydGllcyIsIml0ZW1TcGFjaW5nIiwib3JpZW50YXRpb24iLCJWZXJ0aWNhbCIsImxpc3RWaWV3X0xpc3RWaWV3IiwiYWRkSXRlbSIsImxheW91dFZpZXciLCJtYXgiLCJzbGlkZXJfU2xpZGVyIiwicmFkaXVzIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInZhbHVlQ2hhbmdlZCIsInN0cm9rZVN0eWxlIiwibGluZVdpZHRoIiwibW92ZVRvIiwibGluZVRvIiwic3Ryb2tlIiwicmVsVmFsdWUiLCJjbG9zZVBhdGgiLCJpc0RyYWdnaW5nIiwidXBkYXRlQ3VycmVudFZhbHVlIiwidmFsIiwicmFuZ2VTbGlkZXJfUmFuZ2VTbGlkZXIiLCJjdXJyZW50VmFsdWVMb3ciLCJjdXJyZW50VmFsdWVIaWdoIiwibWluRGlmZiIsInZhbHVlc0NoYW5nZWQiLCJzbGlkZXJZIiwicmVsVmFsdWVMb3ciLCJsb3dYIiwicmVsVmFsdWVIaWdoIiwiaGlnaFgiLCJnZXRDbGlja2VkVmFsdWUiLCJkaWZmVG9Mb3ciLCJhYnMiLCJkaWZmVG9IaWdoIiwiaXNEcmFnZ2luZ0xvdyIsImlzRHJhZ2dpbmdIaWdoIiwidXBkYXRlQ3VycmVudFZhbHVlcyIsInN0YXJMYXllclZpZXdfU3RhckxheWVyVmlldyIsIm51bWJlck9mU3RhcnNDaGFuZ2VkIiwibnVtYmVyT2ZTdGFycyIsImNoYW5nZU51bWJlck9mU3RhcnMiLCJyb3VuZCIsInNwZWVkQ2hhbmdlZCIsInNwZWVkIiwiY2hhbmdlU3BlZWQiLCJzaXplc0NoYW5nZWQiLCJsb3dCb3JkZXIiLCJoaWdoQm9yZGVyIiwiY2hhbmdlU2l6ZXMiLCJzZXR0aW5nc0xpc3QiLCJidG5Gb3JMYXllciIsInNlbmRlciIsInJlbW92ZVN0YXJMYXllciIsInNsaWRlciIsInNsaWRlclNwZWVkIiwic2xpZGVyU2l6ZSIsInNpemVzIiwibWFwIiwibWluIiwic2V0dGluZ3NPdmVybGF5Vmlld19TZXR0aW5nc092ZXJsYXlWaWV3Iiwidmlld01vZGVsIiwibGFzdE1vdmVkIiwiaW5hY3Rpdml0eVRpbWVvdXQiLCJsYXllckJ1dHRvbnMiLCJBZGRTdGFyTGF5ZXIiLCJzZXR0aW5ncyIsInN0YXJMYXllcnMiLCJ0YWciLCJhZGRMYXllckJ0biIsInRvZ2dsZVNob3dIaWRlU3RhckxheWVyVmlldyIsIlJlbW92ZVN0YXJMYXllciIsInNldHRpbmdzTGF5ZXIiLCJkZXRhaWxlZFN0YXJMYXllclZpZXciLCJzaG93SGlkZU92ZXJsYXlDbGlja2VkIiwidmlzaWJsZSIsInNldFN0YXRlIiwiYmVmb3JlVmlzaWJsZSIsIm1vdXNlSW5hY3Rpdml0eUhhbmRsZXIiLCJzZXRUaW1lb3V0Iiwic2hvd092ZXJMYXllckJ1dHRvbiIsImJ0bkZvck5ld0xheWVyIiwiYWRkU3RhckxheWVyIiwic3BhY2UiLCJzdGFyTGF5ZXJBbmltYXRvcl9TdGFyTGF5ZXJBbmltYXRvciIsInRpbWVEaWZmIiwiRGluamVjdCIsImluc3RhbmNlcyIsImFkZEluc3RhbmNlIiwiaW5zdGFuY2UiLCJnZXRJbnN0YW5jZSIsInBsYXllclZpZXdfUGxheWVyVmlldyIsInBsYXlJY29uVGV4dCIsInBhdXNlSWNvblRleHQiLCJzdG9wSWNvblRleHQiLCJuZXh0SWNvblRleHQiLCJwcmV2aW91c0ljb25UZXh0IiwiYXVkaW9NYW5hZ2VyIiwibGlzdFZpZXciLCJIb3Jpem9udGFsIiwicGxheVBhdXNlQnRuIiwicGxheSIsInBhdXNlIiwic3RvcEJ0biIsInN0b3AiLCJwcmV2aW91c0J0biIsInByZXZpb3VzIiwibmV4dEJ0biIsImltYWdlUHJvcGVydGllc19JbWFnZVByb3BlcnRpZXMiLCJpbWFnZVNjYWxpbmdNb2RlIiwiRml0QW5kU3BhY2UiLCJpbWFnZV9FSW1hZ2UiLCJpbWFnZSIsImRyYXdJbWFnZSIsImZpdFNjYWxlIiwiaXNJbWFnZVdpZGVyIiwibmF0dXJhbFdpZHRoIiwibmF0dXJhbEhlaWdodCIsIkZpdEFuZE92ZXJmaWxsIiwiY3JlYXRlRnJvbVVybCIsImltYWdlVXJsIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJJbWFnZSIsInNyYyIsIm9ubG9hZCIsImJhY2tncm91bmRJbWFnZVZpZXdfQmFja2dyb3VuZEltYWdlVmlldyIsImJhY2tncm91bmQiLCJnZXRJbWFnZSIsImZyb250Vmlld19Gcm9udFZpZXciLCJmcmVxdWVuY3lJbmRleCIsImxvd2VyQm9yZGVyIiwidXBwZXJCb3JkZXIiLCJhc3NldE1hbmFnZXIiLCJhbmFseXNlciIsImdldEFuYWx5c2VyIiwibG9nbyIsImxvZ29Ob3ZhIiwibG9nb05vdmFFSW1hZ2UiLCJkYXRhIiwiZ2V0U3BlY3RydW0iLCJyZWxEYXRhVmFsdWUiLCJjYWxjdWxhdGVSZWxEYXRhVmFsdWUiLCJsb2dvRnJvbnQiLCJkYXRhVmFsdWUiLCJMYWJlbFByb3BlcnRpZXMiLCJsYWJlbF9MYWJlbCIsImxvYWRpbmdWaWV3X0xvYWRpbmdWaWV3IiwibG9hZGluZ0xhYmVsIiwiaW5zcGllcnR5UGxheWVyVmlld19JbnNwaWVydHlQbGF5ZXJWaWV3Iiwic3RhckFuaW1hdG9ycyIsInN0YXJ0IiwibG9hZGluZ1ZpZXciLCJ0ZXN0aXQiLCJwbGF5ZXJWaWV3IiwiZnJvbnQiLCJzZXR0aW5nc092ZXJsYXkiLCJhcHBTZXR0aW5nc1VwZGF0ZWQiLCJsYXllciIsImFuaW1hdG9yIiwiYW5pbWF0aW9uIiwiYWRkVXBkYXRlRnVuY3Rpb24iLCJzdGFyTGF5ZXJEcmF3cyIsInJlbW92ZVVwZGF0ZUZ1bmN0aW9uIiwiU3RhckxheWVyIiwicmFuZG9tIiwiRUFuaW1hdGlvbiIsInVwZGF0ZUZ1bmN0aW9ucyIsImlzUnVubmluZyIsInNldEZwcyIsImZwcyIsImZwc0ludGVydmFsIiwiYW5pbWF0aW9uTG9vcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImVsYXBzZWQiLCJsYXN0RnJhbWVUaW1lIiwidXBkYXRlRnVuY3Rpb24iLCJrZXlDb2RlIiwicGxheVBhdXNlIiwiQ2FudmFzSGVscGVyIiwibG9hZEZvbnRhd2Vzb21lRnJlZSIsImxvYWRGb250IiwibG9hZEZvbnRhd2Vzb21lQnJhbmRzIiwiY291bnRQaXhlbHMiLCJpbWFnZURhdGEiLCJwaXhlbENvdW50IiwiZyIsImIiLCJhIiwiZ2V0SWNvblBpeGVscyIsImljb24iLCJnZXRJbWFnZURhdGEiLCJpY29uMSIsImljb24yIiwicmV0cmllcyIsInRlbXBDYW52YXMiLCJ0ZW1wQ3R4IiwiY2hlY2tMb2FkZWQiLCJpY29uMVBpeGVsQ291bnQiLCJpY29uMlBpeGVsQ291bnQiLCJBdWRpb0dyYXBoTm9kZSIsImF1ZGlvQ3R4IiwiYXVkaW9HcmFwaE5vZGVBbmFseXNlcl9BdWRpb0dyYXBoTm9kZUFuYWx5c2VyIiwiZ2V0QXVkaW9Ob2RlIiwiYW5hbHlzZXJOb2RlIiwiY3JlYXRlQW5hbHlzZXIiLCJmZnRTaXplIiwic21vb3RoaW5nVGltZUNvbnN0YW50IiwiYnVmZmVyTGVuZ3RoIiwiZnJlcXVlbmN5QmluQ291bnQiLCJkYXRhQXJyYXkiLCJVaW50OEFycmF5IiwiZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEiLCJnZXRCeXRlVGltZURvbWFpbkRhdGEiLCJhdWRpb0dyYXBoTm9kZURlc3RpbmF0aW9uX0F1ZGlvR3JhcGhOb2RlRGVzdGluYXRpb24iLCJkZXN0aW5hdGlvbiIsImF1ZGlvR3JhcGhOb2RlRWxlbWVudFNvdXJjZV9BdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UiLCJ1cmwiLCJhdWRpb0VuZGVkIiwiYXVkaW9FbmRlZEV2ZW50Iiwic291cmNlIiwiYXVkaW8iLCJjdXJyZW50VGltZSIsInNldFVybCIsInBhdXNlZCIsImxvYWQiLCJjb250cm9scyIsImNyZWF0ZU1lZGlhRWxlbWVudFNvdXJjZSIsImF1ZGlvR3JhcGhfQXVkaW9HcmFwaCIsImF1ZGlvTm9kZXMiLCJhZGRNZWRpYUVsZW1lbnRTb3VyY2UiLCJzb3VyY2VOb2RlIiwiYWRkQW5hbHl6ZXIiLCJhbmFseXplck5vZGUiLCJnZXRBdWRpb0dyYXBoTm9kZSIsImF1ZGlvQ29udGV4dFN0YXRlQ2hhbmdlZCIsImRvY3VtZW50Q2xpY2siLCJyZXN1bWUiLCJhdWRpb0NvbnRleHRTdGF0ZUNoYW5nZWRFdmFsdWF0b3IiLCJyZWxvYWQiLCJ0aGVuIiwiYWxsIiwiYXVkaW9Ob2RlIiwiZGlzY29ubmVjdCIsImNvbm5lY3QiLCJkZXN0aW5hdGlvbk5vZGUiLCJBdWRpb0NvbnRleHQiLCJhdWRpb01hbmFnZXJfQXVkaW9NYW5hZ2VyIiwic29uZ3MiLCJUcmFpbGVyX2ZhaW50Q29sb3JfZGVmYXVsdCIsIlRyYWlsZXJfRGVlcEZpZWxkX2RlZmF1bHQiLCJUcmFpbGVyX0RyaWZ0aW5nSW50b1RoZUF0bW9zcGhlcmVfZGVmYXVsdCIsImF1ZGlvR3JhcGgiLCJuZXh0U29uZ0luZGV4IiwicHJldmlvdXNTb25nSW5kZXgiLCJBc3NldE1hbmFnZXIiLCJpbWFnZUFzc2V0cyIsImFkZEltYWdlIiwiaW1hZ2VBc3NldCIsInJ1biIsImJhY2tncm91bmRDb2xvciIsImNyZWF0ZUZ1bGxTY3JlZW4iLCJzdGFnZSIsImJhY2tncm91bmRfZGVmYXVsdCIsImxvZ29fZnJvbnRfZGVmYXVsdCIsImxvZ29fbm92YV9kZWZhdWx0IiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiZGlmZiIsImZsb29yIiwiQ2hhbmdlU3BlZWQiLCJtaW5GaXgiLCJuYXZpZ2F0b3IiLCJzZXJ2aWNlV29ya2VyIiwicmVnaXN0ZXIiLCJyZWdpc3RyYXRpb24iLCJjYXRjaCIsInJlZ2lzdHJhdGlvbkVycm9yIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsRUFBQSxDQUEwQ0ssWUFBQSxFQUFBQyxJQUFBTCxLQUsxQ1osRUFBQWtCLEVBQUEsU0FBQWhCLEdBQ0Esb0JBQUFpQixlQUFBQyxhQUNBTixPQUFBQyxlQUFBYixFQUFBaUIsT0FBQUMsWUFBQSxDQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxFQUFBRSxHQUVBLEdBREEsRUFBQUEsSUFBQUYsRUFBQXJCLEVBQUFxQixJQUNBLEVBQUFFLEVBQUEsT0FBQUYs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QUFjLEVBQUN6SCxFQUFzQndILEtBQ3hDeEgsRUFBVXdILE1BQVFBLEVBQ2xCalEsS0FBS2dKLE9BQU9TLGNBQWM5RixFQUFpQnlhLGVBR3hDcGUsS0FBQXNRLFlBQWMsRUFBQzdILEVBQXNCMkgsRUFBbUJDLEtBQzNELElBQUlTLEVBQVFySSxFQUFVUSxNQUFNOEgsSUFBSXRRLEdBQUtBLEVBQUUvQixHQUNuQ2lRLEVBQWtCeEcsS0FBSzZJLE9BQU9GLEdBRzlCdU4sRUFGbUJsVyxLQUFLc0YsT0FBT3FELEdBRUZuQyxFQUM3QjBQLEdBQVUsSUFDVkEsRUFBUyxNQUViLElBQUssTUFBTTFXLEtBQVFjLEVBQVVRLE1BQ3pCdEIsRUFBS2pKLEdBQU1pSixFQUFLakosRUFBSWlRLEdBQW1CMFAsR0FBVWhPLEVBQWFELEdBQWNBLEVBRWhGcFEsS0FBS2dKLE9BQU9TLGNBQWM5RixFQUFpQnlhLHNCQ25FbkQ1YSxTQUFTRCxpQkFBaUIsbUJBRTFCLFlBQ2MsSUFBSXVGLElBQ1YyVSxRQUo0QyxHQU9oRCxrQkFBbUJhLFdBQ25COVQsT0FBT2pILGlCQUFpQixPQUFRLEtBQzVCK2EsVUFBVUMsY0FBY0MsU0FBUyxxQkFDNUJsQyxLQUFLbUMsSUFDRnZlLFFBQVFDLElBQUksa0JBQW1Cc2UsS0FDaENDLE1BQU1DLElBQ0x6ZSxRQUFRQyxJQUFJLDJCQUE0QndlIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNyk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0NTQ4NjE2NzUwYjQ5NTk5ZTI5YWQzMWYyNzA1MmZjNy5tcDNcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0MmUxYzkxNTczZTAzMjdjZDNmMTdmMjUxZThhZjJhNi5tcDNcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJmMWNlZWE1ZDU1NTk0N2M4MDI4MWYzNjhiZmFmOGZhOC5tcDNcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI2ODlmMzQ0MTZmMmEzMGI3NzhlMThmNTIzYTA2OGFmNC5wbmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0YTJkMWZlZjk1Y2Q5MWJjNjZjYWEzMTViMjJiZTJkZC5wbmdcIjsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCI0MzA3NWZmYjNkNmVhZmU1YTE3MzQxY2U3OWQ5ZWIxZC5wbmdcIjsiLCJpbnRlcmZhY2UgQXJyYXk8VD4ge1xyXG4gICAgcmVtb3ZlSXRlbUlmRXhpc3RzKGl0ZW06IFQpOiB2b2lkO1xyXG4gICAgY29udGFpbnMoaXRlbTogVCk6IGJvb2xlYW47XHJcbiAgICByZW1vdmVJdGVtKGl0ZW06IFQpOiB2b2lkO1xyXG4gICAgcmVtb3ZlKHNlbGVjdG9yOiAoaXRlbTogVCkgPT4gYm9vbGVhbik6IHZvaWQ7XHJcbiAgICBhZGRJdGVtSWZOb3RFeGlzdHMoaXRlbTogVCk6IHZvaWQ7XHJcbiAgICB0b0xpc3QoKTogVFtdO1xyXG4gICAgZ2V0TmV4dChjdXJyZW50OiBULCBzZWxlY3RvcjogKGl0ZW06IFQpID0+IG51bWJlcik6IFQ7XHJcbiAgICBmaXJzdChzZWxlY3RvcjogKGl0ZW06IFQpID0+IGJvb2xlYW4pOiBUO1xyXG4gICAgZmlyc3RPckRlZmF1bHQoc2VsZWN0b3I6IChpdGVtOiBUKSA9PiBib29sZWFuKTogVDtcclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLmZpcnN0T3JEZWZhdWx0ID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgIGZvciAoY29uc3QgYXJyYXlJdGVtIG9mIHRoaXMpIHtcclxuICAgICAgICBpZiAoZnVuYyhhcnJheUl0ZW0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJheUl0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuXHJcbkFycmF5LnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uIChmdW5jKSB7XHJcbiAgICBmb3IgKGNvbnN0IGFycmF5SXRlbSBvZiB0aGlzKSB7XHJcbiAgICAgICAgaWYgKGZ1bmMoYXJyYXlJdGVtKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gYXJyYXlJdGVtO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGNvbnNvbGUubG9nKFwiaXRlbSBub3QgZm91bmRcIik7XHJcbiAgICBjb25zb2xlLmxvZyh0aGlzKTtcclxuICAgIHRocm93IFwiaXRlbSBub3QgZm91bmRcIjtcclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLmdldE5leHQgPSBmdW5jdGlvbiA8VD4oY3VycmVudDogVCwgc2VsZWN0b3I6IChpdGVtOiBUKSA9PiBudW1iZXIpOiBUIHtcclxuICAgIHZhciBuZXh0UG9zaXRpb24gPSBzZWxlY3RvcihjdXJyZW50KSArIDE7XHJcbiAgICB2YXIgbmV4dCA9ICh0aGlzIGFzIFRbXSkuZmlyc3RPckRlZmF1bHQoKHgpID0+IHNlbGVjdG9yKHgpID09IG5leHRQb3NpdGlvbik7XHJcbiAgICBpZiAoIW5leHQpIHtcclxuICAgICAgICBuZXh0ID0gKHRoaXMgYXMgVFtdKS5maXJzdCh4ID0+IHNlbGVjdG9yKHgpID09IDEpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBuZXh0O1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUucmVtb3ZlSXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XHJcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoaXRlbSk7XHJcbiAgICBpZiAoaW5kZXggIT0gLTEpIHtcclxuICAgICAgICB0aGlzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRocm93IFwiaXRlbSBub3QgZm91bmRcIjtcclxuICAgIH1cclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gPFQ+KGl0ZW06IFQpIHtcclxuICAgIHJldHVybiB0aGlzLmluZGV4T2YoaXRlbSkgIT09IC0xO1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUucmVtb3ZlSXRlbUlmRXhpc3RzID0gZnVuY3Rpb24gPFQ+KGl0ZW06IFQpIHtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihpdGVtKTtcclxuICAgIGlmIChpbmRleCAhPSAtMSkge1xyXG4gICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH1cclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLmFkZEl0ZW1JZk5vdEV4aXN0cyA9IGZ1bmN0aW9uIDxUPihpdGVtOiBUKSB7XHJcbiAgICB2YXIgaW5kZXggPSB0aGlzLmluZGV4T2YoaXRlbSk7XHJcbiAgICBpZiAoaW5kZXggPT0gLTEpIHtcclxuICAgICAgICAodGhpcyBhcyBUW10pLnB1c2goaXRlbSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkFycmF5LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiA8VD4oc2VsZWN0b3I6IChpdGVtOiBUKSA9PiBib29sZWFuKSB7XHJcbiAgICAodGhpcyBhcyBUW10pLnJlbW92ZUl0ZW0oKHRoaXMgYXMgVFtdKS5maXJzdChzZWxlY3RvcikpO1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUudG9MaXN0ID0gZnVuY3Rpb24gPFQ+KCk6IFRbXSB7XHJcbiAgICByZXR1cm4gKHRoaXMgYXMgVFtdKS5maWx0ZXIoeCA9PiB0cnVlKTtcclxufVxyXG4iLCJleHBvcnQgY2xhc3MgUmVjdGFuZ2xlIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB4OiBudW1iZXIsIHB1YmxpYyB5OiBudW1iZXIsIHB1YmxpYyB3aWR0aDogbnVtYmVyLCBwdWJsaWMgaGVpZ2h0OiBudW1iZXIpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBjb2xsaWRlc1dpdGggPSAocmVjdGFuZ2xlOiBSZWN0YW5nbGUpID0+IHtcclxuICAgICAgICB2YXIgaGl0eCA9IGZhbHNlO1xyXG4gICAgICAgIHZhciBoaXR5ID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHRoaXMueCA8PSByZWN0YW5nbGUueCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy54IDw9IHJlY3RhbmdsZS54ICYmIHRoaXMueCArIHRoaXMud2lkdGggPiByZWN0YW5nbGUueCkge1xyXG4gICAgICAgICAgICAgICAgaGl0eCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocmVjdGFuZ2xlLnggPD0gdGhpcy54ICYmIHJlY3RhbmdsZS54ICsgcmVjdGFuZ2xlLndpZHRoID4gdGhpcy54KSB7XHJcbiAgICAgICAgICAgICAgICBoaXR4ID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGhpdHgpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMueSA8PSByZWN0YW5nbGUueSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMueSA8PSByZWN0YW5nbGUueSAmJiB0aGlzLnkgKyB0aGlzLndpZHRoID4gcmVjdGFuZ2xlLnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBoaXR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZWN0YW5nbGUueSA8PSB0aGlzLnkgJiYgcmVjdGFuZ2xlLnkgKyByZWN0YW5nbGUud2lkdGggPiB0aGlzLnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBoaXR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGhpdHggJiYgaGl0eTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaXNIaXRCeSA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHJldHVybiB4ID4gdGhpcy54ICYmIHggPCB0aGlzLnggKyB0aGlzLndpZHRoXHJcbiAgICAgICAgICAgICYmIHkgPiB0aGlzLnkgJiYgeSA8IHRoaXMueSArIHRoaXMuaGVpZ2h0O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRUNhbnZhcyB9IGZyb20gXCIuL2VDYW52YXNcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xyXG5pbXBvcnQgeyBMYXlvdXRWaWV3IH0gZnJvbSBcIi4vbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlld1wiO1xyXG5pbXBvcnQgeyBFQW5pbWF0aW9uIH0gZnJvbSBcIi4uL2VBbmltYXRpb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGFnZSB7XHJcbiAgICBwcml2YXRlIHZpZXc6IExheW91dFZpZXc7XHJcbiAgICBwcml2YXRlIHNob3VsZFVwZGF0ZUxheW91dDogYm9vbGVhbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhbnZhczogRUNhbnZhcykge1xyXG4gICAgICAgIGNhbnZhcy5hZGREcmF3RnVuY3Rpb24odGhpcy5yZW5kZXIpO1xyXG4gICAgICAgIGNhbnZhcy5yZXNpemVkLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5jYW52YXNSZXNpemVkKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vkb3duXCIsIHRoaXMubW91c2VEb3duKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2V1cFwiLCB0aGlzLm1vdXNlVXApO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZU1vdmUpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmNsaWNrKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNhbnZhc1Jlc2l6ZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zaG91bGRVcGRhdGVMYXlvdXQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbW91c2VEb3duID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlldykge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXcubW91c2VEb3duKHtcclxuICAgICAgICAgICAgICAgIGNsaWVudFg6IGV2LmNsaWVudFggLyB0aGlzLmNhbnZhcy5kcHIsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRZOiBldi5jbGllbnRZIC8gdGhpcy5jYW52YXMuZHByLFxyXG4gICAgICAgICAgICAgICAgYWx0S2V5OiBldi5hbHRLZXksXHJcbiAgICAgICAgICAgICAgICBjdHJsS2V5OiBldi5jdHJsS2V5LFxyXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGV2LnNoaWZ0S2V5XHJcbiAgICAgICAgICAgIH0gYXMgTW91c2VFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbW91c2VVcCA9IChldjogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3Lm1vdXNlVXAoe1xyXG4gICAgICAgICAgICAgICAgY2xpZW50WDogZXYuY2xpZW50WCAvIHRoaXMuY2FudmFzLmRwcixcclxuICAgICAgICAgICAgICAgIGNsaWVudFk6IGV2LmNsaWVudFkgLyB0aGlzLmNhbnZhcy5kcHIsXHJcbiAgICAgICAgICAgICAgICBhbHRLZXk6IGV2LmFsdEtleSxcclxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGV2LmN0cmxLZXksXHJcbiAgICAgICAgICAgICAgICBzaGlmdEtleTogZXYuc2hpZnRLZXlcclxuICAgICAgICAgICAgfSBhcyBNb3VzZUV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBtb3VzZU1vdmUgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy52aWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlldy5tb3VzZU1vdmUoe1xyXG4gICAgICAgICAgICAgICAgY2xpZW50WDogZXYuY2xpZW50WCAvIHRoaXMuY2FudmFzLmRwcixcclxuICAgICAgICAgICAgICAgIGNsaWVudFk6IGV2LmNsaWVudFkgLyB0aGlzLmNhbnZhcy5kcHIsXHJcbiAgICAgICAgICAgICAgICBhbHRLZXk6IGV2LmFsdEtleSxcclxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGV2LmN0cmxLZXksXHJcbiAgICAgICAgICAgICAgICBzaGlmdEtleTogZXYuc2hpZnRLZXlcclxuICAgICAgICAgICAgfSBhcyBNb3VzZUV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjbGljayA9IChldjogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3LmNsaWNrKHtcclxuICAgICAgICAgICAgICAgIGNsaWVudFg6IGV2LmNsaWVudFggLyB0aGlzLmNhbnZhcy5kcHIsXHJcbiAgICAgICAgICAgICAgICBjbGllbnRZOiBldi5jbGllbnRZIC8gdGhpcy5jYW52YXMuZHByLFxyXG4gICAgICAgICAgICAgICAgYWx0S2V5OiBldi5hbHRLZXksXHJcbiAgICAgICAgICAgICAgICBjdHJsS2V5OiBldi5jdHJsS2V5LFxyXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGV2LnNoaWZ0S2V5XHJcbiAgICAgICAgICAgIH0gYXMgTW91c2VFdmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlldykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRVcGRhdGVMYXlvdXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy51cGRhdGVMYXlvdXQoY3R4LCBuZXcgUmVjdGFuZ2xlKDAsIDAsIHdpZHRoLCBoZWlnaHQpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlTGF5b3V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy52aWV3LnJlbmRlcihjdHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VmlldyA9ICh2aWV3OiBMYXlvdXRWaWV3KSA9PiB7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZUxheW91dCA9IHRydWU7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZW51bSBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbiB7XHJcbiAgICBMZWZ0LFxyXG4gICAgQ2VudGVyLFxyXG4gICAgUmlnaHQsXHJcbn0iLCJleHBvcnQgZW51bSBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24ge1xyXG4gICAgVG9wLFxyXG4gICAgQ2VudGVyLFxyXG4gICAgQm90dG9tLFxyXG59IiwiZXhwb3J0IGVudW0gU2V0dGluZ09wZXJhdGlvbiB7XHJcbiAgICBBZGRTdGFyTGF5ZXIsXHJcbiAgICBSZW1vdmVTdGFyTGF5ZXIsXHJcbiAgICBDaGFuZ2VOdW1iZXJPZlN0YXJzLFxyXG4gICAgQ2hhbmdlU3BlZWQsXHJcbiAgICBDaGFuZ2VTaXplc1xyXG59IiwiZXhwb3J0IGVudW0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUge1xyXG4gICAgaGlkZGVuLFxyXG4gICAgYmVmb3JlVmlzaWJsZSxcclxuICAgIHZpc2libGVcclxufSIsImV4cG9ydCBlbnVtIE9yaWVudGF0aW9uIHtcclxuICAgIEhvcml6b250YWwsXHJcbiAgICBWZXJ0aWNhbFxyXG59IiwiZXhwb3J0IGVudW0gSW1hZ2VTY2FsaW5nTW9kZXtcclxuICAgIEZpdEFuZE92ZXJmaWxsLFxyXG4gICAgRml0QW5kU3BhY2VcclxufSIsImV4cG9ydCBjbGFzcyBTcGFjaW5nIHtcclxuICAgIHB1YmxpYyB0b3A6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgcmlnaHQ6IG51bWJlciA9IDA7XHJcbiAgICBwdWJsaWMgYm90dG9tOiBudW1iZXIgPSAwO1xyXG4gICAgcHVibGljIGxlZnQ6IG51bWJlciA9IDA7XHJcbn0iLCJpbXBvcnQgeyBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbiB9IGZyb20gXCIuL2hvcml6b250YWxBbGlnbmVtZW50T3B0aW9uXCI7XHJcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbiB9IGZyb20gXCIuL3ZlcnRpY2FsQWxpZ25lbWVudE9wdGlvblwiO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IFNwYWNpbmcgfSBmcm9tIFwiLi9zcGFjaW5nXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQWxpZ25lbWVudCB7XHJcbiAgICBwdWJsaWMgaG9yaXpvbnRhbEFsaWduID0gSG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb24uQ2VudGVyO1xyXG4gICAgcHVibGljIHZlcnRpY2FsQWxpZ24gPSBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24uQ2VudGVyO1xyXG5cclxuICAgIHB1YmxpYyBtYXJnaW4gPSBuZXcgU3BhY2luZygpO1xyXG4gICAgLy8gcHVibGljIHBhZGRpbmcgPSBuZXcgU3BhY2luZygpO1xyXG5cclxuICAgIHB1YmxpYyBjYWxjdWxhdGVEaW1lbnNpb25zWCA9IChib3VuZHM6IFJlY3RhbmdsZSwgd2lkdGg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5ob3Jpem9udGFsQWxpZ24pIHtcclxuICAgICAgICAgICAgY2FzZSBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi5MZWZ0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvdW5kcy54ICsgdGhpcy5tYXJnaW4ubGVmdDtcclxuICAgICAgICAgICAgY2FzZSBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi5DZW50ZXI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYm91bmRzLnggKyBib3VuZHMud2lkdGggLyAyIC0gd2lkdGggLyAyO1xyXG4gICAgICAgICAgICBjYXNlIEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uLlJpZ2h0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvdW5kcy54ICsgYm91bmRzLndpZHRoIC0gd2lkdGggLSB0aGlzLm1hcmdpbi5yaWdodDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNhbGN1bGF0ZURpbWVuc2lvbnNZID0gKGJvdW5kczogUmVjdGFuZ2xlLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy52ZXJ0aWNhbEFsaWduKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVmVydGljYWxBbGlnbmVtZW50T3B0aW9uLlRvcDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBib3VuZHMueSArIHRoaXMubWFyZ2luLnRvcDtcclxuICAgICAgICAgICAgY2FzZSBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24uQ2VudGVyOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvdW5kcy55ICsgYm91bmRzLmhlaWdodCAvIDIgLSBoZWlnaHQgLyAyO1xyXG4gICAgICAgICAgICBjYXNlIFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbi5Cb3R0b206XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYm91bmRzLnkgKyBib3VuZHMuaGVpZ2h0IC0gaGVpZ2h0IC0gdGhpcy5tYXJnaW4uYm90dG9tO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBNZXRob2RNYW5pcHVsYXRpb248VCBleHRlbmRzICguLi5hcmdzOiBhbnlbXSkgPT4gYW55PiB7XHJcbiAgICBwcml2YXRlIG1ldGhvZHM6IFRbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZXhlY3V0ZXI6IGFueSwgaW5pdGlhbE1ldGhvZDogVCwgcHJpdmF0ZSBzZXRNZXRob2Q6IChtZXRob2Q6IFQpID0+IHZvaWQpIHtcclxuICAgICAgICBpbml0aWFsTWV0aG9kLmJpbmQodGhpcy5leGVjdXRlcik7XHJcbiAgICAgICAgdGhpcy5tZXRob2RzLnB1c2goaW5pdGlhbE1ldGhvZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZCA9IChidWlsZE1ldGhvZDogKGN1cnJlbnRNZXRob2Q6IFQpID0+IFQpID0+IHtcclxuICAgICAgICB2YXIgb2xkID0gdGhpcy5tZXRob2RzW3RoaXMubWV0aG9kcy5sZW5ndGggLSAxXTtcclxuICAgICAgICB2YXIgbmV3TWV0aG9kID0gYnVpbGRNZXRob2Qob2xkKTtcclxuICAgICAgICB0aGlzLm1ldGhvZHMucHVzaChuZXdNZXRob2QpO1xyXG4gICAgICAgIHRoaXMuc2V0TWV0aG9kKG5ld01ldGhvZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLm1ldGhvZHMucG9wKCk7XHJcbiAgICAgICAgdGhpcy5zZXRNZXRob2QodGhpcy5tZXRob2RzW3RoaXMubWV0aG9kcy5sZW5ndGggLSAxXSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlc2V0ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2V0TWV0aG9kKHRoaXMubWV0aG9kc1t0aGlzLm1ldGhvZHMubGVuZ3RoIC0gMV0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGVhciA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnNldE1ldGhvZCg8VD4oKCkgPT4geyB9KSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgVUltYXRpb24ge1xyXG4gICAgcHJpdmF0ZSBzdGFydFRpbWU6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGR1cmF0aW9uU2Vjb25kczogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zdGFydFRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRWYWx1ZSA9ICgpID0+IHtcclxuICAgICAgICB2YXIgY3VycmVudCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgdmFyIGRpZmYgPSAoY3VycmVudCAtIHRoaXMuc3RhcnRUaW1lKSAvIDEwMDA7XHJcbiAgICAgICAgcmV0dXJuIGRpZmYgLyB0aGlzLmR1cmF0aW9uU2Vjb25kcztcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZW5kZWQgPSAoKSA9PiB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnQgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHZhciBkaWZmID0gKGN1cnJlbnQgLSB0aGlzLnN0YXJ0VGltZSkgLyAxMDAwO1xyXG4gICAgICAgIHJldHVybiBkaWZmID4gdGhpcy5kdXJhdGlvblNlY29uZHM7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IEFsaWduZW1lbnQgfSBmcm9tIFwiLi9hbGlnbmVtZW50L2FsaWduZW1lbnRcIjtcclxuaW1wb3J0IHsgTWV0aG9kTWFuaXB1bGF0aW9uIH0gZnJvbSBcIi4uL21ldGhvZE1hbmlwdWxhdGlvblwiO1xyXG5pbXBvcnQgeyBVSW1hdGlvbiB9IGZyb20gXCIuL3VpbWF0aW9uL3VpbWF0aW9uXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVuZGVyT2JqZWN0IHtcclxuICAgIHByaXZhdGUgc3RhdGljIGlkQ291bnRlciA9IDA7XHJcbiAgICBwcml2YXRlIGdlbmVyYXRlTmV3SWQgPSAoKSA9PiB7XHJcbiAgICAgICAgUmVuZGVyT2JqZWN0LmlkQ291bnRlcisrO1xyXG4gICAgICAgIHJldHVybiBSZW5kZXJPYmplY3QuaWRDb3VudGVyO1xyXG4gICAgfVxyXG4gICAgc3RhcnRUaW1lOiBudW1iZXI7XHJcbiAgICBkdXJhdGlvbjogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdlbmVyYXRlTmV3SWQoKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIm9iamVjdCBcIiArIHRoaXMuaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlkOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHRhZzogYW55O1xyXG5cclxuICAgIHB1YmxpYyBib3VuZHM6IFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgMCwgMCk7XHJcbiAgICBwdWJsaWMgZGltZW5zaW9uczogUmVjdGFuZ2xlID0gbmV3IFJlY3RhbmdsZSgwLCAwLCAwLCAwKTtcclxuXHJcbiAgICBwdWJsaWMgYWxpZ25lbWVudCA9IG5ldyBBbGlnbmVtZW50KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBzaG91bGRVcGRhdGVMYXlvdXQgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIF9yZW5kZXJNZXRob2RNYW5pcHVsYXRpb246IE1ldGhvZE1hbmlwdWxhdGlvbjwoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpID0+IHZvaWQ+O1xyXG4gICAgcHVibGljIGdldCByZW5kZXJNZXRob2RNYW5pcHVsYXRpb24oKTogTWV0aG9kTWFuaXB1bGF0aW9uPChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkgPT4gdm9pZD4ge1xyXG4gICAgICAgIGlmICghdGhpcy5fcmVuZGVyTWV0aG9kTWFuaXB1bGF0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlck1ldGhvZE1hbmlwdWxhdGlvbiA9IG5ldyBNZXRob2RNYW5pcHVsYXRpb24odGhpcywgdGhpcy5yZW5kZXIsIChyZW5kZXIpID0+IHRoaXMucmVuZGVyID0gcmVuZGVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlbmRlck1ldGhvZE1hbmlwdWxhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlTGF5b3V0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGF5b3V0KGN0eCwgdGhpcy5ib3VuZHMpO1xyXG4gICAgICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZUxheW91dCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpIHtcclxuICAgICAgICB0aGlzLmJvdW5kcyA9IGJvdW5kcztcclxuICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZUxheW91dCA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0cmlnZ2VyVXBkYXRlTGF5b3V0ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlTGF5b3V0ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzQWN0aXZlID0gdHJ1ZTtcclxuICAgIHB1YmxpYyBhY3RpdmF0ZSA9IChkdXJhdGlvblNlY29uZHM6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVyTWV0aG9kTWFuaXB1bGF0aW9uLnJlc2V0KCk7XHJcbiAgICAgICAgdmFyIHVpbWF0aW9uID0gbmV3IFVJbWF0aW9uKGR1cmF0aW9uU2Vjb25kcyk7XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyTWV0aG9kTWFuaXB1bGF0aW9uLmFkZCgoY3VycmVudE1ldGhvZCkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodWltYXRpb24uZW5kZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNZXRob2QoY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlck1ldGhvZE1hbmlwdWxhdGlvbi5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSB1aW1hdGlvbi5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRNZXRob2QoY3R4KTtcclxuICAgICAgICAgICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcHVibGljIGRlYWN0aXZhdGVkID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMucmVuZGVyTWV0aG9kTWFuaXB1bGF0aW9uLmNsZWFyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRlYWN0aXZhdGUgPSAoZHVyYXRpb25TZWNvbmRzOiBudW1iZXIpID0+IHtcclxuICAgICAgICB2YXIgdWltYXRpb24gPSBuZXcgVUltYXRpb24oZHVyYXRpb25TZWNvbmRzKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXJNZXRob2RNYW5pcHVsYXRpb24uYWRkKChjdXJyZW50TWV0aG9kKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh1aW1hdGlvbi5lbmRlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJNZXRob2RNYW5pcHVsYXRpb24ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJNZXRob2RNYW5pcHVsYXRpb24uY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSAxIC0gdWltYXRpb24uZ2V0VmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TWV0aG9kKGN0eCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3R4LnJlc3RvcmUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkaXNhYmxlTW91c2VFdmVudHMgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5tb3VzZURvd24gPSAoKSA9PiB7IH07XHJcbiAgICAgICAgdGhpcy5tb3VzZVVwID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMubW91c2VNb3ZlID0gKCkgPT4geyB9O1xyXG4gICAgICAgIHRoaXMuY2xpY2sgPSAoKSA9PiB7IH07XHJcbiAgICB9XHJcblxyXG4gICAgYWJzdHJhY3QgbW91c2VEb3duKGV2OiBNb3VzZUV2ZW50KTogdm9pZDtcclxuICAgIGFic3RyYWN0IG1vdXNlVXAoZXY6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgYWJzdHJhY3QgbW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KTogdm9pZDtcclxuICAgIGFic3RyYWN0IGNsaWNrKGV2OiBNb3VzZUV2ZW50KTogdm9pZDtcclxufSIsImltcG9ydCB7IFJlbmRlck9iamVjdCB9IGZyb20gXCIuLi9yZW5kZXJPYmplY3RcIjtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMYXlvdXRWaWV3IGV4dGVuZHMgUmVuZGVyT2JqZWN0IHtcclxuICAgIHByb3RlY3RlZCBjaGlsZHJlbjogUmVuZGVyT2JqZWN0W10gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIHN1cGVyUmVuZGVyID0gdGhpcy5yZW5kZXI7XHJcbiAgICBwdWJsaWMgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zdXBlclJlbmRlcihjdHgpO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY3R4KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBtb3VzZURvd24oZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY2hpbGQubW91c2VEb3duKGV2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1vdXNlVXAoZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY2hpbGQubW91c2VVcChldik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3VzZU1vdmUoZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY2hpbGQubW91c2VNb3ZlKGV2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsaWNrKGV2OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuLnRvTGlzdCgpKSB7XHJcbiAgICAgICAgICAgIGNoaWxkLmNsaWNrKGV2KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBSZW5kZXJPYmplY3QgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9yZW5kZXJPYmplY3RcIjtcclxuaW1wb3J0IHsgU3RhciB9IGZyb20gXCIuLi9tb2RlbHMvc3RhclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXJSZW5kZXJPYmplY3QgZXh0ZW5kcyBSZW5kZXJPYmplY3Qge1xyXG4gICAgbW91c2VEb3duKGV2OiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICB9XHJcbiAgICBtb3VzZVVwKGV2OiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdGFyOiBTdGFyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZCA9PiB7XHJcblxyXG4gICAgICAgIHZhciBlbmQgPSB0aGlzLnN0YXIuciAqIDM7XHJcbiAgICAgICAgdmFyIGdyYWQgPSBjdHguY3JlYXRlUmFkaWFsR3JhZGllbnQodGhpcy5zdGFyLngsIHRoaXMuc3Rhci55LCB0aGlzLnN0YXIuciwgdGhpcy5zdGFyLngsIHRoaXMuc3Rhci55LCBlbmQpO1xyXG4gICAgICAgIGdyYWQuYWRkQ29sb3JTdG9wKDAsICdyZ2JhKDI1NSwgMjU1LCAyNTUsIDAuMiknKTtcclxuICAgICAgICBncmFkLmFkZENvbG9yU3RvcCgxLCAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBncmFkO1xyXG4gICAgICAgIGN0eC5hcmModGhpcy5zdGFyLngsIHRoaXMuc3Rhci55LCBlbmQsIDAsIE1hdGguUEkgKiAyKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG5cclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHguYXJjKHRoaXMuc3Rhci54LCB0aGlzLnN0YXIueSwgdGhpcy5zdGFyLnIsIDAsIE1hdGguUEkgKiAyKTtcclxuICAgICAgICBjdHguZmlsbCgpO1xyXG4gICAgfVxyXG4gICAgbW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KTogdm9pZCB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XHJcbiAgICB9XHJcbiAgICBjbGljayhldjogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xheW91dFZpZXdcIjtcclxuaW1wb3J0IHsgU3RhclJlbmRlck9iamVjdCB9IGZyb20gXCIuL3N0YXJSZW5kZXJPYmplY3RcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IFN0YXJMYXllciB9IGZyb20gXCIuLi9tb2RlbHMvc3RhckxheWVyXCI7XHJcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi9hcHBcIjtcclxuaW1wb3J0IHsgU2V0dGluZ09wZXJhdGlvbiB9IGZyb20gXCIuLi9zZXR0aW5ncy9zZXR0aW5nT3BlcmF0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhckxheWVyRHJhd2VyIGV4dGVuZHMgTGF5b3V0VmlldyB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RhckxheWVyOiBTdGFyTGF5ZXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci51cGRhdGUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnNldHRpbmdzVXBkYXRlZClcclxuICAgICAgICB0aGlzLmRpc2FibGVNb3VzZUV2ZW50cygpO1xyXG4gICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0dGluZ3NVcGRhdGVkID0gKG9wZXJhdGlvbjogU2V0dGluZ09wZXJhdGlvbikgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAob3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgU2V0dGluZ09wZXJhdGlvbi5DaGFuZ2VOdW1iZXJPZlN0YXJzOlxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVOdW1iZXJPZlN0YXJzKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVOdW1iZXJPZlN0YXJzID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbiA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHN0YXIgb2YgdGhpcy5zdGFyTGF5ZXIuc3RhcnMpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKG5ldyBTdGFyUmVuZGVyT2JqZWN0KHN0YXIpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyBtb3VzZU1vdmUoZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xpY2soZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlIH0gZnJvbSBcIi4vc2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWwge1xyXG4gICAgcHVibGljIHN0YXRlOiBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZSA9IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmhpZGRlbjtcclxufSIsImV4cG9ydCBjbGFzcyBFRXZlbnQge1xyXG4gICAgcHJpdmF0ZSBsaXN0ZW5lcnM6ICgoKSA9PiB2b2lkKVtdID0gW107XHJcblxyXG4gICAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXIgPSAobGlzdGVuZXI6ICgpID0+IHZvaWQpID0+IHtcclxuICAgICAgICAvLyB2YWxpZGF0aW9uXHJcbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgYWxyZWFkeSBhZGRlZFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXJJZk5vdEV4aXN0cyA9IChsaXN0ZW5lcjogKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpID49IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGRpc3BhdGNoRXZlbnQgPSAoKSA9PiB7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBldmVudCA9IHRoaXMubGlzdGVuZXJzW2ldO1xyXG4gICAgICAgICAgICBldmVudCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IChsaXN0ZW5lcjogKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcImxpc3RlbmVyIG5vdCBmb3VuZFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lcklmRXhpc3RzID0gKGxpc3RlbmVyOiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPCAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZSh0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFRXZlbnRUPFQ+IHtcclxuICAgIHByaXZhdGUgbGlzdGVuZXJzOiAoKGFyZzogVCkgPT4gdm9pZClbXSA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoYXJnOiBUKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPj0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcImxpc3RlbmVyIGFscmVhZHkgYWRkZWRcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkaXNwYXRjaEV2ZW50ID0gKGFyZzogVCkgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLmxpc3RlbmVyc1tpXTtcclxuICAgICAgICAgICAgZXZlbnQoYXJnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSAobGlzdGVuZXI6IChhcmc6IFQpID0+IHZvaWQpID0+IHtcclxuICAgICAgICAvLyB2YWxpZGF0aW9uXHJcbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJsaXN0ZW5lciBub3QgZm91bmRcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZSh0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBFRXZlbnRUVDxUMSwgVDI+IHtcclxuICAgIHByaXZhdGUgbGlzdGVuZXJzOiAoKGFyZzE6IFQxLCBhcmcyOiBUMikgPT4gdm9pZClbXSA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoYXJnMTogVDEsIGFyZzI6IFQyKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPj0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcImxpc3RlbmVyIGFscmVhZHkgYWRkZWRcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkaXNwYXRjaEV2ZW50ID0gKGFyZzE6IFQxLCBhcmcyOiBUMikgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLmxpc3RlbmVyc1tpXTtcclxuICAgICAgICAgICAgZXZlbnQoYXJnMSwgYXJnMik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoYXJnMTogVDEsIGFyZzI6IFQyKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgbm90IGZvdW5kXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UodGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgRUFuaW1hdGlvbiB9IGZyb20gXCIuLi9lQW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IEVFdmVudCB9IGZyb20gXCIuLi9lRXZlbnRcIjtcclxuXHJcbmV4cG9ydCB0eXBlIERyYXdGdW5jdGlvbiA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgd2lkdGg/OiBudW1iZXIsIGhlaWdodD86IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBFQ2FudmFzIHtcclxuICAgIHByaXZhdGUgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudDtcclxuICAgIHByaXZhdGUgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XHJcblxyXG4gICAgcHJpdmF0ZSBkcmF3RnVuY3Rpb25zOiBEcmF3RnVuY3Rpb25bXSA9IFtdO1xyXG4gICAgcHVibGljIGRwciA9IDE7XHJcblxyXG4gICAgcHVibGljIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5jbGllbnRXaWR0aCAvIHRoaXMuZHByO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FudmFzLmNsaWVudEhlaWdodCAvIHRoaXMuZHByO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZHByU2NhbGluZ0VuYWJsZWQgPSBmYWxzZTtcclxuICAgIHB1YmxpYyBlbmFibGVEcHJTY2FsaW5nID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuZHByU2NhbGluZ0VuYWJsZWQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMucmVzaXplKCk7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZGlzYWJsZURwclNjYWxpbmcgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kcHJTY2FsaW5nRW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmVzaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlc2l6ZWQgPSBuZXcgRUV2ZW50KClcclxuXHJcbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGdWxsU2NyZWVuKCk6IEVDYW52YXMge1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUubWFyZ2luID0gXCIwXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XHJcblxyXG4gICAgICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gXCIxMDAlXCJcclxuICAgICAgICBjYW52YXMuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcblxyXG4gICAgICAgIHZhciBlbkNhbnZhcyA9IG5ldyBFQ2FudmFzKCk7XHJcbiAgICAgICAgZW5DYW52YXMuY2FudmFzID0gY2FudmFzO1xyXG4gICAgICAgIGVuQ2FudmFzLmN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xyXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsIGVuQ2FudmFzLnJlc2l6ZSk7XHJcbiAgICAgICAgZW5DYW52YXMucmVzaXplKCk7XHJcbiAgICAgICAgcmV0dXJuIGVuQ2FudmFzO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGN1cnNvckxvY2s6IHN0cmluZyA9IG51bGw7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBTZXRDdXJzb3IgPSAobmFtZTogc3RyaW5nLCBwb2ludGVyOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgaWYgKHBvaW50ZXIpIHtcclxuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5jdXJzb3IgPSBcInBvaW50ZXJcIjtcclxuICAgICAgICAgICAgRUNhbnZhcy5jdXJzb3JMb2NrID0gbmFtZTtcclxuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT0gRUNhbnZhcy5jdXJzb3JMb2NrKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJkZWZhdWx0XCI7XHJcbiAgICAgICAgICAgIEVDYW52YXMuY3Vyc29yTG9jayA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZXNpemUgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kcHIgPSB0aGlzLmRwclNjYWxpbmdFbmFibGVkID8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gfHwgMSA6IDE7XHJcblxyXG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5jYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5jYW52YXMuY2xpZW50SGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLnJlc2l6ZWQuZGlzcGF0Y2hFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuY3R4LnNhdmUoKTtcclxuICAgICAgICB0aGlzLmN0eC5zY2FsZSh0aGlzLmRwciwgdGhpcy5kcHIpO1xyXG4gICAgICAgIGZvciAoY29uc3QgZHJhd0Z1bmN0aW9uIG9mIHRoaXMuZHJhd0Z1bmN0aW9ucykge1xyXG4gICAgICAgICAgICBkcmF3RnVuY3Rpb24odGhpcy5jdHgsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGREcmF3RnVuY3Rpb24gPSAoZnVuYzogRHJhd0Z1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgdGhpcy5kcmF3RnVuY3Rpb25zLnB1c2goZnVuYyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZURyYXdGdW5jdGlvbiA9IChmdW5jOiBEcmF3RnVuY3Rpb24pID0+IHtcclxuICAgICAgICB0aGlzLmRyYXdGdW5jdGlvbnMuc3BsaWNlKHRoaXMuZHJhd0Z1bmN0aW9ucy5pbmRleE9mKGZ1bmMpLCAxKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFJlbmRlck9iamVjdCB9IGZyb20gXCIuLi9yZW5kZXJPYmplY3RcIjtcclxuaW1wb3J0IHsgRUNhbnZhcyB9IGZyb20gXCIuLi9lQ2FudmFzXCI7XHJcbmltcG9ydCB7IEVFdmVudFQgfSBmcm9tIFwiLi4vLi4vZUV2ZW50XCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29udHJvbCBleHRlbmRzIFJlbmRlck9iamVjdCB7XHJcbiAgICBwcm90ZWN0ZWQgaXNNb3VzZU92ZXIgPSBmYWxzZTtcclxuICAgIHB1YmxpYyBpc0VuYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgIHB1YmxpYyBjbGlja2VkID0gbmV3IEVFdmVudFQ8Q29udHJvbD4oKTtcclxuXHJcbiAgICBwdWJsaWMgbW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRpbWVuc2lvbnMuaXNIaXRCeShldi5jbGllbnRYLCBldi5jbGllbnRZKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc01vdXNlT3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBFQ2FudmFzLlNldEN1cnNvcih0aGlzLm5hbWUsIHRydWUpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc01vdXNlT3ZlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgRUNhbnZhcy5TZXRDdXJzb3IodGhpcy5uYW1lLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNsaWNrID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRpbWVuc2lvbnMuaXNIaXRCeShldi5jbGllbnRYLCBldi5jbGllbnRZKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGlja2VkLmRpc3BhdGNoRXZlbnQodGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1vdXNlRG93bihldjogTW91c2VFdmVudCk6IHZvaWQgeyB9XHJcbiAgICBwdWJsaWMgbW91c2VVcChldjogTW91c2VFdmVudCk6IHZvaWQgeyB9XHJcbn0iLCJleHBvcnQgY2xhc3MgQnV0dG9uUHJvcGVydGllcyB7XHJcbiAgICBwdWJsaWMgZm9udFNpemUgPSA0MDtcclxuICAgIHB1YmxpYyBmb250UHJlZml4ID0gXCJcIjtcclxuICAgIHB1YmxpYyBmb250RmFtaWx5ID0gXCJmb250YXdlc29tZVwiO1xyXG4gICAgcHVibGljIGZpbGxTdHlsZSA9IFwiYmx1ZVwiO1xyXG4gICAgcHVibGljIG1vdXNlT3ZlckZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICBwdWJsaWMgYmFja2dyb3VuZEZpbGxTdHlsZTogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIHB1YmxpYyBnZXRGb250ID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciBmb250ID0gXCJcIjtcclxuICAgICAgICBpZiAodGhpcy5mb250UHJlZml4KSB7XHJcbiAgICAgICAgICAgIGZvbnQgKz0gdGhpcy5mb250UHJlZml4ICsgXCIgXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9udCArPSB0aGlzLmZvbnRTaXplICsgXCJweFwiICsgXCIgXCIgKyB0aGlzLmZvbnRGYW1pbHk7XHJcbiAgICAgICAgcmV0dXJuIGZvbnQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9sXCI7XHJcbmltcG9ydCB7IEJ1dHRvblByb3BlcnRpZXMgfSBmcm9tIFwiLi9idXR0b25Qcm9wZXJ0aWVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29udHJvbCB7XHJcblxyXG4gICAgcHVibGljIHByb3BlcnRpZXMgPSBuZXcgQnV0dG9uUHJvcGVydGllcygpO1xyXG4gICAgcHVibGljIHRleHQ6IHN0cmluZztcclxuXHJcbiAgICBwdWJsaWMgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5iYWNrZ3JvdW5kRmlsbFN0eWxlKSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnByb3BlcnRpZXMuYmFja2dyb3VuZEZpbGxTdHlsZTtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHRoaXMuZGltZW5zaW9ucy54LCB0aGlzLmRpbWVuc2lvbnMueSwgdGhpcy5kaW1lbnNpb25zLndpZHRoLCB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzTW91c2VPdmVyKSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnByb3BlcnRpZXMubW91c2VPdmVyRmlsbFN0eWxlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnByb3BlcnRpZXMuZmlsbFN0eWxlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY3R4LmZvbnQgPSB0aGlzLnByb3BlcnRpZXMuZ2V0Rm9udCgpO1xyXG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImxlZnRcIjtcclxuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcclxuICAgICAgICBjdHguZmlsbFRleHQodGhpcy50ZXh0LCB0aGlzLmRpbWVuc2lvbnMueCwgdGhpcy5kaW1lbnNpb25zLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCA9PiB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuXHJcbiAgICAgICAgY3R4LmZvbnQgPSB0aGlzLnByb3BlcnRpZXMuZ2V0Rm9udCgpO1xyXG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImxlZnRcIjtcclxuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcclxuICAgICAgICB2YXIgc2l6ZSA9IGN0eC5tZWFzdXJlVGV4dCh0aGlzLnRleHQpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciB4ID0gdGhpcy5hbGlnbmVtZW50LmNhbGN1bGF0ZURpbWVuc2lvbnNYKGJvdW5kcywgc2l6ZS53aWR0aCk7XHJcbiAgICAgICAgdmFyIHkgPSB0aGlzLmFsaWduZW1lbnQuY2FsY3VsYXRlRGltZW5zaW9uc1koYm91bmRzLCB0aGlzLnByb3BlcnRpZXMuZm9udFNpemUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IG5ldyBSZWN0YW5nbGUoeCwgeSwgc2l6ZS53aWR0aCwgdGhpcy5wcm9wZXJ0aWVzLmZvbnRTaXplKVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tIFwiLi4vYWxpZ25lbWVudC9vcmllbnRhdGlvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIExpc3RWaWV3UHJvcGVydGllcyB7XHJcbiAgICBwdWJsaWMgaXRlbVNwYWNpbmcgPSAzMDtcclxuICAgIHB1YmxpYyBvcmllbnRhdGlvbiA9IE9yaWVudGF0aW9uLlZlcnRpY2FsO1xyXG59IiwiaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuL2xheW91dFZpZXdcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xyXG5pbXBvcnQgeyBSZW5kZXJPYmplY3QgfSBmcm9tIFwiLi4vcmVuZGVyT2JqZWN0XCI7XHJcbmltcG9ydCB7IExpc3RWaWV3UHJvcGVydGllcyB9IGZyb20gXCIuL2xpc3RWaWV3UHJvcGVydGllc1wiO1xyXG5pbXBvcnQgeyBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbiB9IGZyb20gXCIuLi9hbGlnbmVtZW50L2hvcml6b250YWxBbGlnbmVtZW50T3B0aW9uXCI7XHJcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbiB9IGZyb20gXCIuLi9hbGlnbmVtZW50L3ZlcnRpY2FsQWxpZ25lbWVudE9wdGlvblwiO1xyXG5pbXBvcnQgeyBPcmllbnRhdGlvbiB9IGZyb20gXCIuLi9hbGlnbmVtZW50L29yaWVudGF0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdFZpZXcgZXh0ZW5kcyBMYXlvdXRWaWV3IHtcclxuICAgIHB1YmxpYyBwcm9wZXJ0aWVzID0gbmV3IExpc3RWaWV3UHJvcGVydGllcygpO1xyXG5cclxuICAgIHB1YmxpYyBhZGRJdGVtID0gKGxheW91dFZpZXc6IFJlbmRlck9iamVjdCkgPT4ge1xyXG4gICAgICAgIGxheW91dFZpZXcuYWxpZ25lbWVudC5ob3Jpem9udGFsQWxpZ24gPSBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi5MZWZ0O1xyXG4gICAgICAgIGxheW91dFZpZXcuYWxpZ25lbWVudC52ZXJ0aWNhbEFsaWduID0gVmVydGljYWxBbGlnbmVtZW50T3B0aW9uLlRvcDtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobGF5b3V0Vmlldyk7XHJcbiAgICAgICAgdGhpcy50cmlnZ2VyVXBkYXRlTGF5b3V0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUl0ZW0gPSAobGF5b3V0VmlldzogUmVuZGVyT2JqZWN0KSA9PiB7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmVJdGVtKGxheW91dFZpZXcpO1xyXG4gICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuXHJcbiAgICAgICAgdmFyIHggPSB0aGlzLmFsaWduZW1lbnQuY2FsY3VsYXRlRGltZW5zaW9uc1goYm91bmRzLCB0aGlzLmRpbWVuc2lvbnMud2lkdGgpO1xyXG4gICAgICAgIHZhciB5ID0gdGhpcy5hbGlnbmVtZW50LmNhbGN1bGF0ZURpbWVuc2lvbnNZKGJvdW5kcywgdGhpcy5kaW1lbnNpb25zLmhlaWdodCk7XHJcblxyXG4gICAgICAgIHZhciB3aWR0aCA9IDA7XHJcbiAgICAgICAgdmFyIGhlaWdodCA9IDA7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMub3JpZW50YXRpb24gPT0gT3JpZW50YXRpb24uVmVydGljYWwpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZCA9IHRoaXMuY2hpbGRyZW5baV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB5ICs9IHRoaXMucHJvcGVydGllcy5pdGVtU3BhY2luZztcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgKz0gdGhpcy5wcm9wZXJ0aWVzLml0ZW1TcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2hpbGQudXBkYXRlTGF5b3V0KGN0eCwgbmV3IFJlY3RhbmdsZSh4LCB5LCAwLCAwKSk7XHJcbiAgICAgICAgICAgICAgICB5ICs9IGNoaWxkLmRpbWVuc2lvbnMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0ICs9IGNoaWxkLmRpbWVuc2lvbnMuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgd2lkdGggPSBNYXRoLm1heCh3aWR0aCwgY2hpbGQuZGltZW5zaW9ucy53aWR0aCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcclxuICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHggKz0gdGhpcy5wcm9wZXJ0aWVzLml0ZW1TcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoICs9IHRoaXMucHJvcGVydGllcy5pdGVtU3BhY2luZztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNoaWxkLnVwZGF0ZUxheW91dChjdHgsIG5ldyBSZWN0YW5nbGUoeCwgeSwgMCwgMCkpO1xyXG4gICAgICAgICAgICAgICAgeCArPSBjaGlsZC5kaW1lbnNpb25zLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgd2lkdGggKz0gY2hpbGQuZGltZW5zaW9ucy53aWR0aDtcclxuICAgICAgICAgICAgICAgIGhlaWdodCA9IE1hdGgubWF4KGhlaWdodCwgY2hpbGQuZGltZW5zaW9ucy5oZWlnaHQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kaW1lbnNpb25zLnggIT0geCB8fCB0aGlzLmRpbWVuc2lvbnMueSAhPSB5IHx8IHRoaXMuZGltZW5zaW9ucy53aWR0aCAhPSB3aWR0aCB8fCB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0ICE9IGhlaWdodCkge1xyXG4gICAgICAgICAgICB0aGlzLmRpbWVuc2lvbnMueCA9IHg7XHJcbiAgICAgICAgICAgIHRoaXMuZGltZW5zaW9ucy55ID0geTtcclxuICAgICAgICAgICAgdGhpcy5kaW1lbnNpb25zLmhlaWdodCA9IGhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5kaW1lbnNpb25zLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IEVFdmVudFQgfSBmcm9tIFwiLi4vLi4vZUV2ZW50XCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2xpZGVyIGV4dGVuZHMgQ29udHJvbCB7XHJcbiAgICBwdWJsaWMgcmFkaXVzOiBudW1iZXIgPSAxMDtcclxuXHJcbiAgICBwdWJsaWMgbWluVmFsdWUgPSAwO1xyXG4gICAgcHVibGljIG1heFZhbHVlID0gMTAwO1xyXG4gICAgcHVibGljIGN1cnJlbnRWYWx1ZSA9IDUwO1xyXG4gICAgaXNEcmFnZ2luZzogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgdmFsdWVDaGFuZ2VkID0gbmV3IEVFdmVudFQ8bnVtYmVyPigpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbmRlciA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHZhciB4ID0gdGhpcy5kaW1lbnNpb25zLng7XHJcbiAgICAgICAgdmFyIHkgPSB0aGlzLmRpbWVuc2lvbnMueTtcclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5tb3ZlVG8oeCArIHRoaXMucmFkaXVzLCB5ICsgdGhpcy5kaW1lbnNpb25zLmhlaWdodCAvIDIpO1xyXG4gICAgICAgIGN0eC5saW5lVG8oeCArIHRoaXMuZGltZW5zaW9ucy53aWR0aCAtIHRoaXMucmFkaXVzLCB5ICsgdGhpcy5kaW1lbnNpb25zLmhlaWdodCAvIDIpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgdmFyIHJlbFZhbHVlID0gKHRoaXMuY3VycmVudFZhbHVlIC0gdGhpcy5taW5WYWx1ZSkgLyAodGhpcy5tYXhWYWx1ZSAtIHRoaXMubWluVmFsdWUpO1xyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyh4ICsgdGhpcy5yYWRpdXMgKyAodGhpcy5kaW1lbnNpb25zLndpZHRoIC0gdGhpcy5yYWRpdXMgKiAyKSAqIHJlbFZhbHVlLCB5ICsgdGhpcy5kaW1lbnNpb25zLmhlaWdodCAvIDIsIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMik7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZUxheW91dCA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkID0+IHtcclxuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xyXG5cclxuICAgICAgICB0aGlzLmRpbWVuc2lvbnMgPSBuZXcgUmVjdGFuZ2xlKGJvdW5kcy54LCBib3VuZHMueSwgMjAwLCB0aGlzLnJhZGl1cyAqIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3VzZURvd24gPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5kaW1lbnNpb25zLmlzSGl0QnkoZXYuY2xpZW50WCwgZXYuY2xpZW50WSkpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDdXJyZW50VmFsdWUoZXYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHB1YmxpYyBtb3VzZVVwID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1vdXNlTW92ZShldjogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHN1cGVyLm1vdXNlTW92ZShldik7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZykge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUN1cnJlbnRWYWx1ZShldik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlQ3VycmVudFZhbHVlKGV2OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IGV2LmNsaWVudFggLSB0aGlzLmRpbWVuc2lvbnMueCAtIHRoaXMucmFkaXVzO1xyXG4gICAgICAgIHZhbCA9IHZhbCAvICh0aGlzLmRpbWVuc2lvbnMud2lkdGggLSB0aGlzLnJhZGl1cyAqIDIpICogKHRoaXMubWF4VmFsdWUgLSB0aGlzLm1pblZhbHVlKSArIHRoaXMubWluVmFsdWU7XHJcbiAgICAgICAgaWYgKHZhbCA+IHRoaXMubWF4VmFsdWUpIHtcclxuICAgICAgICAgICAgdmFsID0gdGhpcy5tYXhWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbCA8IHRoaXMubWluVmFsdWUpIHtcclxuICAgICAgICAgICAgdmFsID0gdGhpcy5taW5WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSB2YWw7XHJcbiAgICAgICAgdGhpcy52YWx1ZUNoYW5nZWQuZGlzcGF0Y2hFdmVudCh0aGlzLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IEVFdmVudFRUIH0gZnJvbSBcIi4uLy4uL2VFdmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFJhbmdlU2xpZGVyIGV4dGVuZHMgQ29udHJvbCB7XHJcbiAgICBwdWJsaWMgcmFkaXVzOiBudW1iZXIgPSAxMDtcclxuXHJcbiAgICBwdWJsaWMgbWluVmFsdWUgPSAwO1xyXG4gICAgcHVibGljIG1heFZhbHVlID0gMTAwO1xyXG4gICAgcHVibGljIGN1cnJlbnRWYWx1ZUxvdyA9IDI1O1xyXG4gICAgcHVibGljIGN1cnJlbnRWYWx1ZUhpZ2ggPSA3NTtcclxuICAgIHB1YmxpYyBtaW5EaWZmID0gMC4xO1xyXG5cclxuICAgIHByaXZhdGUgaXNEcmFnZ2luZ0xvdzogYm9vbGVhbjtcclxuICAgIHByaXZhdGUgaXNEcmFnZ2luZ0hpZ2g6IGJvb2xlYW47XHJcblxyXG4gICAgcHVibGljIHZhbHVlc0NoYW5nZWQgPSBuZXcgRUV2ZW50VFQ8bnVtYmVyLCBudW1iZXI+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIHJlbmRlciA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQgPT4ge1xyXG4gICAgICAgIHZhciB4ID0gdGhpcy5kaW1lbnNpb25zLng7XHJcbiAgICAgICAgdmFyIHkgPSB0aGlzLmRpbWVuc2lvbnMueTtcclxuXHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHgubW92ZVRvKHggKyB0aGlzLnJhZGl1cywgeSArIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLyAyKTtcclxuICAgICAgICBjdHgubGluZVRvKHggKyB0aGlzLmRpbWVuc2lvbnMud2lkdGggLSB0aGlzLnJhZGl1cywgeSArIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLyAyKTtcclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcblxyXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcclxuICAgICAgICB2YXIgc2xpZGVyWSA9IHkgKyB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC8gMjtcclxuXHJcbiAgICAgICAgdmFyIHJlbFZhbHVlTG93ID0gKHRoaXMuY3VycmVudFZhbHVlTG93IC0gdGhpcy5taW5WYWx1ZSkgLyAodGhpcy5tYXhWYWx1ZSAtIHRoaXMubWluVmFsdWUpO1xyXG4gICAgICAgIHZhciBsb3dYID0geCArIHRoaXMucmFkaXVzICsgKHRoaXMuZGltZW5zaW9ucy53aWR0aCAtIHRoaXMucmFkaXVzICogMikgKiByZWxWYWx1ZUxvdztcclxuXHJcbiAgICAgICAgdmFyIHJlbFZhbHVlSGlnaCA9ICh0aGlzLmN1cnJlbnRWYWx1ZUhpZ2ggLSB0aGlzLm1pblZhbHVlKSAvICh0aGlzLm1heFZhbHVlIC0gdGhpcy5taW5WYWx1ZSk7XHJcbiAgICAgICAgdmFyIGhpZ2hYID0geCArIHRoaXMucmFkaXVzICsgKHRoaXMuZGltZW5zaW9ucy53aWR0aCAtIHRoaXMucmFkaXVzICogMikgKiByZWxWYWx1ZUhpZ2g7XHJcblxyXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwiYmx1ZVwiO1xyXG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuICAgICAgICBjdHgubW92ZVRvKGxvd1gsIHNsaWRlclkpO1xyXG4gICAgICAgIGN0eC5saW5lVG8oaGlnaFgsIHNsaWRlclkpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmMobG93WCwgc2xpZGVyWSwgdGhpcy5yYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcclxuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuXHJcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIGN0eC5hcmMoaGlnaFgsIHNsaWRlclksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMik7XHJcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xyXG4gICAgICAgIGN0eC5maWxsKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZUxheW91dCA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkID0+IHtcclxuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xyXG5cclxuICAgICAgICB0aGlzLmRpbWVuc2lvbnMgPSBuZXcgUmVjdGFuZ2xlKGJvdW5kcy54LCBib3VuZHMueSwgMjAwLCB0aGlzLnJhZGl1cyAqIDIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3VzZURvd24gPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5kaW1lbnNpb25zLmlzSGl0QnkoZXYuY2xpZW50WCwgZXYuY2xpZW50WSkpIHtcclxuICAgICAgICAgICAgdmFyIHZhbCA9IHRoaXMuZ2V0Q2xpY2tlZFZhbHVlKGV2KTtcclxuICAgICAgICAgICAgdmFyIGRpZmZUb0xvdyA9IE1hdGguYWJzKHRoaXMuY3VycmVudFZhbHVlTG93IC0gdmFsKTtcclxuICAgICAgICAgICAgdmFyIGRpZmZUb0hpZ2ggPSBNYXRoLmFicyh0aGlzLmN1cnJlbnRWYWx1ZUhpZ2ggLSB2YWwpO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRpZmZUb0xvdyA9PSBkaWZmVG9IaWdoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgdGhpcy5jdXJyZW50VmFsdWVMb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmdMb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmdIaWdoID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkaWZmVG9Mb3cgPiBkaWZmVG9IaWdoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmdIaWdoID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2luZ0xvdyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VycmVudFZhbHVlcyhldik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcHVibGljIG1vdXNlVXAgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICB0aGlzLmlzRHJhZ2dpbmdIaWdoID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nTG93ID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1vdXNlTW92ZShldjogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHN1cGVyLm1vdXNlTW92ZShldik7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2luZ0hpZ2ggfHwgdGhpcy5pc0RyYWdnaW5nTG93KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VycmVudFZhbHVlcyhldik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlQ3VycmVudFZhbHVlcyhldjogTW91c2VFdmVudCkge1xyXG4gICAgICAgIHZhciB2YWwgPSB0aGlzLmdldENsaWNrZWRWYWx1ZShldik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmdMb3cpIHtcclxuICAgICAgICAgICAgaWYgKHZhbCA+ICh0aGlzLmN1cnJlbnRWYWx1ZUhpZ2ggLSB0aGlzLm1pbkRpZmYpKSB7XHJcbiAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmN1cnJlbnRWYWx1ZUhpZ2ggLSB0aGlzLm1pbkRpZmY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh2YWwgPCB0aGlzLmN1cnJlbnRWYWx1ZUxvdyArIHRoaXMubWluRGlmZikge1xyXG4gICAgICAgICAgICAgICAgdmFsID0gdGhpcy5jdXJyZW50VmFsdWVMb3cgKyB0aGlzLm1pbkRpZmY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmdMb3cpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50VmFsdWVMb3cgPSB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWYWx1ZUhpZ2ggPSB2YWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudmFsdWVzQ2hhbmdlZC5kaXNwYXRjaEV2ZW50KHRoaXMuY3VycmVudFZhbHVlTG93LCB0aGlzLmN1cnJlbnRWYWx1ZUhpZ2gpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q2xpY2tlZFZhbHVlKGV2OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdmFyIHZhbCA9IGV2LmNsaWVudFggLSB0aGlzLmRpbWVuc2lvbnMueCAtIHRoaXMucmFkaXVzO1xyXG4gICAgICAgIHZhbCA9IHZhbCAvICh0aGlzLmRpbWVuc2lvbnMud2lkdGggLSB0aGlzLnJhZGl1cyAqIDIpICogKHRoaXMubWF4VmFsdWUgLSB0aGlzLm1pblZhbHVlKSArIHRoaXMubWluVmFsdWU7XHJcbiAgICAgICAgaWYgKHZhbCA+IHRoaXMubWF4VmFsdWUpIHtcclxuICAgICAgICAgICAgdmFsID0gdGhpcy5tYXhWYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHZhbCA8IHRoaXMubWluVmFsdWUpIHtcclxuICAgICAgICAgICAgdmFsID0gdGhpcy5taW5WYWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH1cclxufSIsImltcG9ydCB7IExheW91dFZpZXcgfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9sYXlvdXRWaWV3XCI7XHJcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xyXG5pbXBvcnQgeyBTdGFyTGF5ZXIgfSBmcm9tIFwiLi4vLi4vbW9kZWxzL3N0YXJMYXllclwiO1xyXG5pbXBvcnQgeyBMaXN0VmlldyB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xpc3RWaWV3XCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2J1dHRvblwiO1xyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4uLy4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvY29udHJvbFwiO1xyXG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vLi4vYXBwXCI7XHJcbmltcG9ydCB7IEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2VuYy9zcmMvdWkvYWxpZ25lbWVudC9ob3Jpem9udGFsQWxpZ25lbWVudE9wdGlvblwiO1xyXG5pbXBvcnQgeyBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24gfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9hbGlnbmVtZW50L3ZlcnRpY2FsQWxpZ25lbWVudE9wdGlvblwiO1xyXG5pbXBvcnQgeyBTbGlkZXIgfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9jb250cm9scy9zbGlkZXJcIjtcclxuaW1wb3J0IHsgUmFuZ2VTbGlkZXIgfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9jb250cm9scy9yYW5nZVNsaWRlclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXJMYXllclZpZXcgZXh0ZW5kcyBMYXlvdXRWaWV3IHtcclxuICAgIHByaXZhdGUgc2V0dGluZ3NMaXN0OiBMaXN0VmlldztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RhckxheWVyOiBTdGFyTGF5ZXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0ID0gbmV3IExpc3RWaWV3KCk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWxpZ25lbWVudC5ob3Jpem9udGFsQWxpZ24gPSBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi5MZWZ0O1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0LmFsaWduZW1lbnQudmVydGljYWxBbGlnbiA9IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbi5Ub3A7XHJcbiAgICAgICAgdmFyIGJ0bkZvckxheWVyID0gbmV3IEJ1dHRvbigpO1xyXG4gICAgICAgIGJ0bkZvckxheWVyLnRleHQgPSBcIlJlbW92ZSBMYXllclwiO1xyXG4gICAgICAgIGJ0bkZvckxheWVyLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0LmFkZEl0ZW0oYnRuRm9yTGF5ZXIpO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChidG5Gb3JMYXllcik7XHJcbiAgICAgICAgYnRuRm9yTGF5ZXIuY2xpY2tlZC5hZGRFdmVudExpc3RlbmVyKChzZW5kZXI6IENvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgQXBwLnNldHRpbmdNYW5hZ2VyLnJlbW92ZVN0YXJMYXllcih0aGlzLnN0YXJMYXllcik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZhciBzbGlkZXIgPSBuZXcgU2xpZGVyKCk7XHJcbiAgICAgICAgc2xpZGVyLm1pblZhbHVlID0gMTA7XHJcbiAgICAgICAgc2xpZGVyLm1heFZhbHVlID0gMTAwMDtcclxuICAgICAgICBzbGlkZXIuY3VycmVudFZhbHVlID0gc3RhckxheWVyLnN0YXJzLmxlbmd0aDtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goc2xpZGVyKTtcclxuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5hZGRJdGVtKHNsaWRlcik7XHJcbiAgICAgICAgc2xpZGVyLnZhbHVlQ2hhbmdlZC5hZGRFdmVudExpc3RlbmVyKHRoaXMubnVtYmVyT2ZTdGFyc0NoYW5nZWQpO1xyXG5cclxuICAgICAgICB2YXIgc2xpZGVyU3BlZWQgPSBuZXcgU2xpZGVyKCk7XHJcbiAgICAgICAgc2xpZGVyU3BlZWQubWluVmFsdWUgPSAwO1xyXG4gICAgICAgIHNsaWRlclNwZWVkLm1heFZhbHVlID0gMjA7XHJcbiAgICAgICAgc2xpZGVyU3BlZWQuY3VycmVudFZhbHVlID0gc3RhckxheWVyLnNwZWVkO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChzbGlkZXJTcGVlZCk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWRkSXRlbShzbGlkZXJTcGVlZCk7XHJcbiAgICAgICAgc2xpZGVyU3BlZWQudmFsdWVDaGFuZ2VkLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5zcGVlZENoYW5nZWQpO1xyXG5cclxuICAgICAgICB2YXIgc2xpZGVyU2l6ZSA9IG5ldyBSYW5nZVNsaWRlcigpO1xyXG4gICAgICAgIHZhciBzaXplcyA9IHRoaXMuc3RhckxheWVyLnN0YXJzLm1hcCh4ID0+IHgucik7XHJcbiAgICAgICAgc2xpZGVyU2l6ZS5taW5WYWx1ZSA9IDAuMDAxO1xyXG4gICAgICAgIHNsaWRlclNpemUubWF4VmFsdWUgPSAyO1xyXG4gICAgICAgIHNsaWRlclNpemUuY3VycmVudFZhbHVlTG93ID0gTWF0aC5taW4oLi4uc2l6ZXMpO1xyXG4gICAgICAgIHNsaWRlclNpemUuY3VycmVudFZhbHVlSGlnaCA9IE1hdGgubWF4KC4uLnNpemVzKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goc2xpZGVyU2l6ZSk7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWRkSXRlbShzbGlkZXJTaXplKTtcclxuICAgICAgICBzbGlkZXJTaXplLnZhbHVlc0NoYW5nZWQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnNpemVzQ2hhbmdlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG51bWJlck9mU3RhcnNDaGFuZ2VkID0gKG51bWJlck9mU3RhcnM6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci5jaGFuZ2VOdW1iZXJPZlN0YXJzKHRoaXMuc3RhckxheWVyLCBNYXRoLnJvdW5kKG51bWJlck9mU3RhcnMpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3BlZWRDaGFuZ2VkID0gKHNwZWVkOiBudW1iZXIpID0+IHtcclxuICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIuY2hhbmdlU3BlZWQodGhpcy5zdGFyTGF5ZXIsIHNwZWVkKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2l6ZXNDaGFuZ2VkID0gKGxvd0JvcmRlcjogbnVtYmVyLCBoaWdoQm9yZGVyOiBudW1iZXIpID0+IHtcclxuICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIuY2hhbmdlU2l6ZXModGhpcy5zdGFyTGF5ZXIsIGxvd0JvcmRlciwgaGlnaEJvcmRlcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC51cGRhdGVMYXlvdXQoY3R4LCBuZXcgUmVjdGFuZ2xlKGJvdW5kcy54LCBib3VuZHMueSwgMCwgMCkpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xheW91dFZpZXdcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbCB9IGZyb20gXCIuL3NldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFwiO1xyXG5pbXBvcnQgeyBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZSB9IGZyb20gXCIuL3NldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlXCI7XHJcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2J1dHRvblwiO1xyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4uLy4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvY29udHJvbFwiO1xyXG5pbXBvcnQgeyBMaXN0VmlldyB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xpc3RWaWV3XCI7XHJcbmltcG9ydCB7IFN0YXJMYXllciB9IGZyb20gXCIuLi8uLi9tb2RlbHMvc3RhckxheWVyXCI7XHJcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi8uLi9hcHBcIjtcclxuaW1wb3J0IHsgU2V0dGluZ09wZXJhdGlvbiB9IGZyb20gXCIuLi8uLi9zZXR0aW5ncy9zZXR0aW5nT3BlcmF0aW9uXCI7XHJcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbiB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2FsaWduZW1lbnQvdmVydGljYWxBbGlnbmVtZW50T3B0aW9uXCI7XHJcbmltcG9ydCB7IEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2VuYy9zcmMvdWkvYWxpZ25lbWVudC9ob3Jpem9udGFsQWxpZ25lbWVudE9wdGlvblwiO1xyXG5pbXBvcnQgeyBTdGFyTGF5ZXJWaWV3IH0gZnJvbSBcIi4vc3RhckxheWVyVmlld1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdzT3ZlcmxheVZpZXcgZXh0ZW5kcyBMYXlvdXRWaWV3IHtcclxuICAgIHByaXZhdGUgdmlld01vZGVsOiBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWwgPSBuZXcgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsKCk7XHJcbiAgICBwcml2YXRlIGxhc3RNb3ZlZCA9IERhdGUubm93KCk7XHJcbiAgICBwcml2YXRlIGluYWN0aXZpdHlUaW1lb3V0ID0gMjAwMDtcclxuICAgIHByaXZhdGUgc2hvd092ZXJMYXllckJ1dHRvbjogQnV0dG9uO1xyXG4gICAgcHJpdmF0ZSBzZXR0aW5nc0xpc3Q6IExpc3RWaWV3O1xyXG5cclxuICAgIHByaXZhdGUgbGF5ZXJCdXR0b25zOiBCdXR0b25bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBhZGRMYXllckJ0bjogQnV0dG9uO1xyXG4gICAgcHJpdmF0ZSBkZXRhaWxlZFN0YXJMYXllclZpZXc6IFN0YXJMYXllclZpZXc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24gPSBuZXcgQnV0dG9uKCk7XHJcbiAgICAgICAgdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uLnRleHQgPSBcIlNob3cvSGlkZSBTZXR0aW5nc1wiO1xyXG4gICAgICAgIHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbi5wcm9wZXJ0aWVzLmZpbGxTdHlsZSA9IFwiZ3JlZW5cIjtcclxuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24uYWxpZ25lbWVudC52ZXJ0aWNhbEFsaWduID0gVmVydGljYWxBbGlnbmVtZW50T3B0aW9uLlRvcDtcclxuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24uYWxpZ25lbWVudC5ob3Jpem9udGFsQWxpZ24gPSBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi5MZWZ0O1xyXG4gICAgICAgIHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbi5jbGlja2VkLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5zaG93SGlkZU92ZXJsYXlDbGlja2VkKTtcclxuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24ucHJvcGVydGllcy5iYWNrZ3JvdW5kRmlsbFN0eWxlID0gXCJyZ2JhKDAsIDAsIDAsIDAuNSlcIjtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godGhpcy5zaG93T3ZlckxheWVyQnV0dG9uKTtcclxuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdCA9IG5ldyBMaXN0VmlldygpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0LmFsaWduZW1lbnQuaG9yaXpvbnRhbEFsaWduID0gSG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb24uTGVmdDtcclxuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5hbGlnbmVtZW50LnZlcnRpY2FsQWxpZ24gPSBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24uVG9wO1xyXG5cclxuICAgICAgICB2YXIgYnRuRm9yTmV3TGF5ZXIgPSBuZXcgQnV0dG9uKCk7XHJcbiAgICAgICAgYnRuRm9yTmV3TGF5ZXIudGV4dCA9IFwiQWRkIExheWVyXCI7XHJcbiAgICAgICAgYnRuRm9yTmV3TGF5ZXIucHJvcGVydGllcy5maWxsU3R5bGUgPSBcIndoaXRlXCI7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWRkSXRlbShidG5Gb3JOZXdMYXllcik7XHJcbiAgICAgICAgYnRuRm9yTmV3TGF5ZXIuY2xpY2tlZC5hZGRFdmVudExpc3RlbmVyKChzZW5kZXI6IENvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgQXBwLnNldHRpbmdNYW5hZ2VyLmFkZFN0YXJMYXllcigpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWRkTGF5ZXJCdG4gPSBidG5Gb3JOZXdMYXllcjtcclxuXHJcblxyXG4gICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci51cGRhdGUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnNldHRpbmdzVXBkYXRlZCk7XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldHRpbmdzVXBkYXRlZCA9IChvcGVyYXRpb246IFNldHRpbmdPcGVyYXRpb24pID0+IHtcclxuICAgICAgICBzd2l0Y2ggKG9wZXJhdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIFNldHRpbmdPcGVyYXRpb24uQWRkU3RhckxheWVyOlxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdGFyTGF5ZXIgb2YgQXBwLnNldHRpbmdzLnN0YXJMYXllcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMubGF5ZXJCdXR0b25zLm1hcCh4ID0+IHgudGFnKS5jb250YWlucyhzdGFyTGF5ZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0LnJlbW92ZUl0ZW0odGhpcy5hZGRMYXllckJ0bik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidG5Gb3JMYXllciA9IG5ldyBCdXR0b24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnRuRm9yTGF5ZXIudGV4dCA9IFwiRWRpdCBMYXllclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG5Gb3JMYXllci50YWcgPSBzdGFyTGF5ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkZvckxheWVyLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5hZGRJdGVtKGJ0bkZvckxheWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5sYXllckJ1dHRvbnMucHVzaChidG5Gb3JMYXllcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkZvckxheWVyLmNsaWNrZWQuYWRkRXZlbnRMaXN0ZW5lcigoc2VuZGVyOiBDb250cm9sKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVNob3dIaWRlU3RhckxheWVyVmlldyhzdGFyTGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWRkSXRlbSh0aGlzLmFkZExheWVyQnRuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU2V0dGluZ09wZXJhdGlvbi5SZW1vdmVTdGFyTGF5ZXI6XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNldHRpbmdzTGF5ZXIgb2YgdGhpcy5sYXllckJ1dHRvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIUFwcC5zZXR0aW5ncy5zdGFyTGF5ZXJzLmNvbnRhaW5zKHNldHRpbmdzTGF5ZXIudGFnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5yZW1vdmVJdGVtKHNldHRpbmdzTGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxheWVyQnV0dG9ucy5yZW1vdmVJdGVtKHNldHRpbmdzTGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnJlbW92ZUl0ZW0odGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIHRvZ2dsZVNob3dIaWRlU3RhckxheWVyVmlldyA9IChzdGFyTGF5ZXI6IFN0YXJMYXllcikgPT4ge1xyXG4gICAgICAgIGlmICghdGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcpIHtcclxuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgU3RhckxheWVyVmlldyhzdGFyTGF5ZXIpO1xyXG4gICAgICAgICAgICB0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldyA9IHZpZXc7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldyk7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldy5zdGFyTGF5ZXIgIT0gc3RhckxheWVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlSXRlbSh0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldyk7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBTdGFyTGF5ZXJWaWV3KHN0YXJMYXllcik7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3ID0gdmlldztcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3KTtcclxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyVXBkYXRlTGF5b3V0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnJlbW92ZUl0ZW0odGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcpO1xyXG4gICAgICAgICAgICB0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzaG93SGlkZU92ZXJsYXlDbGlja2VkID0gKHNlbmRlcjogQ29udHJvbCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9PSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuYmVmb3JlVmlzaWJsZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS52aXNpYmxlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xyXG4gICAgICAgIHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbi51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xyXG4gICAgICAgIHZhciBzcGFjZSA9IHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbi5kaW1lbnNpb25zLmhlaWdodCAqIDI7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QudXBkYXRlTGF5b3V0KGN0eCwgbmV3IFJlY3RhbmdsZShib3VuZHMueCwgYm91bmRzLnkgKyBzcGFjZSwgYm91bmRzLndpZHRoLCBib3VuZHMuaGVpZ2h0IC0gc3BhY2UpKTtcclxuICAgICAgICBpZiAodGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcpIHtcclxuICAgICAgICAgICAgdGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcudXBkYXRlTGF5b3V0KGN0eCwgbmV3IFJlY3RhbmdsZShib3VuZHMueCArIHRoaXMuc2V0dGluZ3NMaXN0LmRpbWVuc2lvbnMud2lkdGgsIGJvdW5kcy55ICsgc3BhY2UsIGJvdW5kcy53aWR0aCwgYm91bmRzLmhlaWdodCAtIHNwYWNlKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3VzZU1vdmUgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy52aWV3TW9kZWwuc3RhdGUgPT0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuIHx8IHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5iZWZvcmVWaXNpYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIubW91c2VNb3ZlKGV2KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbW91c2VJbmFjdGl2aXR5SGFuZGxlciA9ICgpID0+IHtcclxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMubGFzdE1vdmVkID49IHRoaXMuaW5hY3Rpdml0eVRpbWVvdXQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5tb3VzZUluYWN0aXZpdHlIYW5kbGVyLCB0aGlzLmluYWN0aXZpdHlUaW1lb3V0IC0gKERhdGUubm93KCkgLSB0aGlzLmxhc3RNb3ZlZCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFN0YXRlID0gKHN0YXRlOiBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZSkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5oaWRkZW46XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnJlbW92ZUl0ZW0odGhpcy5zaG93T3ZlckxheWVyQnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld01vZGVsLnN0YXRlID0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuYmVmb3JlVmlzaWJsZTpcclxuICAgICAgICAgICAgICAgIHRoaXMubGFzdE1vdmVkID0gRGF0ZS5ub3coKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9PSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5oaWRkZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMubW91c2VJbmFjdGl2aXR5SGFuZGxlciwgdGhpcy5pbmFjdGl2aXR5VGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGRJdGVtSWZOb3RFeGlzdHModGhpcy5zaG93T3ZlckxheWVyQnV0dG9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9PSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS52aXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLm1vdXNlSW5hY3Rpdml0eUhhbmRsZXIsIHRoaXMuaW5hY3Rpdml0eVRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlSXRlbUlmRXhpc3RzKHRoaXMuc2V0dGluZ3NMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnJlbW92ZUl0ZW1JZkV4aXN0cyh0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS52aXNpYmxlOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godGhpcy5zZXR0aW5nc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwuc3RhdGUgPSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS52aXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcFwiO1xyXG5pbXBvcnQgeyBTdGFyTGF5ZXIgfSBmcm9tIFwiLi4vbW9kZWxzL3N0YXJMYXllclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXJMYXllckFuaW1hdG9yIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzdGFyTGF5ZXI6IFN0YXJMYXllcikge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUgPSAodGltZURpZmY6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3Qgc3RhciBvZiB0aGlzLnN0YXJMYXllci5zdGFycykge1xyXG4gICAgICAgICAgICBzdGFyLnggKz0gdGhpcy5zdGFyTGF5ZXIuc3BlZWQgKiB0aW1lRGlmZjtcclxuICAgICAgICAgICAgc3Rhci55ICs9IHRoaXMuc3RhckxheWVyLnNwZWVkICogdGltZURpZmY7XHJcbiAgICAgICAgICAgIGlmIChzdGFyLnggPiBBcHAuc2V0dGluZ3Mud2lkdGgpIHtcclxuICAgICAgICAgICAgICAgIHN0YXIueCAtPSBBcHAuc2V0dGluZ3Mud2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHN0YXIueSA+IEFwcC5zZXR0aW5ncy5oZWlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHN0YXIueSAtPSBBcHAuc2V0dGluZ3MuaGVpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIERpbmplY3Qge1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2VzOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge31cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGFkZEluc3RhbmNlID0gKG5hbWU6IHN0cmluZywgaW5zdGFuY2U6IGFueSkgPT4ge1xyXG4gICAgICAgIERpbmplY3QuaW5zdGFuY2VzW25hbWVdID0gaW5zdGFuY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSA9IDxUPihuYW1lOiBzdHJpbmcpOiBUID0+IHtcclxuICAgICAgICByZXR1cm4gPFQ+RGluamVjdC5pbnN0YW5jZXNbbmFtZV07XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBMYXlvdXRWaWV3IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlld1wiO1xyXG5cclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvYnV0dG9uXCI7XHJcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbiB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL3VpL2FsaWduZW1lbnQvdmVydGljYWxBbGlnbmVtZW50T3B0aW9uXCI7XHJcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xyXG5pbXBvcnQgeyBMaXN0VmlldyB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xpc3RWaWV3XCI7XHJcbmltcG9ydCB7IE9yaWVudGF0aW9uIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvYWxpZ25lbWVudC9vcmllbnRhdGlvblwiO1xyXG5pbXBvcnQgeyBEaW5qZWN0IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZGluamVjdFwiO1xyXG5pbXBvcnQgeyBBdWRpb01hbmFnZXIgfSBmcm9tIFwiLi4vYXVkaW9NYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUGxheWVyVmlldyBleHRlbmRzIExheW91dFZpZXcge1xyXG5cclxuICAgIHByaXZhdGUgcGxheUljb25UZXh0ID0gXCJcXHVmMDRiXCJcclxuICAgIHByaXZhdGUgcGF1c2VJY29uVGV4dCA9IFwiXFx1ZjA0Y1wiXHJcbiAgICBwcml2YXRlIHN0b3BJY29uVGV4dCA9IFwiXFx1ZjA0ZFwiXHJcbiAgICBwcml2YXRlIG5leHRJY29uVGV4dCA9IFwiXFx1ZjA1MVwiXHJcbiAgICBwcml2YXRlIHByZXZpb3VzSWNvblRleHQgPSBcIlxcdWYwNDhcIlxyXG5cclxuICAgIC8vIHByaXZhdGUgcGxheUljb25UZXh0ID0gXCJwbGF5XCJcclxuICAgIC8vIHByaXZhdGUgcGF1c2VJY29uVGV4dCA9IFwicGF1c2VcIlxyXG4gICAgLy8gcHJpdmF0ZSBzdG9wSWNvblRleHQgPSBcInN0b3BcIlxyXG4gICAgLy8gcHJpdmF0ZSBuZXh0SWNvblRleHQgPSBcIm5leHRcIlxyXG4gICAgLy8gcHJpdmF0ZSBwcmV2aW91c0ljb25UZXh0ID0gXCJwcmV2aW91c1wiXHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuXHJcbiAgICAgICAgdmFyIGF1ZGlvTWFuYWdlcjogQXVkaW9NYW5hZ2VyID0gRGluamVjdC5nZXRJbnN0YW5jZShcImF1ZGlvXCIpO1xyXG5cclxuICAgICAgICB2YXIgbGlzdFZpZXcgPSBuZXcgTGlzdFZpZXcoKTtcclxuICAgICAgICBsaXN0Vmlldy5hbGlnbmVtZW50LnZlcnRpY2FsQWxpZ24gPSBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24uQm90dG9tO1xyXG4gICAgICAgIGxpc3RWaWV3LmFsaWduZW1lbnQubWFyZ2luLmJvdHRvbSA9IDEwO1xyXG4gICAgICAgIGxpc3RWaWV3LnByb3BlcnRpZXMub3JpZW50YXRpb24gPSBPcmllbnRhdGlvbi5Ib3Jpem9udGFsO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChsaXN0Vmlldyk7XHJcblxyXG4gICAgICAgIHZhciBwbGF5UGF1c2VCdG4gPSBuZXcgQnV0dG9uKCk7XHJcbiAgICAgICAgcGxheVBhdXNlQnRuLnByb3BlcnRpZXMuZm9udFByZWZpeCA9IFwiOTAwXCJcclxuICAgICAgICBwbGF5UGF1c2VCdG4ucHJvcGVydGllcy5mb250RmFtaWx5ID0gXCInRm9udCBBd2Vzb21lIDUgRnJlZSdcIlxyXG4gICAgICAgIHBsYXlQYXVzZUJ0bi50ZXh0ID0gdGhpcy5wbGF5SWNvblRleHQ7XHJcbiAgICAgICAgcGxheVBhdXNlQnRuLmNsaWNrZWQuYWRkRXZlbnRMaXN0ZW5lcigoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChwbGF5UGF1c2VCdG4udGV4dCA9PSB0aGlzLnBsYXlJY29uVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgYXVkaW9NYW5hZ2VyLnBsYXkoKTtcclxuICAgICAgICAgICAgICAgIHBsYXlQYXVzZUJ0bi50ZXh0ID0gdGhpcy5wYXVzZUljb25UZXh0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXVkaW9NYW5hZ2VyLnBhdXNlKCk7XHJcbiAgICAgICAgICAgICAgICBwbGF5UGF1c2VCdG4udGV4dCA9IHRoaXMucGxheUljb25UZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxpc3RWaWV3LmFkZEl0ZW0ocGxheVBhdXNlQnRuKTtcclxuXHJcbiAgICAgICAgdmFyIHN0b3BCdG4gPSBuZXcgQnV0dG9uKCk7XHJcbiAgICAgICAgc3RvcEJ0bi5wcm9wZXJ0aWVzLmZvbnRQcmVmaXggPSBcIjkwMFwiXHJcbiAgICAgICAgc3RvcEJ0bi5wcm9wZXJ0aWVzLmZvbnRGYW1pbHkgPSBcIidGb250IEF3ZXNvbWUgNSBGcmVlJ1wiXHJcbiAgICAgICAgc3RvcEJ0bi50ZXh0ID0gdGhpcy5zdG9wSWNvblRleHQ7XHJcbiAgICAgICAgc3RvcEJ0bi5jbGlja2VkLmFkZEV2ZW50TGlzdGVuZXIoKCkgPT4ge1xyXG4gICAgICAgICAgICBhdWRpb01hbmFnZXIuc3RvcCgpO1xyXG4gICAgICAgICAgICBpZiAocGxheVBhdXNlQnRuLnRleHQgPT0gdGhpcy5wYXVzZUljb25UZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBwbGF5UGF1c2VCdG4udGV4dCA9IHRoaXMucGxheUljb25UZXh0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGxpc3RWaWV3LmFkZEl0ZW0oc3RvcEJ0bik7XHJcblxyXG4gICAgICAgIHZhciBwcmV2aW91c0J0biA9IG5ldyBCdXR0b24oKTtcclxuICAgICAgICBwcmV2aW91c0J0bi5wcm9wZXJ0aWVzLmZvbnRQcmVmaXggPSBcIjkwMFwiXHJcbiAgICAgICAgcHJldmlvdXNCdG4ucHJvcGVydGllcy5mb250RmFtaWx5ID0gXCInRm9udCBBd2Vzb21lIDUgRnJlZSdcIlxyXG4gICAgICAgIHByZXZpb3VzQnRuLnRleHQgPSB0aGlzLnByZXZpb3VzSWNvblRleHQ7XHJcbiAgICAgICAgcHJldmlvdXNCdG4uY2xpY2tlZC5hZGRFdmVudExpc3RlbmVyKCgpID0+IHtcclxuICAgICAgICAgICAgYXVkaW9NYW5hZ2VyLnByZXZpb3VzKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgbGlzdFZpZXcuYWRkSXRlbShwcmV2aW91c0J0bik7XHJcblxyXG4gICAgICAgIHZhciBuZXh0QnRuID0gbmV3IEJ1dHRvbigpO1xyXG4gICAgICAgIG5leHRCdG4ucHJvcGVydGllcy5mb250UHJlZml4ID0gXCI5MDBcIlxyXG4gICAgICAgIG5leHRCdG4ucHJvcGVydGllcy5mb250RmFtaWx5ID0gXCInRm9udCBBd2Vzb21lIDUgRnJlZSdcIlxyXG4gICAgICAgIG5leHRCdG4udGV4dCA9IHRoaXMubmV4dEljb25UZXh0O1xyXG4gICAgICAgIG5leHRCdG4uY2xpY2tlZC5hZGRFdmVudExpc3RlbmVyKCgpID0+IHtcclxuICAgICAgICAgICAgYXVkaW9NYW5hZ2VyLm5leHQoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBsaXN0Vmlldy5hZGRJdGVtKG5leHRCdG4pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKSB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY2hpbGQudXBkYXRlTGF5b3V0KGN0eCwgdGhpcy5ib3VuZHMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IEltYWdlU2NhbGluZ01vZGUgfSBmcm9tIFwiLi9pbWFnZVNjYWxpbmdNb2RlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgSW1hZ2VQcm9wZXJ0aWVzIHtcclxuICAgIHB1YmxpYyBpbWFnZVNjYWxpbmdNb2RlID0gSW1hZ2VTY2FsaW5nTW9kZS5GaXRBbmRTcGFjZTtcclxuICAgIHB1YmxpYyBzY2FsZSA9IDE7XHJcbn0iLCJpbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi9jb250cm9sXCI7XHJcbmltcG9ydCB7IEltYWdlUHJvcGVydGllcyB9IGZyb20gXCIuL2ltYWdlUHJvcGVydGllc1wiO1xyXG5pbXBvcnQgeyBJbWFnZVNjYWxpbmdNb2RlIH0gZnJvbSBcIi4vaW1hZ2VTY2FsaW5nTW9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVJbWFnZSBleHRlbmRzIENvbnRyb2wge1xyXG4gICAgcHJpdmF0ZSBpbWFnZTogSFRNTEltYWdlRWxlbWVudDtcclxuICAgIHB1YmxpYyBwcm9wZXJ0aWVzID0gbmV3IEltYWdlUHJvcGVydGllcygpO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmltYWdlID0gaW1hZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tVXJsID0gKGltYWdlVXJsOiBzdHJpbmcpOiBQcm9taXNlPEVJbWFnZT4gPT4ge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xyXG4gICAgICAgICAgICBpbWFnZS5zcmMgPSBpbWFnZVVybDtcclxuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZShuZXcgRUltYWdlKGltYWdlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN1cGVyUmVuZGVyID0gdGhpcy5yZW5kZXI7XHJcbiAgICBwdWJsaWMgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSA9PiB7XHJcbiAgICAgICAgdGhpcy5zdXBlclJlbmRlcihjdHgpO1xyXG5cclxuICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1hZ2UsIHRoaXMuZGltZW5zaW9ucy54LCB0aGlzLmRpbWVuc2lvbnMueSwgdGhpcy5kaW1lbnNpb25zLndpZHRoLCB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0KTtcclxuICAgICAgICBpZiAodGhpcy5pc01vdXNlT3ZlciAmJiB0aGlzLmlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJyZ2JhKDI1NSwyNTUsMjU1LDAuNSlcIjtcclxuICAgICAgICAgICAgY3R4LmZpbGxSZWN0KHRoaXMuZGltZW5zaW9ucy54LCB0aGlzLmRpbWVuc2lvbnMueSwgdGhpcy5kaW1lbnNpb25zLndpZHRoLCB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xyXG5cclxuICAgICAgICB2YXIgZml0U2NhbGUgPSAxO1xyXG5cclxuICAgICAgICB2YXIgaW1hZ2VTaXppbmcgPSB0aGlzLmltYWdlLm5hdHVyYWxXaWR0aCAvIHRoaXMuaW1hZ2UubmF0dXJhbEhlaWdodDtcclxuICAgICAgICB2YXIgc3RhZ2VTaXppbmcgPSBib3VuZHMud2lkdGggLyBib3VuZHMuaGVpZ2h0O1xyXG5cclxuICAgICAgICB2YXIgaXNJbWFnZVdpZGVyID0gaW1hZ2VTaXppbmcgPiBzdGFnZVNpemluZztcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnByb3BlcnRpZXMuaW1hZ2VTY2FsaW5nTW9kZSkge1xyXG4gICAgICAgICAgICBjYXNlIEltYWdlU2NhbGluZ01vZGUuRml0QW5kT3ZlcmZpbGw6XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNJbWFnZVdpZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZml0U2NhbGUgPSBib3VuZHMuaGVpZ2h0IC8gdGhpcy5pbWFnZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZpdFNjYWxlID0gYm91bmRzLndpZHRoIC8gdGhpcy5pbWFnZS53aWR0aDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEltYWdlU2NhbGluZ01vZGUuRml0QW5kU3BhY2U6XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNJbWFnZVdpZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZml0U2NhbGUgPSBib3VuZHMud2lkdGggLyB0aGlzLmltYWdlLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmaXRTY2FsZSA9IGJvdW5kcy5oZWlnaHQgLyB0aGlzLmltYWdlLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5pbWFnZS5uYXR1cmFsV2lkdGggKiBmaXRTY2FsZTtcclxuICAgICAgICB2YXIgaGVpZ2h0ID0gdGhpcy5pbWFnZS5uYXR1cmFsSGVpZ2h0ICogZml0U2NhbGU7XHJcblxyXG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy54ID0gdGhpcy5hbGlnbmVtZW50LmNhbGN1bGF0ZURpbWVuc2lvbnNYKGJvdW5kcywgd2lkdGgpO1xyXG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy55ID0gdGhpcy5hbGlnbmVtZW50LmNhbGN1bGF0ZURpbWVuc2lvbnNZKGJvdW5kcywgd2lkdGgpO1xyXG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy53aWR0aCA9IHdpZHRoO1xyXG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBMYXlvdXRWaWV3IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlld1wiO1xyXG5pbXBvcnQgeyBEaW5qZWN0IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZGluamVjdFwiO1xyXG5pbXBvcnQgeyBBc3NldE1hbmFnZXIgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy9hc3NldE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgRUltYWdlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvaW1hZ2VcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IEltYWdlU2NhbGluZ01vZGUgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9jb250cm9scy9pbWFnZVNjYWxpbmdNb2RlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZEltYWdlVmlldyBleHRlbmRzIExheW91dFZpZXcge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB2YXIgYXNzZXRNYW5hZ2VyID0gRGluamVjdC5nZXRJbnN0YW5jZShcImFzc2V0c1wiKSBhcyBBc3NldE1hbmFnZXI7XHJcbiAgICAgICAgdmFyIGJhY2tncm91bmQgPSBhc3NldE1hbmFnZXIuZ2V0SW1hZ2UoXCJiYWNrZ3JvdW5kXCIpO1xyXG5cclxuICAgICAgICB2YXIgaW1hZ2UgPSBuZXcgRUltYWdlKGJhY2tncm91bmQpXHJcbiAgICAgICAgaW1hZ2UuZGlzYWJsZU1vdXNlRXZlbnRzKCk7XHJcbiAgICAgICAgaW1hZ2UucHJvcGVydGllcy5pbWFnZVNjYWxpbmdNb2RlID0gSW1hZ2VTY2FsaW5nTW9kZS5GaXRBbmRPdmVyZmlsbDtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goaW1hZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY2hpbGQudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBMYXlvdXRWaWV3IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlld1wiO1xyXG5pbXBvcnQgeyBEaW5qZWN0IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZGluamVjdFwiO1xyXG5pbXBvcnQgeyBBc3NldE1hbmFnZXIgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy9hc3NldE1hbmFnZXJcIjtcclxuaW1wb3J0IHsgRUltYWdlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvaW1hZ2VcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IEltYWdlU2NhbGluZ01vZGUgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9jb250cm9scy9pbWFnZVNjYWxpbmdNb2RlXCI7XHJcbmltcG9ydCB7IEVBbmltYXRpb24gfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy9lQW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IEF1ZGlvTWFuYWdlciB9IGZyb20gXCIuLi9hdWRpb01hbmFnZXJcIjtcclxuaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGVBbmFseXNlciB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2F1ZGlvL2F1ZGlvR3JhcGhOb2RlQW5hbHlzZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBGcm9udFZpZXcgZXh0ZW5kcyBMYXlvdXRWaWV3IHtcclxuICAgIGFuYWx5c2VyOiBBdWRpb0dyYXBoTm9kZUFuYWx5c2VyO1xyXG5cclxuICAgIHByaXZhdGUgZnJlcXVlbmN5SW5kZXggPSA3O1xyXG4gICAgcHJpdmF0ZSBsb3dlckJvcmRlciA9IDAuNDtcclxuICAgIHByaXZhdGUgdXBwZXJCb3JkZXIgPSAwLjk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB2YXIgYXNzZXRNYW5hZ2VyID0gRGluamVjdC5nZXRJbnN0YW5jZShcImFzc2V0c1wiKSBhcyBBc3NldE1hbmFnZXI7XHJcblxyXG4gICAgICAgIHZhciBhdWRpb01hbmFnZXIgPSBEaW5qZWN0LmdldEluc3RhbmNlKFwiYXVkaW9cIikgYXMgQXVkaW9NYW5hZ2VyO1xyXG4gICAgICAgIHRoaXMuYW5hbHlzZXIgPSBhdWRpb01hbmFnZXIuZ2V0QW5hbHlzZXIoKTtcclxuXHJcbiAgICAgICAgdmFyIGxvZ28gPSBhc3NldE1hbmFnZXIuZ2V0SW1hZ2UoXCJsb2dvXCIpO1xyXG4gICAgICAgIHZhciBsb2dvTm92YSA9IGFzc2V0TWFuYWdlci5nZXRJbWFnZShcImxvZ28tbm92YVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaXNhYmxlTW91c2VFdmVudHMoKTtcclxuXHJcbiAgICAgICAgdmFyIGxvZ29Ob3ZhRUltYWdlID0gbmV3IEVJbWFnZShsb2dvTm92YSk7XHJcbiAgICAgICAgbG9nb05vdmFFSW1hZ2UucHJvcGVydGllcy5pbWFnZVNjYWxpbmdNb2RlID0gSW1hZ2VTY2FsaW5nTW9kZS5GaXRBbmRPdmVyZmlsbDtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobG9nb05vdmFFSW1hZ2UpO1xyXG5cclxuICAgICAgICB2YXIgZnVuYyA9IGxvZ29Ob3ZhRUltYWdlLnJlbmRlclxyXG5cclxuICAgICAgICBsb2dvTm92YUVJbWFnZS5yZW5kZXIgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpID0+IHtcclxuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmFuYWx5c2VyLmdldFNwZWN0cnVtKCk7XHJcbiAgICAgICAgICAgIHZhciByZWxEYXRhVmFsdWUgPSB0aGlzLmNhbGN1bGF0ZVJlbERhdGFWYWx1ZShkYXRhW3RoaXMuZnJlcXVlbmN5SW5kZXhdKTtcclxuXHJcbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XHJcbiAgICAgICAgICAgIGN0eC5nbG9iYWxBbHBoYSA9IHJlbERhdGFWYWx1ZTtcclxuICAgICAgICAgICAgZnVuYyhjdHgpO1xyXG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGxvZ29Gcm9udCA9IG5ldyBFSW1hZ2UobG9nbyk7XHJcbiAgICAgICAgbG9nb0Zyb250LnByb3BlcnRpZXMuaW1hZ2VTY2FsaW5nTW9kZSA9IEltYWdlU2NhbGluZ01vZGUuRml0QW5kT3ZlcmZpbGw7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGxvZ29Gcm9udCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVSZWxEYXRhVmFsdWUoZGF0YVZhbHVlOiBudW1iZXIpIHtcclxuICAgICAgICB2YXIgcmVsRGF0YVZhbHVlID0gZGF0YVZhbHVlIC8gMjU1O1xyXG4gICAgICAgIGlmIChyZWxEYXRhVmFsdWUgPCB0aGlzLmxvd2VyQm9yZGVyKSB7XHJcbiAgICAgICAgICAgIHJlbERhdGFWYWx1ZSA9IHRoaXMubG93ZXJCb3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChyZWxEYXRhVmFsdWUgPiB0aGlzLnVwcGVyQm9yZGVyKSB7XHJcbiAgICAgICAgICAgIHJlbERhdGFWYWx1ZSA9IHRoaXMudXBwZXJCb3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBmaW5hbFJlbERhdGFWYWx1ZSA9IChyZWxEYXRhVmFsdWUgLSB0aGlzLmxvd2VyQm9yZGVyKSAvICh0aGlzLnVwcGVyQm9yZGVyIC0gdGhpcy5sb3dlckJvcmRlcik7XHJcbiAgICAgICAgcmV0dXJuIGZpbmFsUmVsRGF0YVZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgY2hpbGQudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgTGFiZWxQcm9wZXJ0aWVzIHtcclxuICAgIHB1YmxpYyBmb250U2l6ZSA9IDQwO1xyXG4gICAgcHVibGljIGZvbnRQcmVmaXggPSBcIlwiO1xyXG4gICAgcHVibGljIGZvbnRGYW1pbHkgPSBcImZvbnRhd2Vzb21lXCI7XHJcbiAgICBwdWJsaWMgZmlsbFN0eWxlID0gXCJibHVlXCI7XHJcbiAgICBwdWJsaWMgYmFja2dyb3VuZEZpbGxTdHlsZTogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG5cclxuICAgIHB1YmxpYyBnZXRGb250ID0gKCkgPT4ge1xyXG4gICAgICAgIHZhciBmb250ID0gXCJcIjtcclxuICAgICAgICBpZiAodGhpcy5mb250UHJlZml4KSB7XHJcbiAgICAgICAgICAgIGZvbnQgKz0gdGhpcy5mb250UHJlZml4ICsgXCIgXCJcclxuICAgICAgICB9XHJcbiAgICAgICAgZm9udCArPSB0aGlzLmZvbnRTaXplICsgXCJweFwiICsgXCIgXCIgKyB0aGlzLmZvbnRGYW1pbHk7XHJcbiAgICAgICAgcmV0dXJuIGZvbnQ7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IExhYmVsUHJvcGVydGllcyB9IGZyb20gXCIuL2xhYmVsUHJvcGVydGllc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIExhYmVsIGV4dGVuZHMgQ29udHJvbCB7XHJcbiAgICBwdWJsaWMgcHJvcGVydGllcyA9IG5ldyBMYWJlbFByb3BlcnRpZXMoKTtcclxuXHJcbiAgICBwdWJsaWMgdGV4dDogc3RyaW5nO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5kaXNhYmxlTW91c2VFdmVudHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSA9PiB7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMucHJvcGVydGllcy5maWxsU3R5bGU7XHJcbiAgICAgICAgY3R4LmZvbnQgPSB0aGlzLnByb3BlcnRpZXMuZ2V0Rm9udCgpO1xyXG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImxlZnRcIjtcclxuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcclxuICAgICAgICBjdHguZmlsbFRleHQodGhpcy50ZXh0LCB0aGlzLmRpbWVuc2lvbnMueCwgdGhpcy5kaW1lbnNpb25zLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCA9PiB7XHJcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcclxuXHJcbiAgICAgICAgY3R4LmZvbnQgPSB0aGlzLnByb3BlcnRpZXMuZ2V0Rm9udCgpO1xyXG4gICAgICAgIGN0eC50ZXh0QWxpZ24gPSBcImxlZnRcIjtcclxuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcclxuICAgICAgICB2YXIgc2l6ZSA9IGN0eC5tZWFzdXJlVGV4dCh0aGlzLnRleHQpO1xyXG5cclxuICAgICAgICB2YXIgeCA9IHRoaXMuYWxpZ25lbWVudC5jYWxjdWxhdGVEaW1lbnNpb25zWChib3VuZHMsIHNpemUud2lkdGgpO1xyXG4gICAgICAgIHZhciB5ID0gdGhpcy5hbGlnbmVtZW50LmNhbGN1bGF0ZURpbWVuc2lvbnNZKGJvdW5kcywgdGhpcy5wcm9wZXJ0aWVzLmZvbnRTaXplKTtcclxuXHJcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gbmV3IFJlY3RhbmdsZSh4LCB5LCBzaXplLndpZHRoLCB0aGlzLnByb3BlcnRpZXMuZm9udFNpemUpXHJcbiAgICAgICAgY29uc29sZS5sb2codGhpcy5kaW1lbnNpb25zKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IExheW91dFZpZXcgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9sYXlvdXRWaWV3XCI7XHJcbmltcG9ydCB7IExhYmVsIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvbGFiZWxcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTG9hZGluZ1ZpZXcgZXh0ZW5kcyBMYXlvdXRWaWV3IHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdmFyIGxvYWRpbmdMYWJlbCA9IG5ldyBMYWJlbCgpO1xyXG4gICAgICAgIGxvYWRpbmdMYWJlbC50ZXh0ID0gXCJMb2FkaW5nLi4uXCI7XHJcbiAgICAgICAgbG9hZGluZ0xhYmVsLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiXHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGxvYWRpbmdMYWJlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpIHtcclxuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjaGlsZC51cGRhdGVMYXlvdXQoY3R4LCB0aGlzLmJvdW5kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xheW91dFZpZXdcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IFN0YXJMYXllckRyYXdlciB9IGZyb20gXCIuL3N0YXJMYXllckRyYXdlclwiO1xyXG5pbXBvcnQgeyBTZXR0aW5nc092ZXJsYXlWaWV3IH0gZnJvbSBcIi4vb3ZlcmxheS9zZXR0aW5nc092ZXJsYXlWaWV3XCI7XHJcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi9hcHBcIjtcclxuaW1wb3J0IHsgU3RhckxheWVyQW5pbWF0b3IgfSBmcm9tIFwiLi9zdGFyTGF5ZXJBbmltYXRvclwiO1xyXG5pbXBvcnQgeyBFQW5pbWF0aW9uIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZUFuaW1hdGlvblwiO1xyXG5pbXBvcnQgeyBTZXR0aW5nT3BlcmF0aW9uIH0gZnJvbSBcIi4uL3NldHRpbmdzL3NldHRpbmdPcGVyYXRpb25cIjtcclxuaW1wb3J0IHsgRGluamVjdCB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2RpbmplY3RcIjtcclxuaW1wb3J0IHsgUGxheWVyVmlldyB9IGZyb20gXCIuL3BsYXllclZpZXdcIjtcclxuaW1wb3J0IHsgQmFja2dyb3VuZEltYWdlVmlldyB9IGZyb20gXCIuL2JhY2tncm91bmRJbWFnZVZpZXdcIjtcclxuaW1wb3J0IHsgRnJvbnRWaWV3IH0gZnJvbSBcIi4vZnJvbnRWaWV3XCI7XHJcbmltcG9ydCB7IExvYWRpbmdWaWV3IH0gZnJvbSBcIi4vbG9hZGluZ1ZpZXdcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnNwaWVydHlQbGF5ZXJWaWV3IGV4dGVuZHMgTGF5b3V0VmlldyB7XHJcbiAgICBwcml2YXRlIHN0YXJMYXllcnM6IFN0YXJMYXllckRyYXdlcltdID0gW107XHJcbiAgICBwcml2YXRlIHN0YXJBbmltYXRvcnM6IFN0YXJMYXllckFuaW1hdG9yW10gPSBbXTtcclxuXHJcbiAgICBwcml2YXRlIGFuaW1hdGlvbjogRUFuaW1hdGlvbjtcclxuXHJcbiAgICBwcml2YXRlIGxvYWRpbmdWaWV3OiBMb2FkaW5nVmlldztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmFuaW1hdGlvbiA9IERpbmplY3QuZ2V0SW5zdGFuY2UoXCJhbmltYXRpb25cIik7XHJcblxyXG4gICAgICAgIHRoaXMubG9hZGluZ1ZpZXcgPSBuZXcgTG9hZGluZ1ZpZXcoKTtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godGhpcy5sb2FkaW5nVmlldyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1ZpZXcuZGVhY3RpdmF0ZSgxKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmVJdGVtKHRoaXMubG9hZGluZ1ZpZXcpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHZhciBiYWNrZ3JvdW5kID0gbmV3IEJhY2tncm91bmRJbWFnZVZpZXcoKTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC5kZWFjdGl2YXRlZCgpO1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYmFja2dyb3VuZCk7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQuYWN0aXZhdGUoMyk7XHJcbiAgICAgICAgICAgIChkb2N1bWVudCBhcyBhbnkpLnRlc3RpdCA9IGJhY2tncm91bmQ7XHJcbiAgICBcclxuICAgICAgICAgICAgdmFyIHBsYXllclZpZXcgPSBuZXcgUGxheWVyVmlldygpO1xyXG4gICAgICAgICAgICBwbGF5ZXJWaWV3LmRlYWN0aXZhdGVkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChwbGF5ZXJWaWV3KTtcclxuICAgICAgICAgICAgcGxheWVyVmlldy5hY3RpdmF0ZSgzKTtcclxuICAgIFxyXG4gICAgICAgICAgICB2YXIgZnJvbnQgPSBuZXcgRnJvbnRWaWV3KCk7XHJcbiAgICAgICAgICAgIGZyb250LmRlYWN0aXZhdGVkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChmcm9udCk7XHJcbiAgICAgICAgICAgIGZyb250LmFjdGl2YXRlKDMpO1xyXG4gICAgXHJcbiAgICAgICAgICAgIHZhciBzZXR0aW5nc092ZXJsYXkgPSBuZXcgU2V0dGluZ3NPdmVybGF5VmlldygpO1xyXG4gICAgICAgICAgICBzZXR0aW5nc092ZXJsYXkuZGVhY3RpdmF0ZWQoKTtcclxuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHNldHRpbmdzT3ZlcmxheSk7XHJcbiAgICAgICAgICAgIHNldHRpbmdzT3ZlcmxheS5hY3RpdmF0ZSgzKTtcclxuICAgIFxyXG4gICAgICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIudXBkYXRlLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5hcHBTZXR0aW5nc1VwZGF0ZWQpO1xyXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcclxuICAgICAgICB9LCAxMjAwKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFwcFNldHRpbmdzVXBkYXRlZCA9IChvcGVyYXRpb246IFNldHRpbmdPcGVyYXRpb24pID0+IHtcclxuICAgICAgICBzd2l0Y2ggKG9wZXJhdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIFNldHRpbmdPcGVyYXRpb24uQWRkU3RhckxheWVyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTdGFyTGF5ZXIoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFNldHRpbmdPcGVyYXRpb24uUmVtb3ZlU3RhckxheWVyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVTdGFyTGF5ZXIoKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkU3RhckxheWVyID0gKCkgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3Qgc3RhckxheWVyIG9mIEFwcC5zZXR0aW5ncy5zdGFyTGF5ZXJzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJMYXllcnMuZmlyc3RPckRlZmF1bHQoeCA9PiB4LnN0YXJMYXllciA9PSBzdGFyTGF5ZXIpID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYXllciA9IG5ldyBTdGFyTGF5ZXJEcmF3ZXIoc3RhckxheWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckxheWVycy5wdXNoKGxheWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKDEsIDAsIGxheWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRvciA9IG5ldyBTdGFyTGF5ZXJBbmltYXRvcihzdGFyTGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRpb24uYWRkVXBkYXRlRnVuY3Rpb24oYW5pbWF0b3IudXBkYXRlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckFuaW1hdG9ycy5wdXNoKGFuaW1hdG9yKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVTdGFyTGF5ZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBzdGFyTGF5ZXJEcmF3cyBvZiB0aGlzLnN0YXJMYXllcnMpIHtcclxuICAgICAgICAgICAgaWYgKEFwcC5zZXR0aW5ncy5zdGFyTGF5ZXJzLmZpcnN0T3JEZWZhdWx0KHggPT4geCA9PSBzdGFyTGF5ZXJEcmF3cy5zdGFyTGF5ZXIpID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRvciA9IHRoaXMuc3RhckFuaW1hdG9ycy5maXJzdCh4ID0+IHguc3RhckxheWVyID09IHN0YXJMYXllckRyYXdzLnN0YXJMYXllcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5yZW1vdmVVcGRhdGVGdW5jdGlvbihhbmltYXRvci51cGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyQW5pbWF0b3JzLnJlbW92ZUl0ZW0oYW5pbWF0b3IpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlKHggPT4geCA9PSBzdGFyTGF5ZXJEcmF3cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJMYXllcnMucmVtb3ZlKHggPT4geCA9PSBzdGFyTGF5ZXJEcmF3cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLnVwZGF0ZUxheW91dChjdHgsIGJvdW5kcyk7XHJcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgIGNoaWxkLnVwZGF0ZUxheW91dChjdHgsIGJvdW5kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU3RhciB9IGZyb20gXCIuL3N0YXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGFyTGF5ZXIge1xyXG4gICAgcHVibGljIHN0YXJzOiBTdGFyW10gPSBbXTtcclxuICAgIHB1YmxpYyBzcGVlZCA9IE1hdGgucmFuZG9tKCkgKiAxICsgMC4xO1xyXG59IiwiZXhwb3J0IHR5cGUgVXBkYXRlRnVuY3Rpb24gPSAodGltZURpZmY6IG51bWJlcikgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBFQW5pbWF0aW9uIHtcclxuICAgIHByaXZhdGUgdXBkYXRlRnVuY3Rpb25zOiBVcGRhdGVGdW5jdGlvbltdID0gW107XHJcbiAgICBwcml2YXRlIGlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBsYXN0RnJhbWVUaW1lOiBudW1iZXI7XHJcbiAgICBwcml2YXRlIGZwczogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBmcHNJbnRlcnZhbDogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLnNldEZwcygzMCk7XHJcbiAgICAgICAgdGhpcy5wbGF5KCk7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmtleUNvZGUgPT0gODApIHsgLy8gcFxyXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5UGF1c2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwbGF5KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHtcclxuICAgICAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkxvb3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBhdXNlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUnVubmluZykge1xyXG4gICAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGxheVBhdXNlKCkge1xyXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nID8gdGhpcy5wYXVzZSgpIDogdGhpcy5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZFVwZGF0ZUZ1bmN0aW9uID0gKGZ1bmM6IFVwZGF0ZUZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVGdW5jdGlvbnMucHVzaChmdW5jKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlVXBkYXRlRnVuY3Rpb24gPSAoZnVuYzogVXBkYXRlRnVuY3Rpb24pID0+IHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUZ1bmN0aW9ucy5zcGxpY2UodGhpcy51cGRhdGVGdW5jdGlvbnMuaW5kZXhPZihmdW5jKSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEZwcyA9IChmcHM6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHRoaXMuZnBzID0gZnBzO1xyXG4gICAgICAgIHRoaXMuZnBzSW50ZXJ2YWwgPSAxMDAwIC8gdGhpcy5mcHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhbmltYXRpb25Mb29wID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUnVubmluZykge1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25Mb29wKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHZhciBlbGFwc2VkID0gbm93IC0gdGhpcy5sYXN0RnJhbWVUaW1lO1xyXG5cclxuICAgICAgICBpZiAoZWxhcHNlZCA+IHRoaXMuZnBzSW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gbm93O1xyXG4gICAgICAgICAgICB2YXIgdGltZURpZmYgPSBlbGFwc2VkIC8gMTAwMDtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdXBkYXRlRnVuY3Rpb24gb2YgdGhpcy51cGRhdGVGdW5jdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUZ1bmN0aW9uKHRpbWVEaWZmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBDYW52YXNIZWxwZXIge1xyXG4gICAgcHVibGljIGxvYWRGb250YXdlc29tZUZyZWUgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEZvbnQoXCJcXHVmMjQ0XCIsIFwiXFx1ZjI0MFwiLCBcIjkwMCAyMHB4ICdGb250IEF3ZXNvbWUgNSBGcmVlJ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbG9hZEZvbnRhd2Vzb21lQnJhbmRzID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRGb250KFwiXFx1ZjNkM1wiLCBcIlxcdWYzYjhcIiwgXCI0MDAgMjBweCAnRm9udCBBd2Vzb21lIDUgQnJhbmRzJ1wiKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvdW50UGl4ZWxzID0gKGltYWdlRGF0YTogSW1hZ2VEYXRhKSA9PiB7XHJcbiAgICAgICAgdmFyIHBpeGVsQ291bnQgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VEYXRhLmRhdGEubGVuZ3RoOyBpID0gaSArIDQpIHtcclxuICAgICAgICAgICAgdmFyIHIgPSBpbWFnZURhdGEuZGF0YVtpXTtcclxuICAgICAgICAgICAgdmFyIGcgPSBpbWFnZURhdGEuZGF0YVtpICsgMV07XHJcbiAgICAgICAgICAgIHZhciBiID0gaW1hZ2VEYXRhLmRhdGFbaSArIDJdO1xyXG4gICAgICAgICAgICB2YXIgYSA9IGltYWdlRGF0YS5kYXRhW2kgKyAzXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChyIDwgNTAgJiYgZyA8IDUwICYmIGIgPCA1MCAmJiBhID4gMC45KSB7XHJcbiAgICAgICAgICAgICAgICBwaXhlbENvdW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBpeGVsQ291bnRcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEljb25QaXhlbHMgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQsIGljb246IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICBjdHguZmlsbFRleHQoaWNvbiwgMCwgMCk7XHJcbiAgICAgICAgdmFyIGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuICAgICAgICB2YXIgaWNvbjFQaXhlbENvdW50ID0gdGhpcy5jb3VudFBpeGVscyhpbWFnZURhdGEpO1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiaWNvbiAxIHBpeGVsIGNvdW50OiBcIiArIGljb24xUGl4ZWxDb3VudCk7XHJcbiAgICAgICAgcmV0dXJuIGljb24xUGl4ZWxDb3VudDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGxvYWRGb250ID0gKGljb24xOiBzdHJpbmcsIGljb24yOiBzdHJpbmcsIGZvbnQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHZhciByZXRyeURlbGF5TXMgPSA1MDA7XHJcbiAgICAgICAgdmFyIHJldHJpZXMgPSAxMFxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRpbmcgZm9udCBcXFwiXCIgKyBmb250ICsgXCJcXFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHRlbXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcclxuICAgICAgICAgICAgdGVtcENhbnZhcy53aWR0aCA9IDIwO1xyXG4gICAgICAgICAgICB0ZW1wQ2FudmFzLmhlaWdodCA9IDIwO1xyXG4gICAgICAgICAgICB2YXIgdGVtcEN0eCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICAgICAgdGVtcEN0eC5mb250ID0gZm9udDtcclxuICAgICAgICAgICAgdGVtcEN0eC5maWxsU3R5bGUgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgICAgIHRlbXBDdHgudGV4dEFsaWduID0gXCJsZWZ0XCI7XHJcbiAgICAgICAgICAgIHRlbXBDdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcclxuXHJcbiAgICAgICAgICAgIHZhciBjaGVja0xvYWRlZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBpY29uMVBpeGVsQ291bnQgPSB0aGlzLmdldEljb25QaXhlbHModGVtcEN0eCwgdGVtcENhbnZhcywgaWNvbjEpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGljb24yUGl4ZWxDb3VudCA9IHRoaXMuZ2V0SWNvblBpeGVscyh0ZW1wQ3R4LCB0ZW1wQ2FudmFzLCBpY29uMik7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGRpZmZQaXhlbHMgPSBNYXRoLmFicyhpY29uMlBpeGVsQ291bnQgLSBpY29uMVBpeGVsQ291bnQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkaWZmUGl4ZWxzID4gNSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwibG9hZGVkIGZvbnQgXFxcIlwiICsgZm9udCArIFwiXFxcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHJpZXMtLTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmV0cmllcyA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RvcCBsb2FkaW5nIGZvbnQgYWZ0ZXIgXCIgKyByZXRyaWVzICsgXCIgcmV0cmllcyB3aXRoIFwiICsgcmV0cnlEZWxheU1zICsgXCJtcyBkZWxheVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwid2FpdGluZyBhIHdoaWxlIChcIiArIHJldHJ5RGVsYXlNcyArIFwibXMpXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrTG9hZGVkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJldHJ5RGVsYXlNcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNoZWNrTG9hZGVkKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgQXVkaW9HcmFwaE5vZGUge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZywgcHJvdGVjdGVkIGF1ZGlvQ3R4OiBBdWRpb0NvbnRleHQpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXRBdWRpb05vZGUoKTogQXVkaW9Ob2RlO1xyXG4gICAgcHVibGljIGFic3RyYWN0IHJlbG9hZCgpOiBQcm9taXNlPHZvaWQ+O1xyXG59IiwiaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGUgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF1ZGlvR3JhcGhOb2RlQW5hbHlzZXIgZXh0ZW5kcyBBdWRpb0dyYXBoTm9kZSB7XHJcbiAgICBhbmFseXNlck5vZGU6IEFuYWx5c2VyTm9kZTtcclxuICAgIGJ1ZmZlckxlbmd0aDogbnVtYmVyO1xyXG4gICAgZGF0YUFycmF5OiBVaW50OEFycmF5O1xyXG5cclxuICAgIHB1YmxpYyBnZXRBdWRpb05vZGUgPSAoKTogQXVkaW9Ob2RlID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5hbmFseXNlck5vZGU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuYW5hbHlzZXJOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFuYWx5c2VyTm9kZSA9IHRoaXMuYXVkaW9DdHguY3JlYXRlQW5hbHlzZXIoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmFuYWx5c2VyTm9kZS5mZnRTaXplID0gMzI7XHJcbiAgICAgICAgICAgIHRoaXMuYW5hbHlzZXJOb2RlLnNtb290aGluZ1RpbWVDb25zdGFudCA9IDAuOTtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSB0aGlzLmFuYWx5c2VyTm9kZS5mcmVxdWVuY3lCaW5Db3VudDtcclxuICAgICAgICAgICAgdGhpcy5kYXRhQXJyYXkgPSBuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlckxlbmd0aCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0U3BlY3RydW0oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYW5hbHlzZXJOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5hbHlzZXJOb2RlLmdldEJ5dGVGcmVxdWVuY3lEYXRhKHRoaXMuZGF0YUFycmF5KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUFycmF5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldFdhdmUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuYW5hbHlzZXJOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYW5hbHlzZXJOb2RlLmdldEJ5dGVUaW1lRG9tYWluRGF0YSh0aGlzLmRhdGFBcnJheSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGFBcnJheTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGUgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZVwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF1ZGlvR3JhcGhOb2RlRGVzdGluYXRpb24gZXh0ZW5kcyBBdWRpb0dyYXBoTm9kZSB7XHJcbiAgICBwdWJsaWMgZ2V0QXVkaW9Ob2RlID0gKCk6IEF1ZGlvTm9kZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9DdHguZGVzdGluYXRpb247XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBdWRpb0dyYXBoTm9kZSB9IGZyb20gXCIuL2F1ZGlvR3JhcGhOb2RlXCI7XHJcbmltcG9ydCB7IEVFdmVudCB9IGZyb20gXCIuLi9lRXZlbnRcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBBdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UgZXh0ZW5kcyBBdWRpb0dyYXBoTm9kZSB7XHJcbiAgICBwdWJsaWMgdXJsOiBzdHJpbmc7XHJcbiAgICBwdWJsaWMgYXVkaW9FbmRlZCA9IG5ldyBFRXZlbnQoKTtcclxuXHJcbiAgICBwcml2YXRlIHNvdXJjZTogTWVkaWFFbGVtZW50QXVkaW9Tb3VyY2VOb2RlO1xyXG4gICAgcHJpdmF0ZSBhdWRpbzogSFRNTEF1ZGlvRWxlbWVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIGF1ZGlvQ3R4OiBBdWRpb0NvbnRleHQsIHVybDogc3RyaW5nKSB7XHJcbiAgICAgICAgc3VwZXIobmFtZSwgYXVkaW9DdHgpO1xyXG4gICAgICAgIHRoaXMudXJsID0gdXJsO1xyXG5cclxuICAgICAgICB0aGlzLmF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcclxuICAgICAgICB0aGlzLmF1ZGlvLmNvbnRyb2xzID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmF1ZGlvLnNyYyA9IHRoaXMudXJsO1xyXG4gICAgICAgIHRoaXMuYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcImVuZGVkXCIsIHRoaXMuYXVkaW9FbmRlZEV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGF1ZGlvRW5kZWRFdmVudCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvRW5kZWQuZGlzcGF0Y2hFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnZXRBdWRpb05vZGUgPSAoKTogQXVkaW9Ob2RlID0+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zb3VyY2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbG9hZCgpOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZSA9IHRoaXMuYXVkaW9DdHguY3JlYXRlTWVkaWFFbGVtZW50U291cmNlKHRoaXMuYXVkaW8pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGxheSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLmF1ZGlvLnBsYXkoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGF1c2UgPSAoKSA9PiB7XHJcbiAgICAgICAgdGhpcy5hdWRpby5wYXVzZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdG9wID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuYXVkaW8ucGF1c2UoKTtcclxuICAgICAgICB0aGlzLmF1ZGlvLmN1cnJlbnRUaW1lID0gMDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VXJsID0gKHVybDogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdmFyIHBsYXkgPSAhdGhpcy5hdWRpby5wYXVzZWQ7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5hdWRpby5zcmMgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5hdWRpby5sb2FkKCk7XHJcbiAgICAgICAgaWYgKHBsYXkpIHtcclxuICAgICAgICAgICAgdGhpcy5hdWRpby5wbGF5KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGUgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZVwiO1xyXG5pbXBvcnQgeyBBdWRpb0dyYXBoTm9kZUFuYWx5c2VyIH0gZnJvbSBcIi4vYXVkaW9HcmFwaE5vZGVBbmFseXNlclwiO1xyXG5pbXBvcnQgeyBBdWRpb0dyYXBoTm9kZURlc3RpbmF0aW9uIH0gZnJvbSBcIi4vYXVkaW9HcmFwaE5vZGVEZXN0aW5hdGlvblwiO1xyXG5pbXBvcnQgeyBBdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2VcIjtcclxuaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGVTdHJlYW1Tb3VyY2UgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZVN0cmVhbVNvdXJjZVwiO1xyXG5pbXBvcnQgeyBFRXZlbnRUIH0gZnJvbSBcIi4uL2VFdmVudFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEF1ZGlvR3JhcGgge1xyXG4gICAgcHVibGljIGF1ZGlvQ3R4OiBBdWRpb0NvbnRleHQ7XHJcblxyXG4gICAgLy8gcHJpdmF0ZSBzb3VyY2VOb2RlOiBBdWRpb0dyYXBoTm9kZTxBdWRpb05vZGU+O1xyXG4gICAgLy8gcHJpdmF0ZSBhbmFseXplck5vZGU6IEF1ZGlvR3JhcGhOb2RlQW5hbHlzZXI7XHJcblxyXG4gICAgLy8gcmVtb3ZlIGdlbmVyaWMgVD9cclxuICAgIHByaXZhdGUgYXVkaW9Ob2RlczogQXVkaW9HcmFwaE5vZGVbXSA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBkZXN0aW5hdGlvbk5vZGU6IEF1ZGlvR3JhcGhOb2RlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYXVkaW9DdHggPSBuZXcgQXVkaW9Db250ZXh0KCk7XHJcbiAgICAgICAgdGhpcy5hdWRpb0N0eC5hZGRFdmVudExpc3RlbmVyKFwic3RhdGVjaGFuZ2VcIiwgdGhpcy5hdWRpb0NvbnRleHRTdGF0ZUNoYW5nZWRFdmFsdWF0b3IpO1xyXG4gICAgICAgIGlmICh0aGlzLmF1ZGlvQ3R4LnN0YXRlID09PSBcInN1c3BlbmRlZFwiKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmRvY3VtZW50Q2xpY2spO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkF1ZGlvIGNvbnRleHQgaXMgc3VzcGVuZGVkLiBDbGljayB0aGUgZG9tIHRvIG1ha2UgaXQgcnVubmluZy5cIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGVzdGluYXRpb25Ob2RlID0gbmV3IEF1ZGlvR3JhcGhOb2RlRGVzdGluYXRpb24oXCJkZXN0aW5hdGlvblwiLCB0aGlzLmF1ZGlvQ3R4KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkTWVkaWFFbGVtZW50U291cmNlID0gKG5hbWU6IHN0cmluZywgdXJsOiBzdHJpbmcpID0+IHtcclxuICAgICAgICB2YXIgc291cmNlTm9kZSA9IG5ldyBBdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UobmFtZSwgdGhpcy5hdWRpb0N0eCwgdXJsKTtcclxuICAgICAgICB0aGlzLmF1ZGlvTm9kZXMucHVzaChzb3VyY2VOb2RlKTtcclxuICAgICAgICByZXR1cm4gc291cmNlTm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWRkQW5hbHl6ZXIgPSAobmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdmFyIGFuYWx5emVyTm9kZSA9IG5ldyBBdWRpb0dyYXBoTm9kZUFuYWx5c2VyKG5hbWUsIHRoaXMuYXVkaW9DdHgpO1xyXG4gICAgICAgIHRoaXMuYXVkaW9Ob2Rlcy5wdXNoKGFuYWx5emVyTm9kZSk7XHJcbiAgICAgICAgcmV0dXJuIGFuYWx5emVyTm9kZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0QXVkaW9HcmFwaE5vZGUgPSAobmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9Ob2Rlcy5maXJzdCh4ID0+IHgubmFtZSA9PSBuYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwdWJsaWMgcGxheVVybCA9ICh1cmw6IHN0cmluZykgPT4ge1xyXG4gICAgLy8gICAgIHRoaXMuc291cmNlTm9kZSA9IG5ldyBBdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UodGhpcy5hdWRpb0N0eCwgdXJsKTtcclxuICAgIC8vICAgICBpZiAodGhpcy5hdWRpb0N0eC5zdGF0ZSA9PT0gXCJydW5uaW5nXCIpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5idWlsZEdyYXBoKCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyBwbGF5U3RyZWFtID0gKCkgPT4ge1xyXG4gICAgLy8gICAgIHRoaXMuc291cmNlTm9kZSA9IG5ldyBBdWRpb0dyYXBoTm9kZVN0cmVhbVNvdXJjZSh0aGlzLmF1ZGlvQ3R4KTtcclxuICAgIC8vICAgICBpZiAodGhpcy5hdWRpb0N0eC5zdGF0ZSA9PT0gXCJydW5uaW5nXCIpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5idWlsZEdyYXBoKCk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG5cclxuICAgIHB1YmxpYyBhdWRpb0NvbnRleHRTdGF0ZUNoYW5nZWQgPSBuZXcgRUV2ZW50VDxzdHJpbmc+KCk7XHJcblxyXG4gICAgcHJpdmF0ZSBkb2N1bWVudENsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmF1ZGlvQ3R4LnN0YXRlID09PSBcInN1c3BlbmRlZFwiKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYXVkaW9DdHgucmVzdW1lKCk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmRvY3VtZW50Q2xpY2spO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGF1ZGlvQ29udGV4dFN0YXRlQ2hhbmdlZEV2YWx1YXRvciA9ICgpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5hdWRpb0N0eC5zdGF0ZSA9PT0gXCJydW5uaW5nXCIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJhdWRpbyBjb250ZXh0IHN0YXRlIGNoYW5nZWRcIik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLmF1ZGlvQ3R4LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLCB0aGlzLmF1ZGlvQ29udGV4dFN0YXRlQ2hhbmdlZEV2YWx1YXRvcik7XHJcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKClcclxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1ZGlvQ29udGV4dFN0YXRlQ2hhbmdlZC5kaXNwYXRjaEV2ZW50KHRoaXMuYXVkaW9DdHguc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWFsb2FkaW5nIGF1ZGlvIGdyYXBoXCIpO1xyXG4gICAgICAgICAgICBQcm9taXNlLmFsbCh0aGlzLmF1ZGlvTm9kZXMubWFwKHggPT4geC5yZWxvYWQoKSkpXHJcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWxvYWRlZCBhdWRpbyBncmFwaFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuYXVkaW9Ob2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdWRpb05vZGUgPSB0aGlzLmF1ZGlvTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvTm9kZS5nZXRBdWRpb05vZGUoKS5kaXNjb25uZWN0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSA8IHRoaXMuYXVkaW9Ob2Rlcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpb05vZGUuZ2V0QXVkaW9Ob2RlKCkuY29ubmVjdCh0aGlzLmF1ZGlvTm9kZXNbaSArIDFdLmdldEF1ZGlvTm9kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvTm9kZS5nZXRBdWRpb05vZGUoKS5jb25uZWN0KHRoaXMuZGVzdGluYXRpb25Ob2RlLmdldEF1ZGlvTm9kZSgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBwcml2YXRlIGJ1aWxkR3JhcGgoKSB7XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coXCJCdWlsZGluZyBhdWRpbyBncmFwaC5cIik7XHJcblxyXG4gICAgLy8gICAgIGlmICh0aGlzLnNvdXJjZU5vZGUuZ2V0QXVkaW9Ob2RlKCkpIHtcclxuICAgIC8vICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLmdldEF1ZGlvTm9kZSgpLmRpc2Nvbm5lY3QoKTtcclxuICAgIC8vICAgICAgICAgdGhpcy5hbmFseXplck5vZGUuZ2V0QXVkaW9Ob2RlKCkuZGlzY29ubmVjdCgpO1xyXG4gICAgLy8gICAgICAgICB0aGlzLmRlc3RpbmF0aW9uTm9kZS5nZXRBdWRpb05vZGUoKS5kaXNjb25uZWN0KCk7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuc291cmNlTm9kZS5nZXRBdWRpb05vZGUoKS5jb25uZWN0KHRoaXMuYW5hbHl6ZXJOb2RlLmdldEF1ZGlvTm9kZSgpKTtcclxuICAgIC8vICAgICAgICAgdGhpcy5hbmFseXplck5vZGUuZ2V0QXVkaW9Ob2RlKCkuY29ubmVjdCh0aGlzLmRlc3RpbmF0aW9uTm9kZS5nZXRBdWRpb05vZGUoKSk7XHJcbiAgICAvLyAgICAgfSBlbHNlIHtcclxuICAgIC8vICAgICAgICAgY29uc29sZS5sb2coXCJBdWRpbyBzb3VyY2Ugbm90IGF2YWlsYWJsZS4gV2FpdGluZyBzb21lIHRpbWUuXCIpO1xyXG4gICAgLy8gICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgIC8vICAgICAgICAgICAgIHRoaXMuYnVpbGRHcmFwaCgpO1xyXG4gICAgLy8gICAgICAgICB9LCAxMDAwKTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gcHVibGljIGdldFNwZWN0cnVtKCkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmFuYWx5emVyTm9kZS5nZXRTcGVjdHJ1bSgpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHB1YmxpYyBnZXRXYXZlKCkge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmFuYWx5emVyTm9kZS5nZXRXYXZlKCk7XHJcbiAgICAvLyB9XHJcbn0iLCJpbXBvcnQgeyBBdWRpb0dyYXBoIH0gZnJvbSBcIi4uL2VuYy9zcmMvYXVkaW8vYXVkaW9HcmFwaFwiO1xyXG5pbXBvcnQgeyBBdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UgfSBmcm9tIFwiLi4vZW5jL3NyYy9hdWRpby9hdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2VcIjtcclxuaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGVBbmFseXNlciB9IGZyb20gXCIuLi9lbmMvc3JjL2F1ZGlvL2F1ZGlvR3JhcGhOb2RlQW5hbHlzZXJcIjtcclxuXHJcbi8vIGltcG9ydCBGYWludEFzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9tcDMtZGVtby9kZW1vXzFfZmFpbnRfY29sb3IubXAzXCJcclxuLy8gaW1wb3J0IFByaXNtQXNzZXRNUDMgZnJvbSBcIi4vYXNzZXRzL21wMy1kZW1vL2RlbW9fMl9wcmlzbS5tcDNcIlxyXG4vLyBpbXBvcnQgSG9wZWZ1bEFzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9tcDMtZGVtby9kZW1vXzNfaG9wZWZ1bC5tcDNcIlxyXG4vLyBpbXBvcnQgRGVlcEFzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9tcDMtZGVtby9kZW1vXzRfZGVlcF9maWVsZC5tcDNcIlxyXG4vLyBpbXBvcnQgR3Jhdml0eUFzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9tcDMtZGVtby9kZW1vXzVfZ3Jhdml0eS5tcDNcIlxyXG4vLyBpbXBvcnQgSm91cm5leUFzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9tcDMtZGVtby9kZW1vXzZfam91cm5leV90b190aGVfcGxhbmV0cy5tcDNcIlxyXG4vLyBpbXBvcnQgRHJpZnRpbmdBc3NldE1QMyBmcm9tIFwiLi9hc3NldHMvbXAzLWRlbW8vZGVtb183X2RyaWZ0aW5nX2ludG9fdGhlX2F0bW9zcGhlcmUubXAzXCJcclxuXHJcbmltcG9ydCBGYWludEFzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9kZW1vL1RyYWlsZXJfZmFpbnRDb2xvci5tcDNcIlxyXG5pbXBvcnQgRGVlcEFzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9kZW1vL1RyYWlsZXJfRGVlcEZpZWxkLm1wM1wiXHJcbmltcG9ydCBEcmlmdGluZ0Fzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9kZW1vL1RyYWlsZXJfRHJpZnRpbmdJbnRvVGhlQXRtb3NwaGVyZS5tcDNcIlxyXG5cclxuZXhwb3J0IGNsYXNzIEF1ZGlvTWFuYWdlciB7XHJcbiAgICBwcml2YXRlIGF1ZGlvR3JhcGg6IEF1ZGlvR3JhcGg7XHJcbiAgICBwcml2YXRlIHNvdXJjZTogQXVkaW9HcmFwaE5vZGVFbGVtZW50U291cmNlO1xyXG4gICAgcHJpdmF0ZSBhbmFseXNlcjogQXVkaW9HcmFwaE5vZGVBbmFseXNlcjtcclxuXHJcbiAgICBwcml2YXRlIHNvbmdzID0gW1xyXG4gICAgICAgIEZhaW50QXNzZXRNUDMsXHJcbiAgICAgICAgLy8gUHJpc21Bc3NldE1QMyxcclxuICAgICAgICAvLyBIb3BlZnVsQXNzZXRNUDMsXHJcbiAgICAgICAgRGVlcEFzc2V0TVAzLFxyXG4gICAgICAgIC8vIEdyYXZpdHlBc3NldE1QMyxcclxuICAgICAgICAvLyBKb3VybmV5QXNzZXRNUDMsXHJcbiAgICAgICAgRHJpZnRpbmdBc3NldE1QM1xyXG4gICAgXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuYXVkaW9HcmFwaCA9IG5ldyBBdWRpb0dyYXBoKCk7XHJcbiAgICAgICAgdGhpcy5zb3VyY2UgPSB0aGlzLmF1ZGlvR3JhcGguYWRkTWVkaWFFbGVtZW50U291cmNlKFwic291cmNlXCIsIHRoaXMuc29uZ3NbMF0pXHJcbiAgICAgICAgdGhpcy5hbmFseXNlciA9IHRoaXMuYXVkaW9HcmFwaC5hZGRBbmFseXplcihcImFuYWx5c2VyXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZWxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9HcmFwaC5yZWxvYWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGxheSA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnNvdXJjZS5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBhdXNlID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc291cmNlLnBhdXNlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5leHQgPSAoKSA9PiB7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRTb25nSW5kZXggPSB0aGlzLnNvbmdzLmluZGV4T2YodGhpcy5zb3VyY2UudXJsKTtcclxuICAgICAgICB2YXIgbmV4dFNvbmdJbmRleCA9IGN1cnJlbnRTb25nSW5kZXggKyAxO1xyXG4gICAgICAgIGlmIChuZXh0U29uZ0luZGV4ID09IHRoaXMuc29uZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG5leHRTb25nSW5kZXggPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zb3VyY2Uuc2V0VXJsKHRoaXMuc29uZ3NbbmV4dFNvbmdJbmRleF0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwcmV2aW91cyA9ICgpID0+IHtcclxuICAgICAgICB2YXIgY3VycmVudFNvbmdJbmRleCA9IHRoaXMuc29uZ3MuaW5kZXhPZih0aGlzLnNvdXJjZS51cmwpO1xyXG4gICAgICAgIHZhciBwcmV2aW91c1NvbmdJbmRleCA9IGN1cnJlbnRTb25nSW5kZXggLSAxO1xyXG4gICAgICAgIGlmIChwcmV2aW91c1NvbmdJbmRleCA9PSAtMSkge1xyXG4gICAgICAgICAgICBwcmV2aW91c1NvbmdJbmRleCA9IHRoaXMuc29uZ3MubGVuZ3RoIC0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc291cmNlLnNldFVybCh0aGlzLnNvbmdzW3ByZXZpb3VzU29uZ0luZGV4XSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEFuYWx5c2VyID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFuYWx5c2VyO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdG9wID0gKCkgPT4ge1xyXG4gICAgICAgIHRoaXMuc291cmNlLnN0b3AoKTtcclxuICAgIH1cclxufSIsImV4cG9ydCBjbGFzcyBBc3NldE1hbmFnZXIge1xyXG4gICAgcHJpdmF0ZSBpbWFnZUFzc2V0czogeyBuYW1lOiBzdHJpbmcsIHVybDogc3RyaW5nLCBpbWFnZTogSFRNTEltYWdlRWxlbWVudCB9W10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgYWRkSW1hZ2UgPSAobmFtZTogc3RyaW5nLCB1cmw6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIHRoaXMuaW1hZ2VBc3NldHMucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICBpbWFnZTogdW5kZWZpbmVkXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldEltYWdlID0gKG5hbWU6IHN0cmluZyk6IEhUTUxJbWFnZUVsZW1lbnQgPT4ge1xyXG4gICAgICAgIHZhciBpbWFnZUFzc2V0ID0gdGhpcy5pbWFnZUFzc2V0cy5maXJzdE9yRGVmYXVsdCh4ID0+IHgubmFtZSA9PSBuYW1lKTtcclxuICAgICAgICBpZiAoaW1hZ2VBc3NldCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaW1hZ2VBc3NldC5pbWFnZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbG9hZCA9ICgpID0+IHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwodGhpcy5pbWFnZUFzc2V0cy5tYXAoeCA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXguaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSB4LnVybDtcclxuICAgICAgICAgICAgICAgICAgICBpbWFnZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHguaW1hZ2UgPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTdGFnZSB9IGZyb20gXCIuLi9lbmMvc3JjL3VpL3N0YWdlXCI7XHJcbmltcG9ydCB7IEluc3BpZXJ0eVBsYXllclZpZXcgfSBmcm9tIFwiLi92aWV3L2luc3BpZXJ0eVBsYXllclZpZXdcIjtcclxuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwiLi9tb2RlbHMvc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgU2V0dGluZ3NNYW5hZ2VyIH0gZnJvbSBcIi4vc2V0dGluZ3Mvc2V0dGluZ3NNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IERpbmplY3QgfSBmcm9tIFwiLi4vZW5jL3NyYy9kaW5qZWN0XCI7XHJcbmltcG9ydCB7IEVBbmltYXRpb24gfSBmcm9tIFwiLi4vZW5jL3NyYy9lQW5pbWF0aW9uXCI7XHJcbmltcG9ydCB7IEVDYW52YXMgfSBmcm9tIFwiLi4vZW5jL3NyYy91aS9lQ2FudmFzXCI7XHJcbmltcG9ydCB7IENhbnZhc0hlbHBlciB9IGZyb20gXCIuLi9lbmMvc3JjL3VpL2NhbnZhc0hlbHBlclwiO1xyXG5pbXBvcnQgeyBBdWRpb01hbmFnZXIgfSBmcm9tIFwiLi9hdWRpb01hbmFnZXJcIjtcclxuaW1wb3J0IHsgQXNzZXRNYW5hZ2VyIH0gZnJvbSBcIi4uL2VuYy9zcmMvYXNzZXRNYW5hZ2VyXCI7XHJcblxyXG5pbXBvcnQgYmFja2dyb3VuZFBuZyBmcm9tIFwiLi9hc3NldHMvYmFja2dyb3VuZC5wbmdcIlxyXG5pbXBvcnQgbG9nb0Zyb250UG5nIGZyb20gXCIuL2Fzc2V0cy9sb2dvLWZyb250LnBuZ1wiXHJcbmltcG9ydCBsb2dvTm92YVBuZyBmcm9tIFwiLi9hc3NldHMvbG9nby1ub3ZhLnBuZ1wiXHJcblxyXG5leHBvcnQgY2xhc3MgQXBwIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3Mod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHNldHRpbmdNYW5hZ2VyID0gbmV3IFNldHRpbmdzTWFuYWdlcigpO1xyXG5cclxuICAgIHB1YmxpYyBydW4gPSAoKSA9PiB7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsYWNrXCI7XHJcblxyXG4gICAgICAgIHZhciBjYW52YXMgPSBFQ2FudmFzLmNyZWF0ZUZ1bGxTY3JlZW4oKTtcclxuICAgICAgICB2YXIgc3RhZ2UgPSBuZXcgU3RhZ2UoY2FudmFzKTtcclxuICAgICAgICB2YXIgYW5pbWF0aW9uID0gbmV3IEVBbmltYXRpb24oKTtcclxuICAgICAgICBhbmltYXRpb24uYWRkVXBkYXRlRnVuY3Rpb24oY2FudmFzLmRyYXcpO1xyXG5cclxuICAgICAgICBEaW5qZWN0LmFkZEluc3RhbmNlKFwiY2FudmFzXCIsIGNhbnZhcyk7XHJcbiAgICAgICAgRGluamVjdC5hZGRJbnN0YW5jZShcInN0YWdlXCIsIHN0YWdlKTtcclxuICAgICAgICBEaW5qZWN0LmFkZEluc3RhbmNlKFwiYW5pbWF0aW9uXCIsIGFuaW1hdGlvbik7XHJcblxyXG4gICAgICAgIHZhciB2aWV3ID0gbmV3IEluc3BpZXJ0eVBsYXllclZpZXcoKTtcclxuICAgICAgICB2aWV3LmRlYWN0aXZhdGVkKCk7XHJcbiAgICAgICAgc3RhZ2Uuc2V0Vmlldyh2aWV3KTtcclxuICAgICAgICB2aWV3LmFjdGl2YXRlKDEpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRpbmcgYXBwXCIpO1xyXG4gICAgICAgIFByb21pc2UuYWxsKFtcclxuICAgICAgICAgICAgbmV3IENhbnZhc0hlbHBlcigpLmxvYWRGb250YXdlc29tZUZyZWUoKSxcclxuICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF1ZGlvTWFuYWdlciA9IG5ldyBBdWRpb01hbmFnZXIoKTtcclxuICAgICAgICAgICAgICAgIGF1ZGlvTWFuYWdlci5yZWxvYWQoKVxyXG4gICAgICAgICAgICAgICAgRGluamVjdC5hZGRJbnN0YW5jZShcImF1ZGlvXCIsIGF1ZGlvTWFuYWdlcik7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICB9LCAyMDAwKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBhc3NldE1hbmFnZXIgPSBuZXcgQXNzZXRNYW5hZ2VyKCk7XHJcbiAgICAgICAgICAgICAgICBEaW5qZWN0LmFkZEluc3RhbmNlKFwiYXNzZXRzXCIsIGFzc2V0TWFuYWdlcik7XHJcbiAgICAgICAgICAgICAgICBhc3NldE1hbmFnZXIuYWRkSW1hZ2UoXCJiYWNrZ3JvdW5kXCIsIGJhY2tncm91bmRQbmcpO1xyXG4gICAgICAgICAgICAgICAgYXNzZXRNYW5hZ2VyLmFkZEltYWdlKFwibG9nb1wiLCBsb2dvRnJvbnRQbmcpO1xyXG4gICAgICAgICAgICAgICAgYXNzZXRNYW5hZ2VyLmFkZEltYWdlKFwibG9nby1ub3ZhXCIsIGxvZ29Ob3ZhUG5nKTtcclxuICAgICAgICAgICAgICAgIGFzc2V0TWFuYWdlci5sb2FkKClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRlZCBhcHBcIik7XHJcblxyXG4gICAgICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIuYWRkU3RhckxheWVyKCk7XHJcbiAgICAgICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci5hZGRTdGFyTGF5ZXIoKTtcclxuICAgICAgICAgICAgQXBwLnNldHRpbmdNYW5hZ2VyLmFkZFN0YXJMYXllcigpO1xyXG4gICAgICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIuYWRkU3RhckxheWVyKCk7XHJcblxyXG4gICAgICAgICAgICB2aWV3LnN0YXJ0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTdGFyTGF5ZXIgfSBmcm9tIFwiLi9zdGFyTGF5ZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5ncyB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgd2lkdGg6IG51bWJlciwgcHVibGljIGhlaWdodDogbnVtYmVyKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgc3RhckxheWVyczogU3RhckxheWVyW10gPSBbXTtcclxufVxyXG4iLCJpbXBvcnQgeyBTZXR0aW5nT3BlcmF0aW9uIH0gZnJvbSBcIi4vc2V0dGluZ09wZXJhdGlvblwiO1xyXG5pbXBvcnQgeyBFRXZlbnRUIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZUV2ZW50XCI7XHJcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi9hcHBcIjtcclxuaW1wb3J0IHsgU3RhckxheWVyIH0gZnJvbSBcIi4uL21vZGVscy9zdGFyTGF5ZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXR0aW5nc01hbmFnZXIge1xyXG4gICAgcHVibGljIHVwZGF0ZSA9IG5ldyBFRXZlbnRUPFNldHRpbmdPcGVyYXRpb24+KCk7XHJcblxyXG4gICAgcHVibGljIGFkZFN0YXJMYXllciA9ICgpID0+IHtcclxuICAgICAgICB2YXIgbGF5ZXIgPSBuZXcgU3RhckxheWVyKCk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzAwOyBpKyspIHtcclxuICAgICAgICAgICAgbGF5ZXIuc3RhcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICB4OiBNYXRoLnJhbmRvbSgpICogQXBwLnNldHRpbmdzLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgeTogTWF0aC5yYW5kb20oKSAqIEFwcC5zZXR0aW5ncy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgICByOiBNYXRoLnJhbmRvbSgpICogMC41ICsgMC4wNVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQXBwLnNldHRpbmdzLnN0YXJMYXllcnMucHVzaChsYXllcik7XHJcbiAgICAgICAgdGhpcy51cGRhdGUuZGlzcGF0Y2hFdmVudChTZXR0aW5nT3BlcmF0aW9uLkFkZFN0YXJMYXllcik7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZVN0YXJMYXllciA9IChzdGFyTGF5ZXI6IFN0YXJMYXllcikgPT4ge1xyXG4gICAgICAgIEFwcC5zZXR0aW5ncy5zdGFyTGF5ZXJzLnJlbW92ZUl0ZW0oc3RhckxheWVyKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZS5kaXNwYXRjaEV2ZW50KFNldHRpbmdPcGVyYXRpb24uUmVtb3ZlU3RhckxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2hhbmdlTnVtYmVyT2ZTdGFycyA9IChzdGFyTGF5ZXI6IFN0YXJMYXllciwgbnVtYmVyT2ZTdGFyczogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKG51bWJlck9mU3RhcnMgPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBkaWZmID0gbnVtYmVyT2ZTdGFycyAtIHN0YXJMYXllci5zdGFycy5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChkaWZmID4gMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkaWZmOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2l6ZXMgPSBzdGFyTGF5ZXIuc3RhcnMubWFwKHggPT4geC5yKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudFZhbHVlTG93ID0gTWF0aC5taW4oLi4uc2l6ZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VmFsdWVIaWdoID0gTWF0aC5tYXgoLi4uc2l6ZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBzdGFyTGF5ZXIuc3RhcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IE1hdGgucmFuZG9tKCkgKiBBcHAuc2V0dGluZ3Mud2lkdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IE1hdGgucmFuZG9tKCkgKiBBcHAuc2V0dGluZ3MuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByOiBNYXRoLnJhbmRvbSgpICogKGN1cnJlbnRWYWx1ZUhpZ2ggLSBjdXJyZW50VmFsdWVMb3cpICsgY3VycmVudFZhbHVlTG93XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChkaWZmIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAtZGlmZjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhckxheWVyLnN0YXJzLnNwbGljZShNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBzdGFyTGF5ZXIuc3RhcnMubGVuZ3RoKSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy51cGRhdGUuZGlzcGF0Y2hFdmVudChTZXR0aW5nT3BlcmF0aW9uLkNoYW5nZU51bWJlck9mU3RhcnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2hhbmdlU3BlZWQgPSAoc3RhckxheWVyOiBTdGFyTGF5ZXIsIHNwZWVkOiBudW1iZXIpID0+IHtcclxuICAgICAgICBzdGFyTGF5ZXIuc3BlZWQgPSBzcGVlZDtcclxuICAgICAgICB0aGlzLnVwZGF0ZS5kaXNwYXRjaEV2ZW50KFNldHRpbmdPcGVyYXRpb24uQ2hhbmdlU3BlZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjaGFuZ2VTaXplcyA9IChzdGFyTGF5ZXI6IFN0YXJMYXllciwgbG93Qm9yZGVyOiBudW1iZXIsIGhpZ2hCb3JkZXI6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHZhciBzaXplcyA9IHN0YXJMYXllci5zdGFycy5tYXAoeCA9PiB4LnIpO1xyXG4gICAgICAgIHZhciBjdXJyZW50VmFsdWVMb3cgPSBNYXRoLm1pbiguLi5zaXplcyk7XHJcbiAgICAgICAgdmFyIGN1cnJlbnRWYWx1ZUhpZ2ggPSBNYXRoLm1heCguLi5zaXplcyk7XHJcblxyXG4gICAgICAgIHZhciBtaW5GaXggPSAoY3VycmVudFZhbHVlSGlnaCAtIGN1cnJlbnRWYWx1ZUxvdyk7XHJcbiAgICAgICAgaWYgKG1pbkZpeCA8PSAwKSB7XHJcbiAgICAgICAgICAgIG1pbkZpeCA9IDAuMDAwMVxyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGNvbnN0IHN0YXIgb2Ygc3RhckxheWVyLnN0YXJzKSB7XHJcbiAgICAgICAgICAgIHN0YXIuciA9ICgoc3Rhci5yIC0gY3VycmVudFZhbHVlTG93KSAvIG1pbkZpeCAqIChoaWdoQm9yZGVyIC0gbG93Qm9yZGVyKSkgKyBsb3dCb3JkZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMudXBkYXRlLmRpc3BhdGNoRXZlbnQoU2V0dGluZ09wZXJhdGlvbi5DaGFuZ2VTcGVlZCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcclxuaW1wb3J0IFwiLi4vZW5jL3NyYy9leHRlbnNpb25zXCI7XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbWFpbiwgZmFsc2UpO1xyXG5cclxuZnVuY3Rpb24gbWFpbigpIHtcclxuICAgIHZhciBhcHAgPSBuZXcgQXBwKCk7XHJcbiAgICBhcHAucnVuKCk7XHJcbn1cclxuXHJcbmlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcclxuICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWdpc3Rlcignc2VydmljZS13b3JrZXIuanMnKVxyXG4gICAgICAgICAgICAudGhlbihyZWdpc3RyYXRpb24gPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NXIHJlZ2lzdGVyZWQ6ICcsIHJlZ2lzdHJhdGlvbik7XHJcbiAgICAgICAgICAgIH0pLmNhdGNoKHJlZ2lzdHJhdGlvbkVycm9yID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTVyByZWdpc3RyYXRpb24gZmFpbGVkOiAnLCByZWdpc3RyYXRpb25FcnJvcik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfSk7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ==