!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=7)}([function(t,e,i){t.exports=i.p+"4548616750b49599e29ad31f27052fc7.mp3"},function(t,e,i){t.exports=i.p+"42e1c91573e0327cd3f17f251e8af2a6.mp3"},function(t,e,i){t.exports=i.p+"f1ceea5d555947c80281f368bfaf8fa8.mp3"},function(t,e,i){t.exports=i.p+"b5599f87dda55c2ca04eb255a9788fa5.png"},function(t,e,i){t.exports=i.p+"dec4bbd246838204460cee765e852465.png"},function(t,e,i){t.exports=i.p+"b78224d2549be6ccf64dc62f3973084e.png"},function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var i=e(t)+1,s=this.firstOrDefault(t=>e(t)==i);return s||(s=this.first(t=>1==e(t))),s},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,i){"use strict";i.r(e);class s{constructor(){this.listeners=[],this.addEventListener=t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)},this.addEventListenerIfNotExists=t=>{!t||this.listeners.indexOf(t)>=0||this.listeners.push(t)},this.dispatchEvent=()=>{for(let t=0;t<this.listeners.length;t++){(0,this.listeners[t])()}},this.removeEventListener=t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)},this.removeEventListenerIfExists=t=>{!t||this.listeners.indexOf(t)<0||this.listeners.splice(this.listeners.indexOf(t),1)}}}class n{constructor(){this.listeners=[],this.addEventListener=t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)},this.dispatchEvent=t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}},this.removeEventListener=t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)}}}class r{constructor(){this.listeners=[],this.addEventListener=t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)},this.dispatchEvent=(t,e)=>{for(let i=0;i<this.listeners.length;i++){(0,this.listeners[i])(t,e)}},this.removeEventListener=t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)}}}class a{constructor(){this.drawFunctions=[],this.dpr=1,this.dprScalingEnabled=!1,this.enableDprScaling=()=>{this.dprScalingEnabled=!0,this.resize()},this.disableDprScaling=()=>{this.dprScalingEnabled=!1,this.resize()},this.resized=new s,this.resize=()=>{this.dpr=this.dprScalingEnabled&&window.devicePixelRatio||1,this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight,this.resized.dispatchEvent()},this.draw=()=>{this.ctx.save(),this.ctx.scale(this.dpr,this.dpr);for(const t of this.drawFunctions)t(this.ctx,this.width,this.height);this.ctx.restore()},this.addDrawFunction=t=>{this.drawFunctions.push(t)},this.removeDrawFunction=t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)}}get width(){return this.canvas.clientWidth/this.dpr}get height(){return this.canvas.clientHeight/this.dpr}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new a;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}a.cursorManipulation=!0,a.cursorLock=null,a.SetCursor=(t,e)=>{a.cursorManipulation&&(e?(document.body.style.cursor="pointer",a.cursorLock=t):t==a.cursorLock&&(document.body.style.cursor="default",a.cursorLock=null))};class o{constructor(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s,this.collidesWith=t=>{var e=!1,i=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(i=!0):t.y<=this.y&&t.y+t.width>this.y&&(i=!0)),e&&i},this.isHitBy=(t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height}}class h{constructor(t){this.canvas=t,this.isTouchMode=!1,this.canvasResized=()=>{this.shouldUpdateLayout=!0},this.touchMode=t=>{this.isTouchMode||(console.log("switching to touch mode"),a.cursorManipulation=!1,this.isTouchMode=!0,this.removeMouseListeners(),this.addTouchListeners(),document.body.addEventListener("mousedown",this.mouseMode),document.removeEventListener("touchstart",this.touchMode))},this.mouseMode=t=>{this.isTouchMode&&(console.log("switching to mouse mode"),a.cursorManipulation=!0,this.isTouchMode=!1,this.addMouseListeners(),this.removeTouchListeners(),document.addEventListener("touchstart",this.touchMode),document.removeEventListener("mousedown",this.mouseMode))},this.mouseDown=t=>{this.view&&this.view.mouseDown({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})},this.mouseUp=t=>{this.view&&this.view.mouseUp({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})},this.mouseMove=t=>{this.view&&this.view.mouseMove({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})},this.click=t=>{this.view&&this.view.click({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})},this.render=(t,e,i)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new o(0,0,e,i)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,i),this.view.render(t))},this.setView=t=>{this.view=t,this.shouldUpdateLayout=!0},this.touchToMouse=t=>t.touches.length>0?{clientX:t.touches[0].clientX/this.canvas.dpr,clientY:t.touches[0].clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:!0,shiftKey:t.shiftKey}:{clientX:0,clientY:0,altKey:t.altKey,ctrlKey:!0,shiftKey:t.shiftKey},t.addDrawFunction(this.render),t.resized.addEventListener(this.canvasResized),document.addEventListener("touchstart",this.touchMode),this.addMouseListeners()}removeMouseListeners(){document.removeEventListener("mouseup",this.mouseUp),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mousedown",this.mouseDown),document.removeEventListener("click",this.click)}addMouseListeners(){document.addEventListener("mouseup",this.mouseUp),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("mousedown",this.mouseDown),document.addEventListener("click",this.click)}removeTouchListeners(){document.removeEventListener("touchend",this.mouseUp),document.removeEventListener("touchmove",this.mouseMove),document.removeEventListener("touchstart",this.click)}addTouchListeners(){document.addEventListener("touchend",t=>{t.preventDefault(),this.mouseUp(this.touchToMouse(t))}),document.addEventListener("touchmove",t=>{t.touches.length>0&&this.mouseMove(this.touchToMouse(t))}),document.addEventListener("touchstart",t=>{t.touches.length>0&&this.click(this.touchToMouse(t))})}}var d,l,u,c,g;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(d||(d={})),function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom"}(l||(l={}));class m{constructor(){this.top=0,this.right=0,this.bottom=0,this.left=0}}class p{constructor(){this.horizontalAlign=d.Center,this.verticalAlignmentRatio=l.Center,this.margin=new m,this.calculateDimensionsX=(t,e)=>{switch(this.horizontalAlign){case d.Left:return t.x+this.margin.left;case d.Center:return t.x+t.width/2-e/2;case d.Right:return t.x+t.width-e-this.margin.right}},this.calculateDimensionsY=(t,e)=>t.y+t.height*this.verticalAlignmentRatio-e*this.verticalAlignmentRatio+(this.verticalAlignmentRatio>.5?-this.margin.bottom:this.margin.top),this.verticalAlign=l.Center}set verticalAlign(t){switch(t){case l.Bottom:this.verticalAlignmentRatio=1;break;case l.Center:this.verticalAlignmentRatio=.5;break;case l.Top:this.verticalAlignmentRatio=0}}}class v{constructor(t,e,i){this.executer=t,this.setMethod=i,this.methods=[],this.add=t=>{var e=t(this.methods[this.methods.length-1]);this.methods.push(e),this.setMethod(e)},this.remove=()=>{this.methods.pop(),this.setMethod(this.methods[this.methods.length-1])},this.reset=()=>{this.setMethod(this.methods[this.methods.length-1])},this.clear=()=>{this.setMethod(()=>{})},e.bind(this.executer),this.methods.push(e)}}class y{constructor(t){this.durationSeconds=t,this.getValue=()=>{return(Date.now()-this.startTime)/1e3/this.durationSeconds},this.ended=()=>{return(Date.now()-this.startTime)/1e3>this.durationSeconds},this.startTime=Date.now()}}class f{constructor(){this.generateNewId=()=>(f.idCounter++,f.idCounter),this.bounds=new o(0,0,0,0),this.dimensions=new o(0,0,0,0),this.alignement=new p,this.shouldUpdateLayout=!1,this.render=t=>{this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1)},this.triggerUpdateLayout=()=>{this.shouldUpdateLayout=!0},this.isActive=!0,this.activate=t=>{this.renderMethodManipulation.reset();var e=new y(t);this.renderMethodManipulation.add(t=>i=>{e.ended()?(t(i),this.renderMethodManipulation.remove()):(i.save(),i.globalAlpha=e.getValue(),t(i),i.restore())})},this.deactivated=()=>{this.renderMethodManipulation.clear()},this.deactivate=t=>{var e=new y(t);this.renderMethodManipulation.add(t=>i=>{e.ended()?(this.renderMethodManipulation.remove(),this.renderMethodManipulation.clear()):(i.save(),i.globalAlpha=1-e.getValue(),t(i),i.restore())})},this.disableMouseEvents=()=>{this.mouseDown=()=>{},this.mouseUp=()=>{},this.mouseMove=()=>{},this.click=()=>{}},this.id=this.generateNewId(),this.name="object "+this.id}get renderMethodManipulation(){return this._renderMethodManipulation||(this._renderMethodManipulation=new v(this,this.render,t=>this.render=t)),this._renderMethodManipulation}updateLayout(t,e){this.bounds=e,this.shouldUpdateLayout=!1}}f.idCounter=0;class w extends f{constructor(){super(...arguments),this.children=[],this.superRender=this.render,this.render=t=>{this.superRender(t);for(const e of this.children)e.render(t)}}mouseDown(t){for(const e of this.children)e.mouseDown(t)}mouseUp(t){for(const e of this.children)e.mouseUp(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(u||(u={}));class L extends f{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new n,this.click=t=>{this.isEnabled&&this.dimensions.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)}}mouseMove(t){this.isEnabled&&(this.dimensions.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,a.SetCursor(this.name,!0)):(this.isMouseOver=!1,a.SetCursor(this.name,!1)))}mouseDown(t){}mouseUp(t){}}class x{constructor(){this.fontSize=32,this.fontPrefix="",this.fontFamily="Georgia",this.fillStyle="grey",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0,this.getFont=()=>{var t="";return this.fontPrefix&&(t+=this.fontPrefix+" "),t+=this.fontSize+"px "+this.fontFamily}}}class S extends L{constructor(){super(...arguments),this.properties=new x,this.render=t=>{this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.dimensions.x,this.dimensions.y)},this.updateLayout=(t,e)=>{super.updateLayout(t,e),t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top";var i=t.measureText(this.text),s=this.alignement.calculateDimensionsX(e,i.width),n=this.alignement.calculateDimensionsY(e,this.properties.fontSize);this.dimensions=new o(s,n,i.width,this.properties.fontSize)}}}!function(t){t[t.Horizontal=0]="Horizontal",t[t.Vertical=1]="Vertical"}(c||(c={}));class b{constructor(){this.itemSpacing=30,this.orientation=c.Vertical}}class V extends w{constructor(){super(...arguments),this.properties=new b,this.addItem=t=>{t.alignement.horizontalAlign=d.Left,t.alignement.verticalAlign=l.Top,this.children.push(t),this.triggerUpdateLayout()},this.removeItem=t=>{this.children.removeItem(t),this.triggerUpdateLayout()}}get items(){return this.children}updateLayout(t,e){super.updateLayout(t,e);var i=this.alignement.calculateDimensionsX(e,this.dimensions.width),s=this.alignement.calculateDimensionsY(e,this.dimensions.height),n=0,r=0;if(this.properties.orientation==c.Vertical)for(let e=0;e<this.children.length;e++){const a=this.children[e];e>0&&(s+=this.properties.itemSpacing,r+=this.properties.itemSpacing),a.updateLayout(t,new o(i,s,0,0)),s+=a.dimensions.height,r+=a.dimensions.height,n=Math.max(n,a.dimensions.width)}else for(let e=0;e<this.children.length;e++){const a=this.children[e];e>0&&(i+=this.properties.itemSpacing,n+=this.properties.itemSpacing),a.updateLayout(t,new o(i,s,0,0)),i+=a.dimensions.width,n+=a.dimensions.width,r=Math.max(r,a.dimensions.height)}this.dimensions.x==i&&this.dimensions.y==s&&this.dimensions.width==n&&this.dimensions.height==r||(this.dimensions.x=i,this.dimensions.y=s,this.dimensions.height=r,this.dimensions.width=n,this.updateLayout(t,e))}}class M{}M.fillStyle="rgb(0,100,128)",M.mousOver="rgb(0,201,255)",M.light2="rgb(77,216,255)",M.normal="rgb(0,160,204)";class B{constructor(t){this.value=t,this.OnChanged=new r,this.set=t=>{var e=this.value;this.value=t,this.OnChanged.dispatchEvent(e,this.value)},this.get=()=>this.value}}class E{constructor(){this.name=new B("Star Layer X"),this.speed=new B(1*Math.random()+.1),this.starRadiusLowerBorder=new B(.05),this.starRadiusUpperBorder=new B(.55),this.numberOfStars=new B(300)}}class I{constructor(){this.fontSize=40,this.fontPrefix="",this.fontFamily="Georgia",this.fillStyle="blue",this.backgroundFillStyle=void 0,this.getFont=()=>{var t="";return this.fontPrefix&&(t+=this.fontPrefix+" "),t+=this.fontSize+"px "+this.fontFamily}}}class A extends L{constructor(){super(),this.properties=new I,this.render=t=>{t.fillStyle=this.properties.fillStyle,t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.dimensions.x,this.dimensions.y)},this.updateLayout=(t,e)=>{super.updateLayout(t,e),t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top";var i=t.measureText(this.text),s=this.alignement.calculateDimensionsX(e,i.width),n=this.alignement.calculateDimensionsY(e,this.properties.fontSize);this.dimensions=new o(s,n,i.width,this.properties.fontSize)},this.disableMouseEvents()}}class C extends w{constructor(t){super(),this.goBackBtnIconText="",this.onGoBack=new s,this.goBackBtn=new S,this.goBackBtn.properties.fontPrefix="900",this.goBackBtn.properties.fontFamily="'Font Awesome 5 Free'",this.goBackBtn.text=this.goBackBtnIconText,this.goBackBtn.alignement.verticalAlign=l.Top,this.goBackBtn.alignement.horizontalAlign=d.Left,this.goBackBtn.properties.fillStyle=M.fillStyle,this.goBackBtn.properties.mouseOverFillStyle=M.mousOver,this.goBackBtn.clicked.addEventListener(this.onGoBack.dispatchEvent);var e=new A;e.text=t,e.properties.fillStyle=M.normal,this.header=new V,this.header.alignement.horizontalAlign=d.Left,this.header.alignement.verticalAlign=l.Top,this.header.properties.orientation=c.Horizontal,this.header.addItem(this.goBackBtn),this.header.addItem(e),this.children.push(this.header)}updateLayout(t,e){super.updateLayout(t,e),this.header.updateLayout(t,e),this.dimensions=this.header.dimensions}}class k extends w{constructor(t){super(),this.navigationView=new C(t),this.navigationView.alignement.horizontalAlign=d.Left,this.navigationView.alignement.verticalAlign=l.Top,this.children.push(this.navigationView)}}class O{constructor(){this.color1="grey",this.color2="red"}}class T extends L{constructor(){super(),this.properties=new O,this.radius=10,this.minValue=0,this.maxValue=100,this.currentValue=50,this.valueChanged=new n,this.render=t=>{var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle=this.properties.color1,t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke();var s=(this.currentValue-this.minValue)/(this.maxValue-this.minValue);t.fillStyle=this.properties.color2,t.beginPath(),t.arc(e+this.radius+(this.dimensions.width-2*this.radius)*s,i+this.dimensions.height/2,this.radius,0,2*Math.PI),t.closePath(),t.fill()},this.updateLayout=(t,e)=>{super.updateLayout(t,e),this.dimensions=new o(e.x,e.y,200,2*this.radius)},this.mouseDown=t=>{this.dimensions.isHitBy(t.clientX,t.clientY)&&(this.isDragging=!0,this.updateCurrentValue(t))},this.click=t=>{t.ctrlKey&&this.dimensions.isHitBy(t.clientX,t.clientY)&&(this.isDragging=!0,this.updateCurrentValue(t))},this.mouseUp=t=>{this.isDragging=!1}}mouseMove(t){super.mouseMove(t),this.isDragging&&this.updateCurrentValue(t)}updateCurrentValue(t){var e=t.clientX-this.dimensions.x-this.radius;(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),this.currentValue=e,this.valueChanged.dispatchEvent(this.currentValue)}}class F extends L{constructor(){super(),this.properties=new O,this.radius=10,this.minValue=0,this.maxValue=100,this.currentValueLow=25,this.currentValueHigh=75,this.minDiff=.1,this.valuesChanged=new r,this.render=t=>{var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle=this.properties.color1,t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke(),t.fillStyle=this.properties.color2;var s=i+this.dimensions.height/2,n=(this.currentValueLow-this.minValue)/(this.maxValue-this.minValue),r=e+this.radius+(this.dimensions.width-2*this.radius)*n,a=(this.currentValueHigh-this.minValue)/(this.maxValue-this.minValue),o=e+this.radius+(this.dimensions.width-2*this.radius)*a;t.strokeStyle=this.properties.color2,t.lineWidth=2,t.beginPath(),t.moveTo(r,s),t.lineTo(o,s),t.stroke(),t.beginPath(),t.arc(r,s,this.radius,0,2*Math.PI),t.closePath(),t.fill(),t.beginPath(),t.arc(o,s,this.radius,0,2*Math.PI),t.closePath(),t.fill()},this.updateLayout=(t,e)=>{super.updateLayout(t,e),this.dimensions=new o(e.x,e.y,200,2*this.radius)},this.click=t=>{if(t.ctrlKey&&this.dimensions.isHitBy(t.clientX,t.clientY)){var e=this.getClickedValue(t),i=Math.abs(this.currentValueLow-e),s=Math.abs(this.currentValueHigh-e);i==s?e<this.currentValueLow?this.isDraggingLow=!0:this.isDraggingHigh=!0:i>s?this.isDraggingHigh=!0:this.isDraggingLow=!0,this.updateCurrentValues(t)}},this.mouseDown=t=>{if(this.dimensions.isHitBy(t.clientX,t.clientY)){var e=this.getClickedValue(t),i=Math.abs(this.currentValueLow-e),s=Math.abs(this.currentValueHigh-e);i==s?e<this.currentValueLow?this.isDraggingLow=!0:this.isDraggingHigh=!0:i>s?this.isDraggingHigh=!0:this.isDraggingLow=!0,this.updateCurrentValues(t)}},this.mouseUp=t=>{this.isDraggingHigh=!1,this.isDraggingLow=!1}}mouseMove(t){super.mouseMove(t),(this.isDraggingHigh||this.isDraggingLow)&&this.updateCurrentValues(t)}updateCurrentValues(t){var e=this.getClickedValue(t);this.isDraggingLow?e>this.currentValueHigh-this.minDiff&&(e=this.currentValueHigh-this.minDiff):e<this.currentValueLow+this.minDiff&&(e=this.currentValueLow+this.minDiff),this.isDraggingLow?this.currentValueLow=e:this.currentValueHigh=e,this.valuesChanged.dispatchEvent(this.currentValueLow,this.currentValueHigh)}getClickedValue(t){var e=t.clientX-this.dimensions.x-this.radius;return(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),e}}class D extends k{constructor(t){super(t.name.get()),this.starLayer=t,this.round=t=>Math.round(100*t)/100,this.settingsList=new V,this.settingsList.alignement.horizontalAlign=d.Left,this.settingsList.alignement.verticalAlign=l.Top;var e=new A,i=this.createHead("Number of Stars",e,Math.round(t.numberOfStars.get()).toString());this.settingsList.addItem(i);var s=new T;s.minValue=50,s.maxValue=800,s.properties.color1=M.fillStyle,s.properties.color2=M.mousOver,s.currentValue=t.numberOfStars.get(),this.settingsList.addItem(s),s.valueChanged.addEventListener(t=>{this.starLayer.numberOfStars.set(Math.round(t))}),t.numberOfStars.OnChanged.addEventListener((t,i)=>{e.text=Math.round(i).toString()});var n=new A,r=this.createHead("Speed",n,this.round(t.speed.get()).toString());this.settingsList.addItem(r);var a=new T;a.minValue=0,a.maxValue=20,a.properties.color1=M.fillStyle,a.properties.color2=M.mousOver,a.currentValue=t.speed.get(),this.settingsList.addItem(a),a.valueChanged.addEventListener(e=>{t.speed.set(e)}),t.speed.OnChanged.addEventListener((t,e)=>{n.text=this.round(e).toString()});var o=new A,h=this.createHead("Size",o,this.round(t.starRadiusLowerBorder.get())+" - "+this.round(t.starRadiusUpperBorder.get()));this.settingsList.addItem(h);var u=new F;u.minValue=.005,u.maxValue=2,u.currentValueLow=t.starRadiusLowerBorder.get(),u.currentValueHigh=t.starRadiusUpperBorder.get(),u.properties.color1=M.fillStyle,u.properties.color2=M.mousOver,this.settingsList.addItem(u),u.valuesChanged.addEventListener((e,i)=>{t.starRadiusLowerBorder.get()!=e&&t.starRadiusLowerBorder.set(e),t.starRadiusUpperBorder.get()!=i&&t.starRadiusUpperBorder.set(i)}),t.starRadiusLowerBorder.OnChanged.addEventListener((e,i)=>{o.text=this.round(i)+" - "+this.round(t.starRadiusUpperBorder.get())}),t.starRadiusUpperBorder.OnChanged.addEventListener((e,i)=>{o.text=this.round(t.starRadiusLowerBorder.get())+" - "+this.round(i)});var c=new S;c.text="Remove Layer",c.properties.fillStyle=M.fillStyle,c.properties.mouseOverFillStyle=M.mousOver,this.settingsList.addItem(c),c.clicked.addEventListener(t=>{pt.visualizationModel.starLayers.remove(this.starLayer),this.navigationView.onGoBack.dispatchEvent()}),this.children.push(this.settingsList)}createHead(t,e,i){var s=new A;s.text=t,s.properties.fillStyle=M.light2,s.properties.fontSize=22,s.alignement.horizontalAlign=d.Center,s.alignement.verticalAlign=l.Center,e.text=i,e.properties.fillStyle=M.light2,e.properties.fontSize=22;var n=new V;return n.properties.orientation=c.Horizontal,n.addItem(s),n.addItem(e),n}updateLayout(t,e){this.navigationView.updateLayout(t,e);var i=1.5*this.navigationView.dimensions.height;this.settingsList.updateLayout(t,new o(e.x,e.y+i,e.width,e.height-i))}}class R extends k{constructor(){super("Star Layers"),this.layerButtons=[],this.layerList=new V,this.layerList.alignement.horizontalAlign=d.Left,this.layerList.alignement.verticalAlign=l.Top;for(const t of pt.visualizationModel.starLayers.items)this.layerList.addItem(this.createEditLayerBtn(t));var t=new S;t.text="Add Layer",t.properties.fillStyle=M.fillStyle,t.properties.mouseOverFillStyle=M.mousOver,t.clicked.addEventListener(t=>{var e=new E;e.name.set("Stars "+(pt.visualizationModel.starLayers.items.length+1)),pt.visualizationModel.starLayers.add(e)}),this.addLayerBtn=t,this.layerList.addItem(t),this.children.push(this.layerList),pt.visualizationModel.starLayers.onAdd.addEventListener(t=>{this.layerList.removeItem(this.addLayerBtn),this.layerList.addItem(this.createEditLayerBtn(t)),this.layerList.addItem(this.addLayerBtn)}),pt.visualizationModel.starLayers.onRemove.addEventListener(t=>{var e=this.layerList.items.firstOrDefault(e=>e.tag==t);e&&this.layerList.removeItem(e)})}createEditLayerBtn(t){var e=new S;return e.text=t.name.get(),e.tag=t,e.properties.fillStyle=M.fillStyle,e.properties.mouseOverFillStyle=M.mousOver,e.clicked.addEventListener(e=>{this.editLayer(t)}),e}editLayer(t){this.children.removeItem(this.navigationView),this.children.removeItem(this.layerList),this.subView=new D(t),this.subView.navigationView.onGoBack.addEventListener(()=>{this.children.removeItem(this.subView),this.subView=void 0,this.children.push(this.navigationView),this.children.push(this.layerList)}),this.children.push(this.subView),this.triggerUpdateLayout()}updateLayout(t,e){super.updateLayout(t,e),this.navigationView.updateLayout(t,e);var i=1.5*this.navigationView.dimensions.height;this.layerList.updateLayout(t,new o(e.x,e.y+i,e.width,e.height-i)),this.subView&&this.subView.updateLayout(t,e)}}class H extends w{constructor(){super(),this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.settingsIconText="",this.settingsCloseIconText="",this.settingsVisibilityState=u.hidden,this.showHideOverlayClicked=t=>{this.settingsVisibilityState==u.visible?this.setSettingsVisibilityState(u.beforeVisible):this.setSettingsVisibilityState(u.visible)},this.mouseInactivityHandler=()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.settingsVisibilityState==u.beforeVisible&&this.setSettingsVisibilityState(u.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))},this.setSettingsVisibilityState=t=>{switch(t){case u.hidden:this.showHideSettingsBtn.text=this.settingsIconText,this.children.removeItem(this.showHideSettingsBtn),this.settingsVisibilityState=u.hidden;break;case u.beforeVisible:this.showHideSettingsBtn.text=this.settingsIconText,this.lastMoved=Date.now(),this.settingsVisibilityState==u.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.addItemIfNotExists(this.showHideSettingsBtn)),this.settingsVisibilityState==u.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.subView&&(this.settingsList.removeItem(this.subView),this.subView=null,this.settingsList.addItem(this.starLayersBtn)),this.children.removeItemIfExists(this.settingsList)),this.settingsVisibilityState=u.beforeVisible;break;case u.visible:this.settingsVisibilityState==u.beforeVisible&&this.children.push(this.settingsList),this.showHideSettingsBtn.text=this.settingsCloseIconText,this.settingsVisibilityState=u.visible}},this.mouseMove=t=>{this.mouseMoveShowHideSettings(),super.mouseMove(t)},this.click=t=>{this.mouseClickShowHideSettings(),super.click(t)},this.createShowHideSettingsBtn(),this.settingsList=new V,this.settingsList.alignement.horizontalAlign=d.Left,this.settingsList.alignement.verticalAlign=l.Top,this.starLayersBtn=new S,this.starLayersBtn.text="Star Layers",this.starLayersBtn.properties.fillStyle=M.fillStyle,this.starLayersBtn.properties.mouseOverFillStyle=M.mousOver,this.starLayersBtn.clicked.addEventListener(t=>{this.settingsList.removeItem(this.starLayersBtn),this.subView=new R,this.subView.navigationView.onGoBack.addEventListener(()=>{this.settingsList.removeItem(this.subView),this.subView=void 0,this.settingsList.addItem(this.starLayersBtn)}),this.settingsList.addItem(this.subView)}),this.settingsList.addItem(this.starLayersBtn)}createShowHideSettingsBtn(){this.showHideSettingsBtn=new S,this.showHideSettingsBtn.properties.fontPrefix="900",this.showHideSettingsBtn.properties.fontFamily="'Font Awesome 5 Free'",this.showHideSettingsBtn.text=this.settingsIconText,this.showHideSettingsBtn.alignement.verticalAlign=l.Top,this.showHideSettingsBtn.alignement.horizontalAlign=d.Left,this.showHideSettingsBtn.properties.fillStyle=M.fillStyle,this.showHideSettingsBtn.properties.mouseOverFillStyle=M.mousOver,this.showHideSettingsBtn.clicked.addEventListener(this.showHideOverlayClicked),this.children.push(this.showHideSettingsBtn)}mouseClickShowHideSettings(){this.settingsVisibilityState!=u.hidden&&this.settingsVisibilityState!=u.beforeVisible||this.setSettingsVisibilityState(u.beforeVisible)}mouseMoveShowHideSettings(){this.settingsVisibilityState!=u.hidden&&this.settingsVisibilityState!=u.beforeVisible||this.setSettingsVisibilityState(u.beforeVisible)}updateLayout(t,e){super.updateLayout(t,e),this.showHideSettingsBtn.updateLayout(t,e);var i=2*this.showHideSettingsBtn.dimensions.height;this.settingsList&&this.settingsList.updateLayout(t,new o(e.x,e.y+i,e.width,e.height-i)),this.subView&&this.subView.updateLayout(t,new o(e.x,e.y+i,e.width,e.height-i))}}class z{}z.instances={},z.addInstance=(t,e)=>{z.instances[t]=e},z.getInstance=t=>z.instances[t];class P extends w{constructor(){super(),this.playIconText="",this.pauseIconText="",this.stopIconText="",this.nextIconText="",this.previousIconText="";var t=z.getInstance("audio"),e=new V;e.alignement.verticalAlign=l.Bottom,e.alignement.margin.bottom=20,e.properties.orientation=c.Horizontal,this.children.push(e);var i=this.createBtn(this.playIconText,()=>{i.text==this.playIconText?(t.play(),i.text=this.pauseIconText):(t.pause(),i.text=this.playIconText),this.triggerUpdateLayout()});e.addItem(i);var s=this.createBtn(this.stopIconText,()=>{t.stop(),i.text==this.pauseIconText&&(i.text=this.playIconText),this.triggerUpdateLayout()});e.addItem(s);var n=this.createBtn(this.previousIconText,()=>{t.previous()});e.addItem(n);var r=this.createBtn(this.nextIconText,()=>{t.next()});e.addItem(r)}createBtn(t,e){var i=new S;return i.properties.fontPrefix="900",i.properties.fontFamily="'Font Awesome 5 Free'",i.text=t,i.properties.fillStyle=M.fillStyle,i.properties.mouseOverFillStyle=M.mousOver,i.clicked.addEventListener(e),i}updateLayout(t,e){super.updateLayout(t,e);for(const e of this.children)e.updateLayout(t,this.bounds)}}!function(t){t[t.FitAndOverfill=0]="FitAndOverfill",t[t.FitAndSpace=1]="FitAndSpace"}(g||(g={}));class N{constructor(){this.imageScalingMode=g.FitAndSpace,this.scale=1}}class U extends L{constructor(t){super(),this.properties=new N,this.superRender=this.render,this.render=t=>{this.superRender(t),t.drawImage(this.image,this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height),this.isMouseOver&&this.isEnabled&&(t.fillStyle="rgba(255,255,255,0.5)",t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height))},this.image=t}updateLayout(t,e){super.updateLayout(t,e);var i=1,s=this.image.naturalWidth/this.image.naturalHeight>e.width/e.height;switch(this.properties.imageScalingMode){case g.FitAndOverfill:i=s?e.height/this.image.height:e.width/this.image.width;break;case g.FitAndSpace:i=s?e.width/this.image.width:e.height/this.image.height}var n=this.image.naturalWidth*i,r=this.image.naturalHeight*i;this.dimensions.x=this.alignement.calculateDimensionsX(e,n),this.dimensions.y=this.alignement.calculateDimensionsY(e,n),this.dimensions.width=n,this.dimensions.height=r}}U.createFromUrl=t=>new Promise((e,i)=>{var s=new Image;s.src=t,s.onload=()=>{e(new U(s))}});class K extends w{constructor(){super(),this.frequencyIndex=7,this.lowerBorder=.4,this.upperBorder=.9,this.isSongAnimating=!1,this.songChanged=t=>{this.newSongName=t,this.isSongAnimating?setTimeout(()=>{this.newSongName==t&&this.songName.text!=t&&this.songChanged(t)},1e3):(this.isSongAnimating=!0,this.songName.deactivate(.8),setTimeout(()=>{this.songName.text=this.newSongName,this.triggerUpdateLayout(),this.songName.activate(.8),setTimeout(()=>{this.isSongAnimating=!1},900)},900))};var t=z.getInstance("assets"),e=z.getInstance("audio");this.analyser=e.getAnalyser();var i=t.getImage("logo"),s=t.getImage("logo-nova");this.disableMouseEvents();var n=new U(s);n.properties.imageScalingMode=g.FitAndSpace,this.children.push(n);var r=n.render;n.render=t=>{var e=this.analyser.getSpectrum(),i=this.calculateRelDataValue(e[this.frequencyIndex]);t.save(),t.globalAlpha=i,r(t),t.restore()};var a=new U(i);a.properties.imageScalingMode=g.FitAndSpace,this.children.push(a),e.songChanged.addEventListener(this.songChanged),this.songName=new A,this.songName.text=e.currentSongName,this.newSongName=e.currentSongName,this.songName.properties.fontSize=40,this.songName.properties.fillStyle=M.mousOver,this.songName.properties.fontFamily="Georgia",this.songName.alignement.verticalAlignmentRatio=.6,document.x=this.songName,this.children.push(this.songName)}calculateRelDataValue(t){var e=t/255;return e<this.lowerBorder&&(e=this.lowerBorder),e>this.upperBorder&&(e=this.upperBorder),(e-this.lowerBorder)/(this.upperBorder-this.lowerBorder)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class W extends f{constructor(t){super(),this.starLayer=t,this.stars=[],this.sizeChanged=(t,e)=>{var i=t,s=e-i;s<=0&&(s=1e-4);var n=(this.starLayer.starRadiusUpperBorder.get()-this.starLayer.starRadiusLowerBorder.get())/s;for(const t of this.stars)t.r=(t.r-i)*n+this.starLayer.starRadiusLowerBorder.get()},this.numberOfStarsChanged=(t,e)=>{var i=e-this.stars.length;if(i>0)for(let t=0;t<i;t++)this.addStar();else for(let t=0;t<-i;t++){Math.floor(Math.random()*this.stars.length);this.stars.removeItem(this.stars[t])}},this.update=t=>{for(const e of this.stars)e.x+=this.starLayer.speed.get()*t,e.y+=this.starLayer.speed.get()*t,e.x>pt.visualizationModel.width.get()&&(e.x-=pt.visualizationModel.width.get()),e.y>pt.visualizationModel.height.get()&&(e.y-=pt.visualizationModel.height.get())},this.render=t=>{for(const s of this.stars){var e=3*s.r,i=t.createRadialGradient(s.x,s.y,s.r,s.x,s.y,e);i.addColorStop(0,"rgba(255, 255, 255, 0.2)"),i.addColorStop(1,"rgba(255, 255, 255, 0)"),t.fillStyle=i,t.arc(s.x,s.y,e,0,2*Math.PI),t.fill(),t.fillStyle="white",t.beginPath(),t.arc(s.x,s.y,s.r,0,2*Math.PI),t.fill()}},this.tag=t,this.animation=z.getInstance("animation"),this.animation.addUpdateFunction(this.update);for(let e=0;e<t.numberOfStars.get();e++)this.addStar();t.numberOfStars.OnChanged.addEventListener(this.numberOfStarsChanged),t.starRadiusLowerBorder.OnChanged.addEventListener((t,e)=>{this.sizeChanged(t,this.starLayer.starRadiusUpperBorder.get())}),t.starRadiusUpperBorder.OnChanged.addEventListener((t,e)=>{this.sizeChanged(this.starLayer.starRadiusLowerBorder.get(),t)})}addStar(){this.stars.push({x:Math.random()*pt.visualizationModel.width.get(),y:Math.random()*pt.visualizationModel.height.get(),r:Math.random()*(this.starLayer.starRadiusUpperBorder.get()-this.starLayer.starRadiusLowerBorder.get())+this.starLayer.starRadiusLowerBorder.get()})}mouseDown(t){}mouseUp(t){}mouseMove(t){}click(t){}}class X extends w{constructor(){super(),this.starLayerViews=[],this.addStarLayer=t=>{var e=new W(t);this.starLayerViews.push(e),this.children.push(e)},this.removeStarLayer=t=>{var e=this.starLayerViews.firstOrDefault(e=>e.tag==t);e&&(this.starLayerViews.removeItem(e),this.children.removeItem(e))},this.disableMouseEvents(),pt.visualizationModel.starLayers.onAdd.addEventListener(this.addStarLayer),pt.visualizationModel.starLayers.onRemove.addEventListener(this.removeStarLayer)}}class Y extends w{constructor(){super(),this.onLowPerformance=()=>{for(const t of pt.visualizationModel.starLayers.items)t.numberOfStars.set(.9*t.numberOfStars.get())},this.animation=z.getInstance("animation"),this.animation.lowPerformance.addEventListener(this.onLowPerformance),this.loadBackground();var t=new X;this.children.push(t);var e=new K;this.children.push(e);var i=new P;this.children.push(i);var s=new H;this.children.push(s),this.triggerUpdateLayout()}loadBackground(){var t=z.getInstance("assets").getImage("background"),e=new U(t);e.disableMouseEvents(),e.properties.imageScalingMode=g.FitAndOverfill,this.children.push(e)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class G{constructor(){this.updateFunctions=[],this.isRunning=!1,this.performanceWarningThreshold=1.2,this.performanceWarningDelayRuns=8,this.currentPerformanceWarningDelayRun=0,this.lowPerformance=new s,this.addUpdateFunction=t=>{this.updateFunctions.push(t)},this.removeUpdateFunction=t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)},this.setFps=t=>{this.fps=t,this.fpsInterval=1e3/this.fps},this.animationLoop=()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var i=e/1e3;e/this.fpsInterval-1>this.performanceWarningThreshold?(console.log("Warning: low performance"),this.currentPerformanceWarningDelayRun++,this.currentPerformanceWarningDelayRun>this.performanceWarningDelayRuns&&(this.lowPerformance.dispatchEvent(),this.currentPerformanceWarningDelayRun=0)):this.currentPerformanceWarningDelayRun>0&&(this.currentPerformanceWarningDelayRun=0);for(const t of this.updateFunctions)t(i)}},this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class j{constructor(){this.loadFontawesomeFree=()=>this.loadFont("","","900 20px 'Font Awesome 5 Free'"),this.loadFontawesomeBrands=()=>this.loadFont("","","400 20px 'Font Awesome 5 Brands'"),this.countPixels=t=>{var e=0;for(let a=0;a<t.data.length;a+=4){var i=t.data[a],s=t.data[a+1],n=t.data[a+2],r=t.data[a+3];i<50&&s<50&&n<50&&r>.9&&e++}return e},this.getIconPixels=(t,e,i)=>{t.clearRect(0,0,e.width,e.height),t.fillText(i,0,0);var s=t.getImageData(0,0,e.width,e.height);return this.countPixels(s)},this.loadFont=(t,e,i)=>{var s=10;return new Promise((n,r)=>{console.log('loading font "'+i+'"');var a=document.createElement("canvas");a.width=20,a.height=20;var o=a.getContext("2d");o.font=i,o.fillStyle="black",o.textAlign="left",o.textBaseline="top";var h=()=>{var r=this.getIconPixels(o,a,t),d=this.getIconPixels(o,a,e);Math.abs(d-r)>5?(console.log('loaded font "'+i+'"'),n()):0==--s?(console.log("stop loading font after "+s+" retries with 500ms delay"),n()):setTimeout(()=>{h()},500)};h()})}}}class _{constructor(t,e){this.name=t,this.audioCtx=e}}class q extends _{constructor(){super(...arguments),this.getAudioNode=()=>this.analyserNode}reload(){return new Promise((t,e)=>{this.analyserNode||(this.analyserNode=this.audioCtx.createAnalyser()),this.analyserNode.fftSize=32,this.analyserNode.smoothingTimeConstant=.9,this.bufferLength=this.analyserNode.frequencyBinCount,this.dataArray=new Uint8Array(this.bufferLength),t()})}getSpectrum(){return this.analyserNode?(this.analyserNode.getByteFrequencyData(this.dataArray),this.dataArray):new Uint8Array(0)}getWave(){return this.analyserNode?(this.analyserNode.getByteTimeDomainData(this.dataArray),this.dataArray):new Uint8Array(0)}}class J extends _{constructor(){super(...arguments),this.getAudioNode=()=>this.audioCtx.destination}reload(){}}class Q extends _{constructor(t,e,i){super(t,e),this.audioEnded=new s,this.audioEndedEvent=()=>{this.audioEnded.dispatchEvent()},this.getAudioNode=()=>this.source,this.play=()=>{this.audio.play()},this.pause=()=>{this.audio.pause()},this.stop=()=>{this.audio.pause(),this.audio.currentTime=0},this.setUrl=t=>{var e=!this.audio.paused;this.url=t,this.audio.src=t,this.audio.load(),e&&this.audio.play()},this.url=i,this.audio=document.createElement("audio"),this.audio.controls=!0,this.audio.src=this.url,this.audio.addEventListener("ended",this.audioEndedEvent)}reload(){return new Promise((t,e)=>{this.source||(this.source=this.audioCtx.createMediaElementSource(this.audio)),t()})}}class Z{constructor(){this.audioNodes=[],this.addMediaElementSource=(t,e)=>{var i=new Q(t,this.audioCtx,e);return this.audioNodes.push(i),i},this.addAnalyzer=t=>{var e=new q(t,this.audioCtx);return this.audioNodes.push(e),e},this.getAudioGraphNode=t=>this.audioNodes.first(e=>e.name==t),this.audioContextStateChanged=new n,this.documentClick=()=>{"suspended"===this.audioCtx.state&&(this.audioCtx.resume(),document.removeEventListener("click",this.documentClick))},this.audioContextStateChangedEvaluator=()=>{"running"===this.audioCtx.state&&(console.log("audio context state changed"),this.audioCtx.removeEventListener("statechange",this.audioContextStateChangedEvaluator),this.reload().then(()=>{this.audioContextStateChanged.dispatchEvent(this.audioCtx.state)}))},this.reload=()=>new Promise((t,e)=>{console.log("realoading audio graph"),Promise.all(this.audioNodes.map(t=>t.reload())).then(()=>{console.log("reloaded audio graph");for(let t=0;t<this.audioNodes.length;t++){const e=this.audioNodes[t];e.getAudioNode().disconnect(),t<this.audioNodes.length-1?e.getAudioNode().connect(this.audioNodes[t+1].getAudioNode()):e.getAudioNode().connect(this.destinationNode.getAudioNode())}t()})});try{this.audioCtx=new(window.AudioContext||window.webkitAudioContext),this.audioCtx.addEventListener("statechange",this.audioContextStateChangedEvaluator),"suspended"===this.audioCtx.state&&(document.addEventListener("click",this.documentClick),console.log("Audio context is suspended. Click the dom to make it running.")),this.destinationNode=new J("destination",this.audioCtx)}catch(t){throw"It looks like your browser does not support web audio API :("}}}var $=i(0),tt=i.n($),et=i(1),it=i.n(et),st=i(2),nt=i.n(st);class rt{constructor(){this.songs=[["Faint Color",tt.a],["Deep field",it.a],["Drifting into the Atmosphere",nt.a]],this.songChanged=new n,this.reload=()=>this.audioGraph.reload(),this.play=()=>{this.source.play()},this.pause=()=>{this.source.pause()},this.next=()=>{var t=this.songs.map(t=>t[1]).indexOf(this.source.url)+1;t==this.songs.length&&(t=0),this.source.setUrl(this.songs[t][1]),this.songChanged.dispatchEvent(this.songs[t][0])},this.previous=()=>{var t=this.songs.map(t=>t[1]).indexOf(this.source.url)-1;-1==t&&(t=this.songs.length-1),this.source.setUrl(this.songs[t][1]),this.songChanged.dispatchEvent(this.songs[t][0])},this.getAnalyser=()=>this.analyser,this.stop=()=>{this.source.stop()},this.audioGraph=new Z,this.source=this.audioGraph.addMediaElementSource("source",this.songs[0][1]),this.source.audioEnded.addEventListener(this.endedNext()),this.analyser=this.audioGraph.addAnalyzer("analyser")}get currentSongName(){var t=this.songs.map(t=>t[1]).indexOf(this.source.url);return this.songs[t][0]}endedNext(){return()=>{this.next(),this.source.play()}}}class at{constructor(){this.imageAssets=[],this.addImage=(t,e)=>{this.imageAssets.push({name:t,url:e,image:void 0})},this.getImage=t=>{var e=this.imageAssets.firstOrDefault(e=>e.name==t);return e?e.image:void 0},this.load=()=>Promise.all(this.imageAssets.map(t=>new Promise((e,i)=>{if(t.image)e();else{var s=new Image;s.src=t.url,s.onload=()=>{t.image=s,e()}}})))}}var ot=i(3),ht=i.n(ot),dt=i(4),lt=i.n(dt),ut=i(5),ct=i.n(ut);class gt extends w{constructor(){super();var t=new A;t.text="Loading...",t.properties.fillStyle="white",this.children.push(t)}updateLayout(t,e){super.updateLayout(t,e);for(const e of this.children)e.updateLayout(t,this.bounds)}}class mt{constructor(){this.items=[],this.onAdd=new n,this.onRemove=new n,this.add=t=>{this.items.push(t),this.onAdd.dispatchEvent(t)},this.remove=t=>{this.items.removeItem(t),this.onRemove.dispatchEvent(t)}}}class pt{constructor(){this.run=()=>{document.body.style.backgroundColor="black";var t=a.createFullScreen(),e=new h(t),i=new G;i.addUpdateFunction(t.draw),z.addInstance("canvas",t),z.addInstance("stage",e),z.addInstance("animation",i);var s,n=new gt;n.deactivated(),e.setView(n),n.activate(.7),console.log("loading app"),Promise.all([(new j).loadFontawesomeFree(),new Promise((t,e)=>{var i=new rt;i.reload(),z.addInstance("audio",i),t()}),new Promise((t,e)=>{setTimeout(()=>{t()},2e3)}),new Promise((t,e)=>{var i=new at;z.addInstance("assets",i),i.addImage("background",ht.a),i.addImage("logo",lt.a),i.addImage("logo-nova",ct.a),i.load().then(()=>{(s=new Y).deactivated();for(let t=0;t<4;t++){var e=new E;e.name.set("Stars "+(t+1)),pt.visualizationModel.starLayers.add(e)}t()})})]).then(()=>{n.deactivate(.7),setTimeout(()=>{e.setView(s),s.activate(.7)},800)}).catch(t=>{console.log(t),alert(t)})}}}pt.visualizationModel=new class{constructor(t,e){this.starLayers=new mt,this.width=new B(t),this.height=new B(e)}}(window.innerWidth,window.innerHeight);i(6);document.addEventListener("DOMContentLoaded",function(){(new pt).run()},!1),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("service-worker.js").then(t=>{console.log("SW registered: ",t)}).catch(t=>{console.log("SW registration failed: ",t)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,