!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=1)}([function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var s=e(t)+1,i=this.firstOrDefault(t=>e(t)==s);return i||(i=this.first(t=>1==e(t))),i},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,s){"use strict";s.r(e);class i{constructor(){this.drawFunctions=[],this.resize=(()=>{console.log("canvas.resize()"),this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight}),this.draw=(()=>{for(const t of this.drawFunctions)t(this.ctx,this.width,this.height)}),this.addDrawFunction=(t=>{this.drawFunctions.push(t)}),this.removeDrawFunction=(t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)})}get width(){return this.canvas.width}get height(){return this.canvas.height}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new i;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}i.cursorLock=null,i.SetCursor=((t,e)=>{e?(document.body.style.cursor="pointer",i.cursorLock=t):t==i.cursorLock&&(document.body.style.cursor="default",i.cursorLock=null)});class r{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i,this.collidesWith=(t=>{var e=!1,s=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(s=!0):t.y<=this.y&&t.y+t.width>this.y&&(s=!0)),e&&s}),this.isHitBy=((t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height)}}class n{constructor(){this.updateFunctions=[],this.isRunning=!1,this.addUpdateFunction=(t=>{this.updateFunctions.push(t)}),this.removeUpdateFunction=(t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)}),this.setFps=(t=>{this.fps=t,this.fpsInterval=1e3/this.fps}),this.animationLoop=(()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var s=e/1e3;for(const t of this.updateFunctions)t(s)}}),this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(console.log("play"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(console.log("pause"),this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class a{constructor(t){this.canvas=t,this.mousedown=(t=>{this.view&&this.view.mouseDown(t)}),this.mouseup=(t=>{this.view&&this.view.mouseUp(t)}),this.mouseMove=(t=>{this.view&&this.view.mouseMove(t)}),this.click=(t=>{this.view&&this.view.click(t)}),this.render=((t,e,s)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new r(0,0,e,s)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,s),this.view.render(t))}),this.setView=(t=>{this.view=t,this.shouldUpdateLayout=!0}),t.addDrawFunction(this.render),document.addEventListener("mousedown",this.mousedown),document.addEventListener("mouseup",this.mouseup),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("click",this.click)}static create(){var t=i.createFullScreen(),e=new a(t);return(new n).addUpdateFunction(t.draw),e}}class h{constructor(){this.generateNewId=(()=>(h.idCounter++,h.idCounter)),this.bounds=new r(0,0,0,0),this.id=this.generateNewId(),this.name="object "+this.id}}var o,d,u,l;h.idCounter=0,function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(o||(o={})),function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom"}(d||(d={}));class c{constructor(){this.horizontalAlign=o.Center,this.verticalAlign=d.Center}}class y extends h{constructor(){super(...arguments),this.children=[],this.shouldUpdateLayout=!1,this.alignement=new c,this.triggerUpdateLayout=(()=>{this.shouldUpdateLayout=!0})}render(t){this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1);for(const e of this.children)e.render(t)}mouseDown(t){for(const e of this.children)e.mouseDown(t)}mouseUp(t){for(const e of this.children)e.mouseUp(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}class p extends h{constructor(t){super(),this.star=t}mouseDown(t){}mouseUp(t){}render(t){t.fillStyle="white",t.beginPath(),t.arc(this.star.x,this.star.y,this.star.r,0,2*Math.PI),t.fill()}mouseMove(t){throw new Error("Method not implemented.")}click(t){throw new Error("Method not implemented.")}}!function(t){t[t.AddStarLayer=0]="AddStarLayer",t[t.RemoveStarLayer=1]="RemoveStarLayer",t[t.ChangeNumberOfStars=2]="ChangeNumberOfStars",t[t.ChangeSpeed=3]="ChangeSpeed"}(u||(u={}));class g extends y{constructor(t){super(),this.starLayer=t,this.settingsUpdated=(t=>{switch(t){case u.ChangeNumberOfStars:this.updateNumberOfStars()}}),this.updateNumberOfStars=(()=>{this.triggerUpdateLayout()}),A.settingManager.update.addEventListener(this.settingsUpdated),this.triggerUpdateLayout()}updateLayout(t,e){this.children=[];for(const t of this.starLayer.stars)this.children.push(new p(t))}mouseMove(t){}click(t){}}!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(l||(l={}));class m{constructor(){this.state=l.hidden}}class v{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=(t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class w extends h{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new v,this.alignement=new c,this.click=(t=>{this.isEnabled&&this.bounds.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)})}mouseMove(t){this.isEnabled&&(this.bounds.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,i.SetCursor(this.name,!0)):(this.isMouseOver=!1,i.SetCursor(this.name,!1)))}}class f{constructor(){this.fontSize=40,this.fillStyle="black",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0}}class L extends w{constructor(){super(...arguments),this.properties=new f,this.isVisible=!0,this.render=(t=>{this.isVisible&&(this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.bounds.x,this.bounds.y,this.bounds.width,this.bounds.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.fontSize+"px Arial",t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.bounds.x,this.bounds.y))}),this.align=((t,e)=>{t.font=this.properties.fontSize+"px Arial",t.textAlign="left",t.textBaseline="top";var s=t.measureText(this.text),i=new r(0,0,s.width,this.properties.fontSize);switch(this.alignement.horizontalAlign){case o.Left:i.x=e.x;break;case o.Center:i.x=e.x-s.width/2;break;case o.Right:i.x=e.x-s.width}switch(this.alignement.verticalAlign){case d.Top:i.y=e.y;break;case d.Center:i.y=e.y-this.properties.fontSize/2;break;case d.Bottom:i.y=e.y-this.properties.fontSize}this.bounds=i})}mouseDown(t){}mouseUp(t){}}class b{constructor(t,e){this.x=t,this.y=e}}class x{constructor(t,e){this.x=t,this.y=e}}class S extends y{constructor(){super(...arguments),this.spacing=30,this.controls=[],this.layoutViews=[],this.addControl=(t=>{t.alignement=this.alignement,this.controls.push(t),this.children.push(t),this.triggerUpdateLayout()}),this.removeControl=(t=>{this.controls.removeItem(t),this.children.removeItem(t),this.triggerUpdateLayout()}),this.addLayoutView=(t=>{t.alignement=this.alignement,this.layoutViews.push(t),this.children.push(t),this.triggerUpdateLayout()}),this.removeLayoutView=(t=>{this.layoutViews.removeItem(t),this.children.removeItem(t),this.triggerUpdateLayout()})}updateLayout(t,e){var s=0;switch(this.alignement.horizontalAlign){case o.Left:s=e.x;break;case o.Center:s=e.x-e.width/2;break;case o.Right:s=e.x-e.width}this.bounds.x=s;var i=0;switch(this.alignement.verticalAlign){case d.Top:i=e.y;break;case d.Center:i=e.y-e.height/2;break;case d.Bottom:i=e.y-e.height}this.bounds.y=i;var n=0,a=0;for(const e of this.children)if(this.children.indexOf(e)>0&&(i+=this.spacing,a+=this.spacing),this.controls.contains(e)){var h=e;h.align(t,new x(s,i)),i+=h.bounds.height,a+=h.bounds.height,n=Math.max(n,h.bounds.width)}else{if(!this.layoutViews.contains(e))throw new Error("Error: 280420191625");var u=e;u.updateLayout(t,new r(s,i,0,0)),i+=u.bounds.height,a+=h.bounds.height,n=Math.max(n,u.bounds.width)}a==this.bounds.height&&n==this.bounds.width||(this.bounds.height=a,this.bounds.width=n,this.updateLayout(t,new r(e.x,e.y,this.bounds.width,this.bounds.height)))}}class V extends w{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValue=50,this.valueChanged=new v,this.mouseDown=(t=>{this.bounds.isHitBy(t.clientX,t.clientY)&&(this.isDragging=!0,this.updateCurrentValue(t))}),this.mouseUp=(t=>{this.isDragging=!1})}align(t,e){this.bounds=new r(e.x,e.y,200,2*this.radius)}render(t){var e=this.bounds.x,s=this.bounds.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,s+this.bounds.height/2),t.lineTo(e+this.bounds.width-this.radius,s+this.bounds.height/2),t.stroke();var i=(this.currentValue-this.minValue)/(this.maxValue-this.minValue);t.fillStyle="blue",t.beginPath(),t.arc(e+this.radius+(this.bounds.width-2*this.radius)*i,s+this.bounds.height/2,this.radius,0,2*Math.PI),t.closePath(),t.fill()}mouseMove(t){super.mouseMove(t),this.isDragging&&this.updateCurrentValue(t)}updateCurrentValue(t){var e=t.clientX-this.bounds.x-this.radius;(e=e/(this.bounds.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),this.currentValue=e,this.valueChanged.dispatchEvent(this.currentValue)}}class M extends y{constructor(t){super(),this.starLayer=t,this.numberOfStarsChanged=(t=>{A.settingManager.changeNumberOfStars(this.starLayer,Math.round(t))}),this.speedChanged=(t=>{A.settingManager.changeSpeed(this.starLayer,t)}),this.settingsList=new S,this.settingsList.alignement.horizontalAlign=o.Left,this.settingsList.alignement.verticalAlign=d.Top;var e=new L;e.text="Remove Layer",e.properties.fillStyle="white",this.settingsList.addControl(e),this.children.push(e),e.clicked.addEventListener(t=>{A.settingManager.removeStarLayer(this.starLayer)});var s=new V;s.minValue=10,s.maxValue=1e3,s.currentValue=t.stars.length,this.children.push(s),this.settingsList.addControl(s),s.valueChanged.addEventListener(this.numberOfStarsChanged);var i=new V;i.minValue=0,i.maxValue=30,i.currentValue=t.speed,this.children.push(i),this.settingsList.addControl(i),i.valueChanged.addEventListener(this.speedChanged)}updateLayout(t,e){this.settingsList.updateLayout(t,new r(e.x,e.y,0,0))}}class O extends y{constructor(){super(),this.viewModel=new m,this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.layerButtons=[],this.settingsUpdated=(t=>{switch(t){case u.AddStarLayer:for(const t of A.settings.starLayers)if(!this.layerButtons.map(t=>t.tag).contains(t)){this.settingsList.removeControl(this.addLayerBtn);var e=new L;e.text="Edit Layer",e.tag=t,e.properties.fillStyle="white",this.settingsList.addControl(e),this.layerButtons.push(e),e.clicked.addEventListener(e=>{this.toggleShowHideStarLayerView(t)}),this.settingsList.addControl(this.addLayerBtn);break}break;case u.RemoveStarLayer:for(const t of this.layerButtons)if(!A.settings.starLayers.contains(t.tag)){this.settingsList.removeControl(t),this.layerButtons.removeItem(t);break}this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0}}),this.toggleShowHideStarLayerView=(t=>{if(this.detailedStarLayerView)if(this.detailedStarLayerView.starLayer!=t){this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;e=new M(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}else this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;else{var e=new M(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}}),this.showHideOverlayClicked=(t=>{this.viewModel.state==l.visible?this.setState(l.beforeVisible):this.setState(l.visible)}),this.mouseMove=(t=>{this.viewModel.state!=l.hidden&&this.viewModel.state!=l.beforeVisible||this.setState(l.beforeVisible),super.mouseMove(t)}),this.mouseInactivityHandler=(()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.viewModel.state==l.beforeVisible&&this.setState(l.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))}),this.setState=(t=>{switch(t){case l.hidden:this.showOverLayerButton.isVisible=!1,this.viewModel.state=l.hidden;break;case l.beforeVisible:this.lastMoved=Date.now(),this.viewModel.state==l.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.showOverLayerButton.isVisible=!0),this.viewModel.state==l.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.removeItemIfExists(this.settingsList),this.children.removeItemIfExists(this.detailedStarLayerView),this.detailedStarLayerView=void 0),this.viewModel.state=l.beforeVisible;break;case l.visible:this.viewModel.state==l.beforeVisible&&this.children.push(this.settingsList),this.viewModel.state=l.visible}}),this.showOverLayerButton=new L,this.showOverLayerButton.text="Show/Hide Settings",this.showOverLayerButton.properties.fillStyle="green",this.showOverLayerButton.alignement.verticalAlign=d.Top,this.showOverLayerButton.alignement.horizontalAlign=o.Left,this.showOverLayerButton.clicked.addEventListener(this.showHideOverlayClicked),this.showOverLayerButton.properties.backgroundFillStyle="rgba(0, 0, 0, 0.5)",this.children.push(this.showOverLayerButton),this.settingsList=new S,this.settingsList.alignement.horizontalAlign=o.Left,this.settingsList.alignement.verticalAlign=d.Top;var t=new L;t.text="Add Layer",t.properties.fillStyle="white",this.settingsList.addControl(t),t.clicked.addEventListener(t=>{A.settingManager.addStarLayer()}),this.addLayerBtn=t,A.settingManager.update.addEventListener(this.settingsUpdated)}updateLayout(t,e){this.showOverLayerButton.align(t,new b(e.x,e.y)),this.settingsList.updateLayout(t,new r(0,2*this.showOverLayerButton.bounds.height,0,0)),this.detailedStarLayerView&&this.detailedStarLayerView.updateLayout(t,new r(this.settingsList.bounds.x+this.settingsList.bounds.width,2*this.showOverLayerButton.bounds.height,0,0))}}class C{constructor(t){this.starLayer=t,this.update=(t=>{for(const e of this.starLayer.stars)e.x+=this.starLayer.speed*t,e.x>A.settings.width&&(e.x-=A.settings.width)})}}class k extends y{constructor(){super(),this.starLayers=[],this.starAnimators=[],this.appSettingsUpdated=(t=>{switch(t){case u.AddStarLayer:this.addStarLayer();break;case u.RemoveStarLayer:this.removeStarLayer()}}),this.addStarLayer=(()=>{for(const s of A.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==s)){var t=new g(s);this.starLayers.push(t),this.children.splice(0,0,t),this.triggerUpdateLayout();var e=new C(s);this.anim.addUpdateFunction(e.update),this.starAnimators.push(e);break}}),this.removeStarLayer=(()=>{for(const e of this.starLayers)if(null==A.settings.starLayers.firstOrDefault(t=>t==e.starLayer)){var t=this.starAnimators.first(t=>t.starLayer==e.starLayer);this.anim.removeUpdateFunction(t.update),this.starAnimators.removeItem(t),this.children.remove(t=>t==e),this.starLayers.remove(t=>t==e),this.triggerUpdateLayout()}}),this.settingsOverlay=new O,this.children.push(this.settingsOverlay),this.anim=new n,A.settingManager.update.addEventListener(this.appSettingsUpdated)}updateLayout(t,e){for(const s of this.starLayers)s.updateLayout(t,e);this.settingsOverlay.updateLayout(t,e)}}class E{constructor(){this.stars=[],this.speed=20*Math.random()+5}}class A{constructor(){this.run=(()=>{console.log("hi"),document.body.style.backgroundColor="black";var t=a.create(),e=new k;t.setView(e)})}}A.settings=new class{constructor(t,e){this.width=t,this.height=e,this.starLayers=[]}}(window.innerWidth,window.innerHeight),A.settingManager=new class{constructor(){this.update=new v,this.addStarLayer=(()=>{var t=new E;for(let e=0;e<100;e++)t.stars.push({x:Math.random()*A.settings.width,y:Math.random()*A.settings.height,r:2*Math.random()+.05});A.settings.starLayers.push(t),this.update.dispatchEvent(u.AddStarLayer)}),this.removeStarLayer=(t=>{A.settings.starLayers.removeItem(t),this.update.dispatchEvent(u.RemoveStarLayer)}),this.changeNumberOfStars=((t,e)=>{if(e>0){var s=e-t.stars.length;if(s>0)for(let e=0;e<s;e++)t.stars.push({x:Math.random()*A.settings.width,y:Math.random()*A.settings.height,r:2*Math.random()+.05});else if(s<0)for(let e=0;e<-s;e++)t.stars.splice(Math.floor(Math.random()*t.stars.length),1);this.update.dispatchEvent(u.ChangeNumberOfStars)}}),this.changeSpeed=((t,e)=>{t.speed=e,this.update.dispatchEvent(u.ChangeSpeed)})}};s(0);document.addEventListener("DOMContentLoaded",function(){(new A).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,