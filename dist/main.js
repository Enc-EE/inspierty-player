!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=7)}([function(t,e,i){t.exports=i.p+"4548616750b49599e29ad31f27052fc7.mp3"},function(t,e,i){t.exports=i.p+"42e1c91573e0327cd3f17f251e8af2a6.mp3"},function(t,e,i){t.exports=i.p+"f1ceea5d555947c80281f368bfaf8fa8.mp3"},function(t,e,i){t.exports=i.p+"b5599f87dda55c2ca04eb255a9788fa5.png"},function(t,e,i){t.exports=i.p+"dec4bbd246838204460cee765e852465.png"},function(t,e,i){t.exports=i.p+"b78224d2549be6ccf64dc62f3973084e.png"},function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var i=e(t)+1,s=this.firstOrDefault(t=>e(t)==i);return s||(s=this.first(t=>1==e(t))),s},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,i){"use strict";i.r(e);class s{constructor(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s,this.collidesWith=t=>{var e=!1,i=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(i=!0):t.y<=this.y&&t.y+t.width>this.y&&(i=!0)),e&&i},this.isHitBy=(t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height}}class n{constructor(t){this.canvas=t,this.isTouchMode=!1,this.canvasResized=()=>{this.shouldUpdateLayout=!0},this.touchMode=t=>{this.isTouchMode||(this.isTouchMode=!0,document.removeEventListener("mouseup",this.mouseUp),document.removeEventListener("mousemove",this.mouseMove),document.removeEventListener("mousedown",this.mouseDown),document.addEventListener("mousedown",this.mouseMode),document.removeEventListener("touchstart",this.touchMode))},this.mouseMode=t=>{this.isTouchMode&&(this.isTouchMode=!1,document.addEventListener("mouseup",this.mouseUp),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("mousedown",this.mouseDown),document.addEventListener("touchstart",this.touchMode),document.removeEventListener("mousedown",this.mouseMode))},this.mouseDown=t=>{this.view&&this.view.mouseDown({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})},this.mouseUp=t=>{this.view&&this.view.mouseUp({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})},this.mouseMove=t=>{this.view&&this.view.mouseMove({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})},this.click=t=>{this.view&&this.view.click({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})},this.render=(t,e,i)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new s(0,0,e,i)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,i),this.view.render(t))},this.setView=t=>{this.view=t,this.shouldUpdateLayout=!0},t.addDrawFunction(this.render),t.resized.addEventListener(this.canvasResized),document.addEventListener("click",this.click),document.addEventListener("touchstart",this.touchMode),document.addEventListener("mousedown",this.mouseDown),document.addEventListener("mouseup",this.mouseUp),document.addEventListener("mousemove",this.mouseMove)}}var a,r,h,o,d,l;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(a||(a={})),function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom"}(r||(r={}));class u{constructor(){this.top=0,this.right=0,this.bottom=0,this.left=0}}class c{constructor(){this.horizontalAlign=a.Center,this.verticalAlignmentRatio=r.Center,this.margin=new u,this.calculateDimensionsX=(t,e)=>{switch(this.horizontalAlign){case a.Left:return t.x+this.margin.left;case a.Center:return t.x+t.width/2-e/2;case a.Right:return t.x+t.width-e-this.margin.right}},this.calculateDimensionsY=(t,e)=>t.y+t.height*this.verticalAlignmentRatio-e*this.verticalAlignmentRatio+(this.verticalAlignmentRatio>.5?-this.margin.bottom:this.margin.top),this.verticalAlign=r.Center}set verticalAlign(t){switch(t){case r.Bottom:this.verticalAlignmentRatio=1;break;case r.Center:this.verticalAlignmentRatio=.5;break;case r.Top:this.verticalAlignmentRatio=0}}}class m{constructor(t,e,i){this.executer=t,this.setMethod=i,this.methods=[],this.add=t=>{var e=t(this.methods[this.methods.length-1]);this.methods.push(e),this.setMethod(e)},this.remove=()=>{this.methods.pop(),this.setMethod(this.methods[this.methods.length-1])},this.reset=()=>{this.setMethod(this.methods[this.methods.length-1])},this.clear=()=>{this.setMethod(()=>{})},e.bind(this.executer),this.methods.push(e)}}class g{constructor(t){this.durationSeconds=t,this.getValue=()=>{return(Date.now()-this.startTime)/1e3/this.durationSeconds},this.ended=()=>{return(Date.now()-this.startTime)/1e3>this.durationSeconds},this.startTime=Date.now()}}class p{constructor(){this.generateNewId=()=>(p.idCounter++,p.idCounter),this.bounds=new s(0,0,0,0),this.dimensions=new s(0,0,0,0),this.alignement=new c,this.shouldUpdateLayout=!1,this.render=t=>{this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1)},this.triggerUpdateLayout=()=>{this.shouldUpdateLayout=!0},this.isActive=!0,this.activate=t=>{this.renderMethodManipulation.reset();var e=new g(t);this.renderMethodManipulation.add(t=>i=>{e.ended()?(t(i),this.renderMethodManipulation.remove()):(i.save(),i.globalAlpha=e.getValue(),t(i),i.restore())})},this.deactivated=()=>{this.renderMethodManipulation.clear()},this.deactivate=t=>{var e=new g(t);this.renderMethodManipulation.add(t=>i=>{e.ended()?(this.renderMethodManipulation.remove(),this.renderMethodManipulation.clear()):(i.save(),i.globalAlpha=1-e.getValue(),t(i),i.restore())})},this.disableMouseEvents=()=>{this.mouseDown=()=>{},this.mouseUp=()=>{},this.mouseMove=()=>{},this.click=()=>{}},this.id=this.generateNewId(),this.name="object "+this.id}get renderMethodManipulation(){return this._renderMethodManipulation||(this._renderMethodManipulation=new m(this,this.render,t=>this.render=t)),this._renderMethodManipulation}updateLayout(t,e){this.bounds=e,this.shouldUpdateLayout=!1}}p.idCounter=0;class v extends p{constructor(){super(...arguments),this.children=[],this.superRender=this.render,this.render=t=>{this.superRender(t);for(const e of this.children)e.render(t)}}mouseDown(t){for(const e of this.children)e.mouseDown(t)}mouseUp(t){for(const e of this.children)e.mouseUp(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}class y extends p{constructor(t){super(),this.star=t,this.render=t=>{var e=3*this.star.r,i=t.createRadialGradient(this.star.x,this.star.y,this.star.r,this.star.x,this.star.y,e);i.addColorStop(0,"rgba(255, 255, 255, 0.2)"),i.addColorStop(1,"rgba(255, 255, 255, 0)"),t.fillStyle=i,t.arc(this.star.x,this.star.y,e,0,2*Math.PI),t.fill(),t.fillStyle="white",t.beginPath(),t.arc(this.star.x,this.star.y,this.star.r,0,2*Math.PI),t.fill()}}mouseDown(t){}mouseUp(t){}mouseMove(t){throw new Error("Method not implemented.")}click(t){throw new Error("Method not implemented.")}}!function(t){t[t.AddStarLayer=0]="AddStarLayer",t[t.RemoveStarLayer=1]="RemoveStarLayer",t[t.ChangeNumberOfStars=2]="ChangeNumberOfStars",t[t.ChangeSpeed=3]="ChangeSpeed",t[t.ChangeSizes=4]="ChangeSizes"}(h||(h={}));class f extends v{constructor(t){super(),this.starLayer=t,this.settingsUpdated=t=>{switch(t){case h.ChangeNumberOfStars:this.updateNumberOfStars()}},this.updateNumberOfStars=()=>{this.triggerUpdateLayout()},ct.settingManager.update.addEventListener(this.settingsUpdated),this.disableMouseEvents(),this.triggerUpdateLayout()}updateLayout(t,e){this.children=[];for(const t of this.starLayer.stars)this.children.push(new y(t))}mouseMove(t){}click(t){}}!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(o||(o={}));class w{constructor(){this.state=o.hidden}}class L{constructor(){this.listeners=[],this.addEventListener=t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)},this.addEventListenerIfNotExists=t=>{!t||this.listeners.indexOf(t)>=0||this.listeners.push(t)},this.dispatchEvent=()=>{for(let t=0;t<this.listeners.length;t++){(0,this.listeners[t])()}},this.removeEventListener=t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)},this.removeEventListenerIfExists=t=>{!t||this.listeners.indexOf(t)<0||this.listeners.splice(this.listeners.indexOf(t),1)}}}class x{constructor(){this.listeners=[],this.addEventListener=t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)},this.dispatchEvent=t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}},this.removeEventListener=t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)}}}class S{constructor(){this.listeners=[],this.addEventListener=t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)},this.dispatchEvent=(t,e)=>{for(let i=0;i<this.listeners.length;i++){(0,this.listeners[i])(t,e)}},this.removeEventListener=t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)}}}class b{constructor(){this.drawFunctions=[],this.dpr=1,this.dprScalingEnabled=!1,this.enableDprScaling=()=>{this.dprScalingEnabled=!0,this.resize()},this.disableDprScaling=()=>{this.dprScalingEnabled=!1,this.resize()},this.resized=new L,this.resize=()=>{this.dpr=this.dprScalingEnabled&&window.devicePixelRatio||1,this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight,this.resized.dispatchEvent()},this.draw=()=>{this.ctx.save(),this.ctx.scale(this.dpr,this.dpr);for(const t of this.drawFunctions)t(this.ctx,this.width,this.height);this.ctx.restore()},this.addDrawFunction=t=>{this.drawFunctions.push(t)},this.removeDrawFunction=t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)}}get width(){return this.canvas.clientWidth/this.dpr}get height(){return this.canvas.clientHeight/this.dpr}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new b;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}b.cursorLock=null,b.SetCursor=(t,e)=>{e?(document.body.style.cursor="pointer",b.cursorLock=t):t==b.cursorLock&&(document.body.style.cursor="default",b.cursorLock=null)};class M extends p{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new x,this.click=t=>{this.isEnabled&&this.dimensions.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)}}mouseMove(t){this.isEnabled&&(this.dimensions.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,b.SetCursor(this.name,!0)):(this.isMouseOver=!1,b.SetCursor(this.name,!1)))}mouseDown(t){}mouseUp(t){}}class E{constructor(){this.fontSize=40,this.fontPrefix="",this.fontFamily="fontawesome",this.fillStyle="blue",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0,this.getFont=()=>{var t="";return this.fontPrefix&&(t+=this.fontPrefix+" "),t+=this.fontSize+"px "+this.fontFamily}}}class V extends M{constructor(){super(...arguments),this.properties=new E,this.render=t=>{this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.dimensions.x,this.dimensions.y)},this.updateLayout=(t,e)=>{super.updateLayout(t,e),t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top";var i=t.measureText(this.text),n=this.alignement.calculateDimensionsX(e,i.width),a=this.alignement.calculateDimensionsY(e,this.properties.fontSize);this.dimensions=new s(n,a,i.width,this.properties.fontSize)}}}!function(t){t[t.Horizontal=0]="Horizontal",t[t.Vertical=1]="Vertical"}(d||(d={}));class A{constructor(){this.itemSpacing=30,this.orientation=d.Vertical}}class C extends v{constructor(){super(...arguments),this.properties=new A,this.addItem=t=>{t.alignement.horizontalAlign=a.Left,t.alignement.verticalAlign=r.Top,this.children.push(t),this.triggerUpdateLayout()},this.removeItem=t=>{this.children.removeItem(t),this.triggerUpdateLayout()}}updateLayout(t,e){super.updateLayout(t,e);var i=this.alignement.calculateDimensionsX(e,this.dimensions.width),n=this.alignement.calculateDimensionsY(e,this.dimensions.height),a=0,r=0;if(this.properties.orientation==d.Vertical)for(let e=0;e<this.children.length;e++){const h=this.children[e];e>0&&(n+=this.properties.itemSpacing,r+=this.properties.itemSpacing),h.updateLayout(t,new s(i,n,0,0)),n+=h.dimensions.height,r+=h.dimensions.height,a=Math.max(a,h.dimensions.width)}else for(let e=0;e<this.children.length;e++){const h=this.children[e];e>0&&(i+=this.properties.itemSpacing,a+=this.properties.itemSpacing),h.updateLayout(t,new s(i,n,0,0)),i+=h.dimensions.width,a+=h.dimensions.width,r=Math.max(r,h.dimensions.height)}this.dimensions.x==i&&this.dimensions.y==n&&this.dimensions.width==a&&this.dimensions.height==r||(this.dimensions.x=i,this.dimensions.y=n,this.dimensions.height=r,this.dimensions.width=a,this.updateLayout(t,e))}}class I extends M{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValue=50,this.valueChanged=new x,this.render=t=>{var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke();var s=(this.currentValue-this.minValue)/(this.maxValue-this.minValue);t.fillStyle="blue",t.beginPath(),t.arc(e+this.radius+(this.dimensions.width-2*this.radius)*s,i+this.dimensions.height/2,this.radius,0,2*Math.PI),t.closePath(),t.fill()},this.updateLayout=(t,e)=>{super.updateLayout(t,e),this.dimensions=new s(e.x,e.y,200,2*this.radius)},this.mouseDown=t=>{this.dimensions.isHitBy(t.clientX,t.clientY)&&(this.isDragging=!0,this.updateCurrentValue(t))},this.mouseUp=t=>{this.isDragging=!1}}mouseMove(t){super.mouseMove(t),this.isDragging&&this.updateCurrentValue(t)}updateCurrentValue(t){var e=t.clientX-this.dimensions.x-this.radius;(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),this.currentValue=e,this.valueChanged.dispatchEvent(this.currentValue)}}class F extends M{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValueLow=25,this.currentValueHigh=75,this.minDiff=.1,this.valuesChanged=new S,this.render=t=>{var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke(),t.fillStyle="blue";var s=i+this.dimensions.height/2,n=(this.currentValueLow-this.minValue)/(this.maxValue-this.minValue),a=e+this.radius+(this.dimensions.width-2*this.radius)*n,r=(this.currentValueHigh-this.minValue)/(this.maxValue-this.minValue),h=e+this.radius+(this.dimensions.width-2*this.radius)*r;t.strokeStyle="blue",t.lineWidth=2,t.beginPath(),t.moveTo(a,s),t.lineTo(h,s),t.stroke(),t.beginPath(),t.arc(a,s,this.radius,0,2*Math.PI),t.closePath(),t.fill(),t.beginPath(),t.arc(h,s,this.radius,0,2*Math.PI),t.closePath(),t.fill()},this.updateLayout=(t,e)=>{super.updateLayout(t,e),this.dimensions=new s(e.x,e.y,200,2*this.radius)},this.mouseDown=t=>{if(this.dimensions.isHitBy(t.clientX,t.clientY)){var e=this.getClickedValue(t),i=Math.abs(this.currentValueLow-e),s=Math.abs(this.currentValueHigh-e);i==s?e<this.currentValueLow?this.isDraggingLow=!0:this.isDraggingHigh=!0:i>s?this.isDraggingHigh=!0:this.isDraggingLow=!0,this.updateCurrentValues(t)}},this.mouseUp=t=>{this.isDraggingHigh=!1,this.isDraggingLow=!1}}mouseMove(t){super.mouseMove(t),(this.isDraggingHigh||this.isDraggingLow)&&this.updateCurrentValues(t)}updateCurrentValues(t){var e=this.getClickedValue(t);this.isDraggingLow?e>this.currentValueHigh-this.minDiff&&(e=this.currentValueHigh-this.minDiff):e<this.currentValueLow+this.minDiff&&(e=this.currentValueLow+this.minDiff),this.isDraggingLow?this.currentValueLow=e:this.currentValueHigh=e,this.valuesChanged.dispatchEvent(this.currentValueLow,this.currentValueHigh)}getClickedValue(t){var e=t.clientX-this.dimensions.x-this.radius;return(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),e}}class D extends v{constructor(t){super(),this.starLayer=t,this.numberOfStarsChanged=t=>{ct.settingManager.changeNumberOfStars(this.starLayer,Math.round(t))},this.speedChanged=t=>{ct.settingManager.changeSpeed(this.starLayer,t)},this.sizesChanged=(t,e)=>{ct.settingManager.changeSizes(this.starLayer,t,e)},this.settingsList=new C,this.settingsList.alignement.horizontalAlign=a.Left,this.settingsList.alignement.verticalAlign=r.Top;var e=new V;e.text="Remove Layer",e.properties.fillStyle="white",this.settingsList.addItem(e),this.children.push(e),e.clicked.addEventListener(t=>{ct.settingManager.removeStarLayer(this.starLayer)});var i=new I;i.minValue=10,i.maxValue=1e3,i.currentValue=t.stars.length,this.children.push(i),this.settingsList.addItem(i),i.valueChanged.addEventListener(this.numberOfStarsChanged);var s=new I;s.minValue=0,s.maxValue=20,s.currentValue=t.speed,this.children.push(s),this.settingsList.addItem(s),s.valueChanged.addEventListener(this.speedChanged);var n=new F,h=this.starLayer.stars.map(t=>t.r);n.minValue=.001,n.maxValue=2,n.currentValueLow=Math.min(...h),n.currentValueHigh=Math.max(...h),this.children.push(n),this.settingsList.addItem(n),n.valuesChanged.addEventListener(this.sizesChanged)}updateLayout(t,e){this.settingsList.updateLayout(t,new s(e.x,e.y,0,0))}}class k extends v{constructor(){super(),this.viewModel=new w,this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.layerButtons=[],this.settingsIconText="",this.settingsUpdated=t=>{switch(t){case h.AddStarLayer:for(const t of ct.settings.starLayers)if(!this.layerButtons.map(t=>t.tag).contains(t)){this.settingsList.removeItem(this.addLayerBtn);var e=new V;e.text="Edit Layer",e.tag=t,e.properties.fillStyle="white",this.settingsList.addItem(e),this.layerButtons.push(e),e.clicked.addEventListener(e=>{this.toggleShowHideStarLayerView(t)}),this.settingsList.addItem(this.addLayerBtn);break}break;case h.RemoveStarLayer:for(const t of this.layerButtons)if(!ct.settings.starLayers.contains(t.tag)){this.settingsList.removeItem(t),this.layerButtons.removeItem(t);break}this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0}},this.toggleShowHideStarLayerView=t=>{if(this.detailedStarLayerView)if(this.detailedStarLayerView.starLayer!=t){this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;e=new D(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}else this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;else{var e=new D(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}},this.showHideOverlayClicked=t=>{this.viewModel.state==o.visible?this.setState(o.beforeVisible):this.setState(o.visible)},this.mouseMove=t=>{this.viewModel.state!=o.hidden&&this.viewModel.state!=o.beforeVisible||this.setState(o.beforeVisible),super.mouseMove(t)},this.click=t=>{this.viewModel.state!=o.hidden&&this.viewModel.state!=o.beforeVisible||this.setState(o.beforeVisible),super.click(t)},this.mouseInactivityHandler=()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.viewModel.state==o.beforeVisible&&this.setState(o.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))},this.setState=t=>{switch(t){case o.hidden:this.children.removeItem(this.showOverLayerButton),this.viewModel.state=o.hidden;break;case o.beforeVisible:this.lastMoved=Date.now(),this.viewModel.state==o.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.addItemIfNotExists(this.showOverLayerButton)),this.viewModel.state==o.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.removeItemIfExists(this.settingsList),this.children.removeItemIfExists(this.detailedStarLayerView),this.detailedStarLayerView=void 0),this.viewModel.state=o.beforeVisible;break;case o.visible:this.viewModel.state==o.beforeVisible&&this.children.push(this.settingsList),this.viewModel.state=o.visible}},this.showOverLayerButton=new V,this.showOverLayerButton.properties.fontPrefix="900",this.showOverLayerButton.properties.fontFamily="'Font Awesome 5 Free'",this.showOverLayerButton.text=this.settingsIconText,this.showOverLayerButton.alignement.verticalAlign=r.Top,this.showOverLayerButton.alignement.horizontalAlign=a.Left,this.showOverLayerButton.clicked.addEventListener(this.showHideOverlayClicked),this.showOverLayerButton.properties.backgroundFillStyle="rgba(0, 0, 0, 0.5)",this.children.push(this.showOverLayerButton),this.settingsList=new C,this.settingsList.alignement.horizontalAlign=a.Left,this.settingsList.alignement.verticalAlign=r.Top;var t=new V;t.text="Add Layer",t.properties.fillStyle="white",this.settingsList.addItem(t),t.clicked.addEventListener(t=>{ct.settingManager.addStarLayer()}),this.addLayerBtn=t,ct.settingManager.update.addEventListener(this.settingsUpdated)}updateLayout(t,e){super.updateLayout(t,e),this.showOverLayerButton.updateLayout(t,e);var i=2*this.showOverLayerButton.dimensions.height;this.settingsList.updateLayout(t,new s(e.x,e.y+i,e.width,e.height-i)),this.detailedStarLayerView&&this.detailedStarLayerView.updateLayout(t,new s(e.x+this.settingsList.dimensions.width,e.y+i,e.width,e.height-i))}}class O{constructor(t){this.starLayer=t,this.update=t=>{for(const e of this.starLayer.stars)e.x+=this.starLayer.speed*t,e.y+=this.starLayer.speed*t,e.x>ct.settings.width&&(e.x-=ct.settings.width),e.y>ct.settings.height&&(e.y-=ct.settings.height)}}}class N{}N.instances={},N.addInstance=(t,e)=>{N.instances[t]=e},N.getInstance=t=>N.instances[t];class T extends v{constructor(){super(),this.playIconText="",this.pauseIconText="",this.stopIconText="",this.nextIconText="",this.previousIconText="";var t=N.getInstance("audio"),e=new C;e.alignement.verticalAlign=r.Bottom,e.alignement.margin.bottom=20,e.properties.orientation=d.Horizontal,this.children.push(e);var i=new V;i.properties.fontPrefix="900",i.properties.fontFamily="'Font Awesome 5 Free'",i.text=this.playIconText,i.clicked.addEventListener(()=>{i.text==this.playIconText?(t.play(),i.text=this.pauseIconText):(t.pause(),i.text=this.playIconText),this.triggerUpdateLayout()}),e.addItem(i);var s=new V;s.properties.fontPrefix="900",s.properties.fontFamily="'Font Awesome 5 Free'",s.text=this.stopIconText,s.clicked.addEventListener(()=>{t.stop(),i.text==this.pauseIconText&&(i.text=this.playIconText),this.triggerUpdateLayout()}),e.addItem(s);var n=new V;n.properties.fontPrefix="900",n.properties.fontFamily="'Font Awesome 5 Free'",n.text=this.previousIconText,n.clicked.addEventListener(()=>{t.previous()}),e.addItem(n);var a=new V;a.properties.fontPrefix="900",a.properties.fontFamily="'Font Awesome 5 Free'",a.text=this.nextIconText,a.clicked.addEventListener(()=>{t.next()}),e.addItem(a)}updateLayout(t,e){super.updateLayout(t,e);for(const e of this.children)e.updateLayout(t,this.bounds)}}!function(t){t[t.FitAndOverfill=0]="FitAndOverfill",t[t.FitAndSpace=1]="FitAndSpace"}(l||(l={}));class P{constructor(){this.imageScalingMode=l.FitAndSpace,this.scale=1}}class U extends M{constructor(t){super(),this.properties=new P,this.superRender=this.render,this.render=t=>{this.superRender(t),t.drawImage(this.image,this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height),this.isMouseOver&&this.isEnabled&&(t.fillStyle="rgba(255,255,255,0.5)",t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height))},this.image=t}updateLayout(t,e){super.updateLayout(t,e);var i=1,s=this.image.naturalWidth/this.image.naturalHeight>e.width/e.height;switch(this.properties.imageScalingMode){case l.FitAndOverfill:i=s?e.height/this.image.height:e.width/this.image.width;break;case l.FitAndSpace:i=s?e.width/this.image.width:e.height/this.image.height}var n=this.image.naturalWidth*i,a=this.image.naturalHeight*i;this.dimensions.x=this.alignement.calculateDimensionsX(e,n),this.dimensions.y=this.alignement.calculateDimensionsY(e,n),this.dimensions.width=n,this.dimensions.height=a}}U.createFromUrl=t=>new Promise((e,i)=>{var s=new Image;s.src=t,s.onload=()=>{e(new U(s))}});class B extends v{constructor(){super();var t=N.getInstance("assets").getImage("background"),e=new U(t);e.disableMouseEvents(),e.properties.imageScalingMode=l.FitAndOverfill,this.children.push(e)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class R{constructor(){this.fontSize=40,this.fontPrefix="",this.fontFamily="fontawesome",this.fillStyle="blue",this.backgroundFillStyle=void 0,this.getFont=()=>{var t="";return this.fontPrefix&&(t+=this.fontPrefix+" "),t+=this.fontSize+"px "+this.fontFamily}}}class z extends M{constructor(){super(),this.properties=new R,this.render=t=>{t.fillStyle=this.properties.fillStyle,t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.dimensions.x,this.dimensions.y)},this.updateLayout=(t,e)=>{super.updateLayout(t,e),t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top";var i=t.measureText(this.text),n=this.alignement.calculateDimensionsX(e,i.width),a=this.alignement.calculateDimensionsY(e,this.properties.fontSize);this.dimensions=new s(n,a,i.width,this.properties.fontSize)},this.disableMouseEvents()}}class H extends v{constructor(){super(),this.frequencyIndex=7,this.lowerBorder=.4,this.upperBorder=.9,this.isSongAnimating=!1,this.songChanged=t=>{this.newSongName=t,this.isSongAnimating?setTimeout(()=>{this.newSongName==t&&this.songName.text!=t&&this.songChanged(t)},1e3):(this.isSongAnimating=!0,this.songName.deactivate(.8),setTimeout(()=>{this.songName.text=this.newSongName,this.triggerUpdateLayout(),this.songName.activate(.8),setTimeout(()=>{this.isSongAnimating=!1},900)},900))};var t=N.getInstance("assets"),e=N.getInstance("audio");this.analyser=e.getAnalyser();var i=t.getImage("logo"),s=t.getImage("logo-nova");this.disableMouseEvents();var n=new U(s);n.properties.imageScalingMode=l.FitAndSpace,this.children.push(n);var a=n.render;n.render=t=>{var e=this.analyser.getSpectrum(),i=this.calculateRelDataValue(e[this.frequencyIndex]);t.save(),t.globalAlpha=i,a(t),t.restore()};var r=new U(i);r.properties.imageScalingMode=l.FitAndSpace,this.children.push(r),e.songChanged.addEventListener(this.songChanged),this.songName=new z,this.songName.text=e.currentSongName,this.newSongName=e.currentSongName,this.songName.properties.fontSize=30,this.songName.properties.fillStyle="blue",this.songName.properties.fontFamily="Operetta",this.songName.alignement.verticalAlignmentRatio=.6,document.x=this.songName,this.children.push(this.songName)}calculateRelDataValue(t){var e=t/255;return e<this.lowerBorder&&(e=this.lowerBorder),e>this.upperBorder&&(e=this.upperBorder),(e-this.lowerBorder)/(this.upperBorder-this.lowerBorder)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class W extends v{constructor(){super(),this.starLayers=[],this.starAnimators=[],this.onLowPerformance=()=>{for(const t of this.starLayers)ct.settingManager.changeNumberOfStars(t.starLayer,Math.round(.9*t.starLayer.stars.length))},this.appSettingsUpdated=t=>{switch(t){case h.AddStarLayer:this.addStarLayer();break;case h.RemoveStarLayer:this.removeStarLayer()}},this.addStarLayer=()=>{for(const i of ct.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==i)){var t=new f(i);this.starLayers.push(t),this.children.splice(1,0,t),this.triggerUpdateLayout();var e=new O(i);this.animation.addUpdateFunction(e.update),this.starAnimators.push(e);break}},this.removeStarLayer=()=>{for(const e of this.starLayers)if(null==ct.settings.starLayers.firstOrDefault(t=>t==e.starLayer)){var t=this.starAnimators.first(t=>t.starLayer==e.starLayer);this.animation.removeUpdateFunction(t.update),this.starAnimators.removeItem(t),this.children.remove(t=>t==e),this.starLayers.remove(t=>t==e),this.triggerUpdateLayout()}},this.animation=N.getInstance("animation"),this.animation.lowPerformance.addEventListener(this.onLowPerformance),ct.settingManager.update.addEventListener(this.appSettingsUpdated);var t=new B;this.children.push(t),document.testit=t;var e=new T;this.children.push(e);var i=new H;this.children.push(i);var s=new k;this.children.push(s),this.triggerUpdateLayout()}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class K{constructor(){this.stars=[],this.speed=1*Math.random()+.1}}class X{constructor(){this.updateFunctions=[],this.isRunning=!1,this.performanceWarningThreshold=1.2,this.performanceWarningDelayRuns=8,this.currentPerformanceWarningDelayRun=0,this.lowPerformance=new L,this.addUpdateFunction=t=>{this.updateFunctions.push(t)},this.removeUpdateFunction=t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)},this.setFps=t=>{this.fps=t,this.fpsInterval=1e3/this.fps},this.animationLoop=()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var i=e/1e3;e/this.fpsInterval-1>this.performanceWarningThreshold?(console.log("Warning: low performance"),this.currentPerformanceWarningDelayRun++,this.currentPerformanceWarningDelayRun>this.performanceWarningDelayRuns&&(this.lowPerformance.dispatchEvent(),this.currentPerformanceWarningDelayRun=0)):this.currentPerformanceWarningDelayRun>0&&(this.currentPerformanceWarningDelayRun=0);for(const t of this.updateFunctions)t(i)}},this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class Y{constructor(){this.loadFontawesomeFree=()=>this.loadFont("","","900 20px 'Font Awesome 5 Free'"),this.loadFontawesomeBrands=()=>this.loadFont("","","400 20px 'Font Awesome 5 Brands'"),this.countPixels=t=>{var e=0;for(let r=0;r<t.data.length;r+=4){var i=t.data[r],s=t.data[r+1],n=t.data[r+2],a=t.data[r+3];i<50&&s<50&&n<50&&a>.9&&e++}return e},this.getIconPixels=(t,e,i)=>{t.clearRect(0,0,e.width,e.height),t.fillText(i,0,0);var s=t.getImageData(0,0,e.width,e.height);return this.countPixels(s)},this.loadFont=(t,e,i)=>{var s=10;return new Promise((n,a)=>{console.log('loading font "'+i+'"');var r=document.createElement("canvas");r.width=20,r.height=20;var h=r.getContext("2d");h.font=i,h.fillStyle="black",h.textAlign="left",h.textBaseline="top";var o=()=>{var a=this.getIconPixels(h,r,t),d=this.getIconPixels(h,r,e);Math.abs(d-a)>5?(console.log('loaded font "'+i+'"'),n()):0==--s?(console.log("stop loading font after "+s+" retries with 500ms delay"),n()):setTimeout(()=>{o()},500)};o()})}}}class j{constructor(t,e){this.name=t,this.audioCtx=e}}class _ extends j{constructor(){super(...arguments),this.getAudioNode=()=>this.analyserNode}reload(){return new Promise((t,e)=>{this.analyserNode||(this.analyserNode=this.audioCtx.createAnalyser()),this.analyserNode.fftSize=32,this.analyserNode.smoothingTimeConstant=.9,this.bufferLength=this.analyserNode.frequencyBinCount,this.dataArray=new Uint8Array(this.bufferLength),t()})}getSpectrum(){return this.analyserNode?(this.analyserNode.getByteFrequencyData(this.dataArray),this.dataArray):new Uint8Array(0)}getWave(){return this.analyserNode?(this.analyserNode.getByteTimeDomainData(this.dataArray),this.dataArray):new Uint8Array(0)}}class G extends j{constructor(){super(...arguments),this.getAudioNode=()=>this.audioCtx.destination}reload(){}}class q extends j{constructor(t,e,i){super(t,e),this.audioEnded=new L,this.audioEndedEvent=()=>{this.audioEnded.dispatchEvent()},this.getAudioNode=()=>this.source,this.play=()=>{this.audio.play()},this.pause=()=>{this.audio.pause()},this.stop=()=>{this.audio.pause(),this.audio.currentTime=0},this.setUrl=t=>{var e=!this.audio.paused;this.url=t,this.audio.src=t,this.audio.load(),e&&this.audio.play()},this.url=i,this.audio=document.createElement("audio"),this.audio.controls=!0,this.audio.src=this.url,this.audio.addEventListener("ended",this.audioEndedEvent)}reload(){return new Promise((t,e)=>{this.source||(this.source=this.audioCtx.createMediaElementSource(this.audio)),t()})}}class J{constructor(){this.audioNodes=[],this.addMediaElementSource=(t,e)=>{var i=new q(t,this.audioCtx,e);return this.audioNodes.push(i),i},this.addAnalyzer=t=>{var e=new _(t,this.audioCtx);return this.audioNodes.push(e),e},this.getAudioGraphNode=t=>this.audioNodes.first(e=>e.name==t),this.audioContextStateChanged=new x,this.documentClick=()=>{"suspended"===this.audioCtx.state&&(this.audioCtx.resume(),document.removeEventListener("click",this.documentClick))},this.audioContextStateChangedEvaluator=()=>{"running"===this.audioCtx.state&&(console.log("audio context state changed"),this.audioCtx.removeEventListener("statechange",this.audioContextStateChangedEvaluator),this.reload().then(()=>{this.audioContextStateChanged.dispatchEvent(this.audioCtx.state)}))},this.reload=()=>new Promise((t,e)=>{console.log("realoading audio graph"),Promise.all(this.audioNodes.map(t=>t.reload())).then(()=>{console.log("reloaded audio graph");for(let t=0;t<this.audioNodes.length;t++){const e=this.audioNodes[t];e.getAudioNode().disconnect(),t<this.audioNodes.length-1?e.getAudioNode().connect(this.audioNodes[t+1].getAudioNode()):e.getAudioNode().connect(this.destinationNode.getAudioNode())}t()})});try{this.audioCtx=new(window.AudioContext||window.webkitAudioContext),this.audioCtx.addEventListener("statechange",this.audioContextStateChangedEvaluator),"suspended"===this.audioCtx.state&&(document.addEventListener("click",this.documentClick),console.log("Audio context is suspended. Click the dom to make it running.")),this.destinationNode=new G("destination",this.audioCtx)}catch(t){throw"It looks like your browser does not support web audio API :("}}}var Q=i(0),Z=i.n(Q),$=i(1),tt=i.n($),et=i(2),it=i.n(et);class st{constructor(){this.songs=[["Faint Color",Z.a],["Deep field",tt.a],["Drifting into the Atmosphere",it.a]],this.songChanged=new x,this.reload=()=>this.audioGraph.reload(),this.play=()=>{this.source.play()},this.pause=()=>{this.source.pause()},this.next=()=>{var t=this.songs.map(t=>t[1]).indexOf(this.source.url)+1;t==this.songs.length&&(t=0),this.source.setUrl(this.songs[t][1]),this.songChanged.dispatchEvent(this.songs[t][0])},this.previous=()=>{var t=this.songs.map(t=>t[1]).indexOf(this.source.url)-1;-1==t&&(t=this.songs.length-1),this.source.setUrl(this.songs[t][1]),this.songChanged.dispatchEvent(this.songs[t][0])},this.getAnalyser=()=>this.analyser,this.stop=()=>{this.source.stop()},this.audioGraph=new J,this.source=this.audioGraph.addMediaElementSource("source",this.songs[0][1]),this.source.audioEnded.addEventListener(this.endedNext()),this.analyser=this.audioGraph.addAnalyzer("analyser")}get currentSongName(){var t=this.songs.map(t=>t[1]).indexOf(this.source.url);return this.songs[t][0]}endedNext(){return()=>{this.next(),this.source.play()}}}class nt{constructor(){this.imageAssets=[],this.addImage=(t,e)=>{this.imageAssets.push({name:t,url:e,image:void 0})},this.getImage=t=>{var e=this.imageAssets.firstOrDefault(e=>e.name==t);return e?e.image:void 0},this.load=()=>Promise.all(this.imageAssets.map(t=>new Promise((e,i)=>{if(t.image)e();else{var s=new Image;s.src=t.url,s.onload=()=>{t.image=s,e()}}})))}}var at=i(3),rt=i.n(at),ht=i(4),ot=i.n(ht),dt=i(5),lt=i.n(dt);class ut extends v{constructor(){super();var t=new z;t.text="Loading...",t.properties.fillStyle="white",this.children.push(t)}updateLayout(t,e){super.updateLayout(t,e);for(const e of this.children)e.updateLayout(t,this.bounds)}}class ct{constructor(){this.run=()=>{document.body.style.backgroundColor="black";var t=b.createFullScreen(),e=new n(t),i=new X;i.addUpdateFunction(t.draw),N.addInstance("canvas",t),N.addInstance("stage",e),N.addInstance("animation",i);var s,a=new ut;a.deactivated(),e.setView(a),a.activate(.7),console.log("loading app"),Promise.all([(new Y).loadFontawesomeFree(),new Promise((t,e)=>{var i=new st;i.reload(),N.addInstance("audio",i),t()}),new Promise((t,e)=>{setTimeout(()=>{t()},2e3)}),new Promise((t,e)=>{var i=new nt;N.addInstance("assets",i),i.addImage("background",rt.a),i.addImage("logo",ot.a),i.addImage("logo-nova",lt.a),i.load().then(()=>{(s=new W).deactivated(),ct.settingManager.addStarLayer(),ct.settingManager.addStarLayer(),ct.settingManager.addStarLayer(),ct.settingManager.addStarLayer(),t()})})]).then(()=>{a.deactivate(.7),setTimeout(()=>{e.setView(s),s.activate(.7)},800)}).catch(t=>{console.log(t),alert(t)})}}}ct.settings=new class{constructor(t,e){this.width=t,this.height=e,this.starLayers=[]}}(window.innerWidth,window.innerHeight),ct.settingManager=new class{constructor(){this.update=new x,this.addStarLayer=()=>{var t=new K;for(let e=0;e<300;e++)t.stars.push({x:Math.random()*ct.settings.width,y:Math.random()*ct.settings.height,r:.5*Math.random()+.05});ct.settings.starLayers.push(t),this.update.dispatchEvent(h.AddStarLayer)},this.removeStarLayer=t=>{ct.settings.starLayers.removeItem(t),this.update.dispatchEvent(h.RemoveStarLayer)},this.changeNumberOfStars=(t,e)=>{if(e>0){var i=e-t.stars.length;if(i>0)for(let e=0;e<i;e++){var s=t.stars.map(t=>t.r),n=Math.min(...s),a=Math.max(...s);t.stars.push({x:Math.random()*ct.settings.width,y:Math.random()*ct.settings.height,r:Math.random()*(a-n)+n})}else if(i<0)for(let e=0;e<-i;e++)t.stars.splice(Math.floor(Math.random()*t.stars.length),1);this.update.dispatchEvent(h.ChangeNumberOfStars)}},this.changeSpeed=(t,e)=>{t.speed=e,this.update.dispatchEvent(h.ChangeSpeed)},this.changeSizes=(t,e,i)=>{var s=t.stars.map(t=>t.r),n=Math.min(...s),a=Math.max(...s)-n;a<=0&&(a=1e-4);for(const s of t.stars)s.r=(s.r-n)/a*(i-e)+e;this.update.dispatchEvent(h.ChangeSpeed)}}};i(6);document.addEventListener("DOMContentLoaded",function(){(new ct).run()},!1),"serviceWorker"in navigator&&window.addEventListener("load",()=>{navigator.serviceWorker.register("service-worker.js").then(t=>{console.log("SW registered: ",t)}).catch(t=>{console.log("SW registration failed: ",t)})})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,