!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=1)}([function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var s=e(t)+1,i=this.firstOrDefault(t=>e(t)==s);return i||(i=this.first(t=>1==e(t))),i},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,s){"use strict";s.r(e);class i{constructor(){this.drawFunctions=[],this.resize=(()=>{console.log("canvas.resize()"),this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight}),this.draw=(()=>{for(const t of this.drawFunctions)t(this.ctx,this.width,this.height)}),this.addDrawFunction=(t=>{this.drawFunctions.push(t)}),this.removeDrawFunction=(t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)})}get width(){return this.canvas.width}get height(){return this.canvas.height}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new i;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}i.cursorLock=null,i.SetCursor=((t,e)=>{e?(document.body.style.cursor="pointer",i.cursorLock=t):t==i.cursorLock&&(document.body.style.cursor="default",i.cursorLock=null)});class r{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i,this.collidesWith=(t=>{var e=!1,s=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(s=!0):t.y<=this.y&&t.y+t.width>this.y&&(s=!0)),e&&s}),this.isHitBy=((t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height)}}class n{constructor(){this.updateFunctions=[],this.isRunning=!1,this.addUpdateFunction=(t=>{this.updateFunctions.push(t)}),this.removeUpdateFunction=(t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)}),this.setFps=(t=>{this.fps=t,this.fpsInterval=1e3/this.fps}),this.animationLoop=(()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var s=e/1e3;for(const t of this.updateFunctions)t(s)}}),this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(console.log("play"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(console.log("pause"),this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class o{constructor(t){this.canvas=t,this.mouseMove=(t=>{this.view.mouseMove(t)}),this.click=(t=>{this.view&&this.view.click(t)}),this.render=((t,e,s)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new r(0,0,e,s)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,s),this.view.render(t))}),this.setView=(t=>{this.view=t,this.shouldUpdateLayout=!0}),t.addDrawFunction(this.render),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("click",this.click)}static create(){var t=i.createFullScreen(),e=new o(t);return(new n).addUpdateFunction(t.draw),e}}class a{constructor(){this.generateNewId=(()=>(a.idCounter++,a.idCounter)),this.bounds=new r(0,0,0,0),this.id=this.generateNewId(),this.name="object "+this.id}}a.idCounter=0;class h extends a{constructor(){super(...arguments),this.children=[],this.shouldUpdateLayout=!1,this.triggerUpdateLayout=(()=>{this.shouldUpdateLayout=!0})}render(t){this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1);for(const e of this.children)e.render(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}class d extends a{constructor(t){super(),this.star=t}render(t){t.fillStyle="white",t.beginPath(),t.arc(this.star.x,this.star.y,this.star.r,0,2*Math.PI),t.fill()}mouseMove(t){throw new Error("Method not implemented.")}click(t){throw new Error("Method not implemented.")}}class l extends h{constructor(t){super(),this.starLayer=t,this.triggerUpdateLayout()}updateLayout(t,e){for(const t of this.starLayer.stars)this.children.push(new d(t))}mouseMove(t){}click(t){}}var c,u;!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(c||(c={}));class y{constructor(){this.state=c.hidden}}class p{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=(t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class v extends a{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new p,this.mouseMove=(t=>{this.isEnabled&&(this.bounds.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,i.SetCursor(this.name,!0)):(this.isMouseOver=!1,i.SetCursor(this.name,!1)))}),this.click=(t=>{this.isEnabled&&this.bounds.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)})}}class f{constructor(){this.fontSize=40,this.fillStyle="black",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0}}class w extends v{constructor(){super(...arguments),this.properties=new f,this.isVisible=!0,this.horizontalAlign="center",this.verticalAlign="center",this.render=(t=>{this.isVisible&&(this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.bounds.x,this.bounds.y,this.bounds.width,this.bounds.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.fontSize+"px Arial",t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.bounds.x,this.bounds.y))}),this.align=((t,e)=>{t.font=this.properties.fontSize+"px Arial",t.textAlign="left",t.textBaseline="top";var s=t.measureText(this.text),i=new r(0,0,s.width,this.properties.fontSize);switch(this.horizontalAlign){case"left":i.x=e.x;break;case"center":i.x=e.x-s.width/2;break;case"right":i.x=e.x-s.width}switch(this.verticalAlign){case"top":i.y=e.y;break;case"center":i.y=e.y-this.properties.fontSize/2;break;case"bottom":i.y=e.y-this.properties.fontSize}this.bounds=i})}}class m{constructor(t,e){this.x=t,this.y=e}}class g{constructor(t,e){this.x=t,this.y=e}}class L extends h{constructor(){super(...arguments),this.spacing=30}get items(){return this.children}set items(t){this.children=t}updateLayout(t,e){var s=this.items.length;if(s>0){var i=e.width/2;for(let n=0;n<s;n++){var r=e.height/2-this.spacing*(s-1)/2+n*this.spacing;this.items[n].align(t,new g(i,r))}}}}!function(t){t[t.AddStarLayer=0]="AddStarLayer",t[t.RemoveStarLayer=1]="RemoveStarLayer"}(u||(u={}));class b extends h{constructor(){super(),this.viewModel=new y,this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.settingsUpdated=(t=>{switch(t){case u.AddStarLayer:case u.RemoveStarLayer:this.updateSettings()}}),this.showHideOverlayClicked=(t=>{this.viewModel.state==c.visible?this.setState(c.beforeVisible):this.setState(c.visible)}),this.mouseMove=(t=>{this.viewModel.state!=c.hidden&&this.viewModel.state!=c.beforeVisible||this.setState(c.beforeVisible),super.mouseMove(t)}),this.mouseInactivityHandler=(()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.viewModel.state==c.beforeVisible&&this.setState(c.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))}),this.setState=(t=>{switch(t){case c.hidden:this.showOverLayerButton.isVisible=!1,this.viewModel.state=c.hidden;break;case c.beforeVisible:this.lastMoved=Date.now(),this.viewModel.state==c.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.showOverLayerButton.isVisible=!0),this.viewModel.state==c.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.removeItemIfExists(this.settingsList)),this.viewModel.state=c.beforeVisible;break;case c.visible:this.viewModel.state==c.beforeVisible&&(this.children.push(this.settingsList),this.updateSettings()),this.viewModel.state=c.visible}}),this.showOverLayerButton=new w,this.showOverLayerButton.text="Show/Hide Settings",this.showOverLayerButton.properties.fillStyle="green",this.showOverLayerButton.verticalAlign="top",this.showOverLayerButton.horizontalAlign="left",this.showOverLayerButton.clicked.addEventListener(this.showHideOverlayClicked),this.showOverLayerButton.properties.backgroundFillStyle="rgba(0, 0, 0, 0.5)",this.children.push(this.showOverLayerButton),this.settingsList=new L;var t=new w;t.properties.fillStyle="white",this.settingsList.items.push(t),O.settingManager.update.addEventListener(this.settingsUpdated)}updateLayout(t,e){this.showOverLayerButton.align(t,new m(e.x,e.y)),this.settingsList.updateLayout(t,new r(100,100,400,400))}updateSettings(){this.settingsList.items=[];for(const e of O.settings.starLayers){var t=new w;t.text="Remove Layer",t.tag=e,t.properties.fillStyle="white",this.settingsList.items.push(t),t.clicked.addEventListener(t=>{O.settingManager.removeStarLayer(e)})}var e=new w;e.text="Add Layer",e.properties.fillStyle="white",this.settingsList.items.push(e),e.clicked.addEventListener(t=>{O.settingManager.addStarLayer()}),this.triggerUpdateLayout()}}class x{constructor(t){this.starLayer=t,this.update=(t=>{for(const e of this.starLayer.stars)e.x+=this.starLayer.speed*t,e.x>O.settings.width&&(e.x-=O.settings.width)})}}class S extends h{constructor(){super(),this.starLayers=[],this.starAnimators=[],this.appSettingsUpdated=(t=>{switch(t){case u.AddStarLayer:this.addStarLayer();break;case u.RemoveStarLayer:this.removeStarLayer()}}),this.addStarLayer=(()=>{for(const s of O.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==s)){var t=new l(s);this.starLayers.push(t),this.children.splice(0,0,t),this.triggerUpdateLayout();var e=new x(s);this.anim.addUpdateFunction(e.update),this.starAnimators.push(e);break}}),this.removeStarLayer=(()=>{for(const s of O.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==s)){var t=this.starLayers.first(t=>t.starLayer==s);this.children.remove(e=>e==t),this.starLayers.remove(e=>e==t),this.triggerUpdateLayout();var e=this.starAnimators.first(t=>t.starLayer==s);this.anim.removeUpdateFunction(e.update),this.starAnimators.removeItem(e)}}),this.settingsOverlay=new b,this.children.push(this.settingsOverlay),this.anim=new n,O.settingManager.update.addEventListener(this.appSettingsUpdated)}updateLayout(t,e){for(const s of this.starLayers)s.updateLayout(t,e);this.settingsOverlay.updateLayout(t,e)}}class M{constructor(){this.stars=[],this.speed=20*Math.random()+5}}class O{constructor(){this.run=(()=>{console.log("hi"),document.body.style.backgroundColor="black";var t=o.create(),e=new S;t.setView(e)})}}O.settings=new class{constructor(t,e){this.width=t,this.height=e,this.starLayers=[]}}(window.innerWidth,window.innerHeight),O.settingManager=new class{constructor(){this.update=new p,this.addStarLayer=(()=>{var t=new M;for(let e=0;e<100;e++)t.stars.push({x:Math.random()*O.settings.width,y:Math.random()*O.settings.height,r:2*Math.random()+.05});O.settings.starLayers.push(t),this.update.dispatchEvent(u.AddStarLayer)}),this.removeStarLayer=(t=>{O.settings.starLayers.removeItem(t),this.update.dispatchEvent(u.RemoveStarLayer)})}};s(0);document.addEventListener("DOMContentLoaded",function(){(new O).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9leHRlbnNpb25zLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvZUNhbnZhcy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZS50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2VBbmltYXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9zdGFnZS50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL3JlbmRlck9iamVjdC50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xheW91dFZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXJSZW5kZXJPYmplY3QudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXJMYXllckRyYXdlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcmxheS9zZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2V0dGluZ3Mvc2V0dGluZ09wZXJhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcmxheS9zZXR0aW5nc092ZXJsYXlWaWV3TW9kZWwudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9lRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9jb250cm9scy9jb250cm9sLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvcHJpbWl0aXZlcy9idXR0b25Qcm9wZXJ0aWVzLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvYnV0dG9uLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvZ2VvbWV0cnkvcG9pbnQudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9nZW9tZXRyeS9Qb2ludC50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xpc3RWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9vdmVybGF5L3NldHRpbmdzT3ZlcmxheVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0YXJMYXllckFuaW1hdG9yLnRzIiwid2VicGFjazovLy8uL3NyYy9pbnNwaWVydHlQbGF5ZXJWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbHMvc3RhckxheWVyLnRzIiwid2VicGFjazovLy8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21vZGVscy9zZXR0aW5ncy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2V0dGluZ3Mvc2V0dGluZ3NNYW5hZ2VyLnRzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIkFycmF5IiwiZmlyc3RPckRlZmF1bHQiLCJmdW5jIiwiYXJyYXlJdGVtIiwidGhpcyIsImZpcnN0IiwiY29uc29sZSIsImxvZyIsImdldE5leHQiLCJjdXJyZW50Iiwic2VsZWN0b3IiLCJuZXh0UG9zaXRpb24iLCJuZXh0IiwieCIsInJlbW92ZUl0ZW0iLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiY29udGFpbnMiLCJyZW1vdmVJdGVtSWZFeGlzdHMiLCJhZGRJdGVtSWZOb3RFeGlzdHMiLCJwdXNoIiwicmVtb3ZlIiwidG9MaXN0IiwiZmlsdGVyIiwiRUNhbnZhcyIsIltvYmplY3QgT2JqZWN0XSIsImRyYXdGdW5jdGlvbnMiLCJyZXNpemUiLCJjYW52YXMiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwiaGVpZ2h0IiwiY2xpZW50SGVpZ2h0IiwiZHJhdyIsImRyYXdGdW5jdGlvbiIsImN0eCIsImFkZERyYXdGdW5jdGlvbiIsInJlbW92ZURyYXdGdW5jdGlvbiIsImRvY3VtZW50IiwiYm9keSIsInBhcmVudEVsZW1lbnQiLCJzdHlsZSIsIm1hcmdpbiIsIm92ZXJmbG93IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwiZW5DYW52YXMiLCJnZXRDb250ZXh0Iiwid2luZG93IiwiYWRkRXZlbnRMaXN0ZW5lciIsImN1cnNvckxvY2siLCJTZXRDdXJzb3IiLCJwb2ludGVyIiwiY3Vyc29yIiwiUmVjdGFuZ2xlIiwieSIsImNvbGxpZGVzV2l0aCIsInJlY3RhbmdsZSIsImhpdHgiLCJoaXR5IiwiaXNIaXRCeSIsIkVBbmltYXRpb24iLCJ1cGRhdGVGdW5jdGlvbnMiLCJpc1J1bm5pbmciLCJhZGRVcGRhdGVGdW5jdGlvbiIsInJlbW92ZVVwZGF0ZUZ1bmN0aW9uIiwic2V0RnBzIiwiZnBzIiwiZnBzSW50ZXJ2YWwiLCJhbmltYXRpb25Mb29wIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibm93IiwiRGF0ZSIsImVsYXBzZWQiLCJsYXN0RnJhbWVUaW1lIiwidGltZURpZmYiLCJ1cGRhdGVGdW5jdGlvbiIsInBsYXkiLCJldmVudCIsImtleUNvZGUiLCJwbGF5UGF1c2UiLCJwYXVzZSIsInN0YWdlX1N0YWdlIiwibW91c2VNb3ZlIiwiZXYiLCJ2aWV3IiwiY2xpY2siLCJyZW5kZXIiLCJzaG91bGRVcGRhdGVMYXlvdXQiLCJ1cGRhdGVMYXlvdXQiLCJjbGVhclJlY3QiLCJzZXRWaWV3IiwiY3JlYXRlRnVsbFNjcmVlbiIsInN0YWdlIiwicmVuZGVyT2JqZWN0X1JlbmRlck9iamVjdCIsImdlbmVyYXRlTmV3SWQiLCJpZENvdW50ZXIiLCJib3VuZHMiLCJpZCIsImxheW91dFZpZXdfTGF5b3V0VmlldyIsImNoaWxkcmVuIiwidHJpZ2dlclVwZGF0ZUxheW91dCIsImNoaWxkIiwic3RhclJlbmRlck9iamVjdF9TdGFyUmVuZGVyT2JqZWN0Iiwic3RhciIsInN1cGVyIiwiZmlsbFN0eWxlIiwiYmVnaW5QYXRoIiwiYXJjIiwiTWF0aCIsIlBJIiwiZmlsbCIsIkVycm9yIiwic3RhckxheWVyRHJhd2VyX1N0YXJMYXllckRyYXdlciIsInN0YXJMYXllciIsInN0YXJzIiwiU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUiLCJTZXR0aW5nT3BlcmF0aW9uIiwic2V0dGluZ3NPdmVybGF5Vmlld01vZGVsX1NldHRpbmdzT3ZlcmxheVZpZXdNb2RlbCIsInN0YXRlIiwiaGlkZGVuIiwiRUV2ZW50VCIsImxpc3RlbmVycyIsImxpc3RlbmVyIiwiZGlzcGF0Y2hFdmVudCIsImFyZyIsImxlbmd0aCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJjb250cm9sX0NvbnRyb2wiLCJpc01vdXNlT3ZlciIsImlzRW5hYmxlZCIsImNsaWNrZWQiLCJjbGllbnRYIiwiY2xpZW50WSIsIkJ1dHRvblByb3BlcnRpZXMiLCJmb250U2l6ZSIsIm1vdXNlT3ZlckZpbGxTdHlsZSIsImJhY2tncm91bmRGaWxsU3R5bGUiLCJ1bmRlZmluZWQiLCJidXR0b25fQnV0dG9uIiwicHJvcGVydGllcyIsImlzVmlzaWJsZSIsImhvcml6b250YWxBbGlnbiIsInZlcnRpY2FsQWxpZ24iLCJmaWxsUmVjdCIsImZvbnQiLCJ0ZXh0QWxpZ24iLCJ0ZXh0QmFzZWxpbmUiLCJmaWxsVGV4dCIsInRleHQiLCJhbGlnbiIsInBvc2l0aW9uIiwic2l6ZSIsIm1lYXN1cmVUZXh0IiwiUG9pbnQiLCJQb2ludF9Qb2ludCIsImxpc3RWaWV3X0xpc3RWaWV3Iiwic3BhY2luZyIsIml0ZW1zIiwidiIsImNvdW50Iiwic2V0dGluZ3NPdmVybGF5Vmlld19TZXR0aW5nc092ZXJsYXlWaWV3Iiwidmlld01vZGVsIiwibGFzdE1vdmVkIiwiaW5hY3Rpdml0eVRpbWVvdXQiLCJzZXR0aW5nc1VwZGF0ZWQiLCJvcGVyYXRpb24iLCJBZGRTdGFyTGF5ZXIiLCJSZW1vdmVTdGFyTGF5ZXIiLCJ1cGRhdGVTZXR0aW5ncyIsInNob3dIaWRlT3ZlcmxheUNsaWNrZWQiLCJzZW5kZXIiLCJ2aXNpYmxlIiwic2V0U3RhdGUiLCJiZWZvcmVWaXNpYmxlIiwibW91c2VJbmFjdGl2aXR5SGFuZGxlciIsInNldFRpbWVvdXQiLCJzaG93T3ZlckxheWVyQnV0dG9uIiwic2V0dGluZ3NMaXN0IiwiYnRuMSIsImFwcF9BcHAiLCJzZXR0aW5nTWFuYWdlciIsInVwZGF0ZSIsImxheWVyIiwic2V0dGluZ3MiLCJzdGFyTGF5ZXJzIiwiYnRuRm9yTGF5ZXIiLCJ0YWciLCJyZW1vdmVTdGFyTGF5ZXIiLCJidG5Gb3JOZXdMYXllciIsImFkZFN0YXJMYXllciIsInN0YXJMYXllckFuaW1hdG9yX1N0YXJMYXllckFuaW1hdG9yIiwic3BlZWQiLCJpbnNwaWVydHlQbGF5ZXJWaWV3X0luc3BpZXJ0eVBsYXllclZpZXciLCJzdGFyQW5pbWF0b3JzIiwiYXBwU2V0dGluZ3NVcGRhdGVkIiwiYW5pbWF0b3IiLCJhbmltIiwic2V0dGluZ3NPdmVybGF5IiwiU3RhckxheWVyIiwicmFuZG9tIiwicnVuIiwiYmFja2dyb3VuZENvbG9yIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Il0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFBQUMsRUFBQUosRUFBQUUsR0FBQSxDQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFFBQUEsSUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFG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QUFRQyxJQUFJLE1BRVppQyxTQUFTQyxLQUFLRSxNQUFNaUssZ0JBQWtCLFFBQ3RDLElBQUk3RyxFQUFRWCxFQUFNOUYsU0FFZGlHLEVBQU8sSUFBSTRHLEVBQ2ZwRyxFQUFNRixRQUFRTixNQVZKK0YsRUFBQUksU0FBVyxJQ0p0QixNQUNIL0osWUFBbUJJLEVBQXNCRSxHQUF0QjdCLEtBQUEyQixRQUFzQjNCLEtBQUE2QixTQUVsQzdCLEtBQUF1TCxXQUEwQixLRENLekksT0FBTzJKLFdBQVkzSixPQUFPNEosYUFDbER4QixFQUFBQyxlQUFpQixJRUY1QixNQUFQNUosY0FDV3ZCLEtBQUFvTCxPQUFTLElBQUk3RCxFQUVidkgsS0FBQTRMLGFBQWUsTUFDbEIsSUFBSVAsRUFBUSxJQUFJZ0IsRUFFaEIsSUFBSyxJQUFJek8sRUFBSSxFQUFHQSxFQUFJLElBQUtBLElBQ3JCeU4sRUFBTXBFLE1BQU0vRixLQUFLLENBQ2JULEVBQUdrRyxLQUFLMkYsU0FBV3BCLEVBQUlJLFNBQVMzSixNQUNoQzBCLEVBQUdzRCxLQUFLMkYsU0FBV3BCLEVBQUlJLFNBQVN6SixPQUNoQ25ELEVBQW1CLEVBQWhCaUksS0FBSzJGLFNBQWUsTUFJL0JwQixFQUFJSSxTQUFTQyxXQUFXckssS0FBS21LLEdBQzdCckwsS0FBS29MLE9BQU8xRCxjQUFjUCxFQUFpQmtELGdCQUd4Q3JLLEtBQUEwTCxnQkFBa0IsQ0FBQzFFLElBQ3RCa0UsRUFBSUksU0FBU0MsV0FBVzdLLFdBQVdzRyxHQUNuQ2hILEtBQUtvTCxPQUFPMUQsY0FBY1AsRUFBaUJtRCwwQkN0Qm5EbEksU0FBU1csaUJBQWlCLG1CQUUxQixZQUNjLElBQUltSSxHQUNWcUIsUUFKNEMiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxKTtcbiIsImludGVyZmFjZSBBcnJheTxUPiB7XHJcbiAgICByZW1vdmVJdGVtSWZFeGlzdHMoaXRlbTogVCk6IHZvaWQ7XHJcbiAgICBjb250YWlucyhpdGVtOiBUKTogYm9vbGVhbjtcclxuICAgIHJlbW92ZUl0ZW0oaXRlbTogVCk6IHZvaWQ7XHJcbiAgICByZW1vdmUoc2VsZWN0b3I6IChpdGVtOiBUKSA9PiBib29sZWFuKTogdm9pZDtcclxuICAgIGFkZEl0ZW1JZk5vdEV4aXN0cyhpdGVtOiBUKTogdm9pZDtcclxuICAgIHRvTGlzdCgpOiBUW107XHJcbiAgICBnZXROZXh0KGN1cnJlbnQ6IFQsIHNlbGVjdG9yOiAoaXRlbTogVCkgPT4gbnVtYmVyKTogVDtcclxuICAgIGZpcnN0KHNlbGVjdG9yOiAoaXRlbTogVCkgPT4gYm9vbGVhbik6IFQ7XHJcbiAgICBmaXJzdE9yRGVmYXVsdChzZWxlY3RvcjogKGl0ZW06IFQpID0+IGJvb2xlYW4pOiBUO1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuZmlyc3RPckRlZmF1bHQgPSBmdW5jdGlvbiAoZnVuYykge1xyXG4gICAgZm9yIChjb25zdCBhcnJheUl0ZW0gb2YgdGhpcykge1xyXG4gICAgICAgIGlmIChmdW5jKGFycmF5SXRlbSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFycmF5SXRlbTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbnVsbDtcclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLmZpcnN0ID0gZnVuY3Rpb24gKGZ1bmMpIHtcclxuICAgIGZvciAoY29uc3QgYXJyYXlJdGVtIG9mIHRoaXMpIHtcclxuICAgICAgICBpZiAoZnVuYyhhcnJheUl0ZW0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnJheUl0ZW07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc29sZS5sb2coXCJpdGVtIG5vdCBmb3VuZFwiKTtcclxuICAgIGNvbnNvbGUubG9nKHRoaXMpO1xyXG4gICAgdGhyb3cgXCJpdGVtIG5vdCBmb3VuZFwiO1xyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuZ2V0TmV4dCA9IGZ1bmN0aW9uIDxUPihjdXJyZW50OiBULCBzZWxlY3RvcjogKGl0ZW06IFQpID0+IG51bWJlcik6IFQge1xyXG4gICAgdmFyIG5leHRQb3NpdGlvbiA9IHNlbGVjdG9yKGN1cnJlbnQpICsgMTtcclxuICAgIHZhciBuZXh0ID0gKHRoaXMgYXMgVFtdKS5maXJzdE9yRGVmYXVsdCgoeCkgPT4gc2VsZWN0b3IoeCkgPT0gbmV4dFBvc2l0aW9uKTtcclxuICAgIGlmICghbmV4dCkge1xyXG4gICAgICAgIG5leHQgPSAodGhpcyBhcyBUW10pLmZpcnN0KHggPT4gc2VsZWN0b3IoeCkgPT0gMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG5leHQ7XHJcbn1cclxuXHJcbkFycmF5LnByb3RvdHlwZS5yZW1vdmVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihpdGVtKTtcclxuICAgIGlmIChpbmRleCAhPSAtMSkge1xyXG4gICAgICAgIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhyb3cgXCJpdGVtIG5vdCBmb3VuZFwiO1xyXG4gICAgfVxyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiA8VD4oaXRlbTogVCkge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5kZXhPZihpdGVtKSAhPT0gLTE7XHJcbn1cclxuXHJcbkFycmF5LnByb3RvdHlwZS5yZW1vdmVJdGVtSWZFeGlzdHMgPSBmdW5jdGlvbiA8VD4oaXRlbTogVCkge1xyXG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGl0ZW0pO1xyXG4gICAgaWYgKGluZGV4ICE9IC0xKSB7XHJcbiAgICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5BcnJheS5wcm90b3R5cGUuYWRkSXRlbUlmTm90RXhpc3RzID0gZnVuY3Rpb24gPFQ+KGl0ZW06IFQpIHtcclxuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihpdGVtKTtcclxuICAgIGlmIChpbmRleCA9PSAtMSkge1xyXG4gICAgICAgICh0aGlzIGFzIFRbXSkucHVzaChpdGVtKTtcclxuICAgIH1cclxufVxyXG5cclxuQXJyYXkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIDxUPihzZWxlY3RvcjogKGl0ZW06IFQpID0+IGJvb2xlYW4pIHtcclxuICAgICh0aGlzIGFzIFRbXSkucmVtb3ZlSXRlbSgodGhpcyBhcyBUW10pLmZpcnN0KHNlbGVjdG9yKSk7XHJcbn1cclxuXHJcbkFycmF5LnByb3RvdHlwZS50b0xpc3QgPSBmdW5jdGlvbiA8VD4oKTogVFtdIHtcclxuICAgIHJldHVybiAodGhpcyBhcyBUW10pLmZpbHRlcih4ID0+IHRydWUpO1xyXG59XHJcbiIsImltcG9ydCB7IEVBbmltYXRpb24gfSBmcm9tIFwiLi4vZUFuaW1hdGlvblwiO1xyXG5cclxuZXhwb3J0IHR5cGUgRHJhd0Z1bmN0aW9uID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKSA9PiB2b2lkO1xyXG5cclxuZXhwb3J0IGNsYXNzIEVDYW52YXMge1xyXG4gICAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgcHJpdmF0ZSBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcbiAgICBwcml2YXRlIGRyYXdGdW5jdGlvbnM6IERyYXdGdW5jdGlvbltdID0gW107XHJcblxyXG4gICAgcHVibGljIGdldCB3aWR0aCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGhlaWdodCgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5oZWlnaHQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnVsbFNjcmVlbigpOiBFQ2FudmFzIHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnBhcmVudEVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gXCIxMDAlXCI7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLm1hcmdpbiA9IFwiMFwiO1xyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUub3ZlcmZsb3cgPSBcImhpZGRlblwiO1xyXG5cclxuICAgICAgICB2YXIgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjYW52YXMpO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IFwiMTAwJVwiXHJcbiAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IFwiMTAwJVwiO1xyXG5cclxuICAgICAgICB2YXIgZW5DYW52YXMgPSBuZXcgRUNhbnZhcygpO1xyXG4gICAgICAgIGVuQ2FudmFzLmNhbnZhcyA9IGNhbnZhcztcclxuICAgICAgICBlbkNhbnZhcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBlbkNhbnZhcy5yZXNpemUpO1xyXG4gICAgICAgIGVuQ2FudmFzLnJlc2l6ZSgpO1xyXG4gICAgICAgIHJldHVybiBlbkNhbnZhcztcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHN0YXRpYyBjdXJzb3JMb2NrOiBzdHJpbmcgPSBudWxsO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgU2V0Q3Vyc29yID0gKG5hbWU6IHN0cmluZywgcG9pbnRlcjogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIGlmIChwb2ludGVyKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XHJcbiAgICAgICAgICAgIEVDYW52YXMuY3Vyc29yTG9jayA9IG5hbWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChuYW1lID09IEVDYW52YXMuY3Vyc29yTG9jaykge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xyXG4gICAgICAgICAgICBFQ2FudmFzLmN1cnNvckxvY2sgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVzaXplID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKFwiY2FudmFzLnJlc2l6ZSgpXCIpO1xyXG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5jYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gdGhpcy5jYW52YXMuY2xpZW50SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkcmF3ID0gKCkgPT4ge1xyXG4gICAgICAgIGZvciAoY29uc3QgZHJhd0Z1bmN0aW9uIG9mIHRoaXMuZHJhd0Z1bmN0aW9ucykge1xyXG4gICAgICAgICAgICBkcmF3RnVuY3Rpb24odGhpcy5jdHgsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZERyYXdGdW5jdGlvbiA9IChmdW5jOiBEcmF3RnVuY3Rpb24pID0+IHtcclxuICAgICAgICB0aGlzLmRyYXdGdW5jdGlvbnMucHVzaChmdW5jKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlRHJhd0Z1bmN0aW9uID0gKGZ1bmM6IERyYXdGdW5jdGlvbikgPT4ge1xyXG4gICAgICAgIHRoaXMuZHJhd0Z1bmN0aW9ucy5zcGxpY2UodGhpcy5kcmF3RnVuY3Rpb25zLmluZGV4T2YoZnVuYyksIDEpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIFJlY3RhbmdsZSB7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgeDogbnVtYmVyLCBwdWJsaWMgeTogbnVtYmVyLCBwdWJsaWMgd2lkdGg6IG51bWJlciwgcHVibGljIGhlaWdodDogbnVtYmVyKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgY29sbGlkZXNXaXRoID0gKHJlY3RhbmdsZTogUmVjdGFuZ2xlKSA9PiB7XHJcbiAgICAgICAgdmFyIGhpdHggPSBmYWxzZTtcclxuICAgICAgICB2YXIgaGl0eSA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnggPD0gcmVjdGFuZ2xlLngpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMueCA8PSByZWN0YW5nbGUueCAmJiB0aGlzLnggKyB0aGlzLndpZHRoID4gcmVjdGFuZ2xlLngpIHtcclxuICAgICAgICAgICAgICAgIGhpdHggPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHJlY3RhbmdsZS54IDw9IHRoaXMueCAmJiByZWN0YW5nbGUueCArIHJlY3RhbmdsZS53aWR0aCA+IHRoaXMueCkge1xyXG4gICAgICAgICAgICAgICAgaGl0eCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChoaXR4KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnkgPD0gcmVjdGFuZ2xlLnkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnkgPD0gcmVjdGFuZ2xlLnkgJiYgdGhpcy55ICsgdGhpcy53aWR0aCA+IHJlY3RhbmdsZS55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGl0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVjdGFuZ2xlLnkgPD0gdGhpcy55ICYmIHJlY3RhbmdsZS55ICsgcmVjdGFuZ2xlLndpZHRoID4gdGhpcy55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGl0eSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBoaXR4ICYmIGhpdHk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlzSGl0QnkgPSAoeDogbnVtYmVyLCB5OiBudW1iZXIpID0+IHtcclxuICAgICAgICByZXR1cm4geCA+IHRoaXMueCAmJiB4IDwgdGhpcy54ICsgdGhpcy53aWR0aFxyXG4gICAgICAgICAgICAmJiB5ID4gdGhpcy55ICYmIHkgPCB0aGlzLnkgKyB0aGlzLmhlaWdodDtcclxuICAgIH1cclxufSIsImV4cG9ydCB0eXBlIFVwZGF0ZUZ1bmN0aW9uID0gKHRpbWVEaWZmOiBudW1iZXIpID0+IHZvaWQ7XHJcblxyXG5leHBvcnQgY2xhc3MgRUFuaW1hdGlvbiB7XHJcbiAgICBwcml2YXRlIHVwZGF0ZUZ1bmN0aW9uczogVXBkYXRlRnVuY3Rpb25bXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSBpc1J1bm5pbmcgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgbGFzdEZyYW1lVGltZTogbnVtYmVyO1xyXG4gICAgcHJpdmF0ZSBmcHM6IG51bWJlcjtcclxuICAgIHByaXZhdGUgZnBzSW50ZXJ2YWw6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRGcHMoMzApO1xyXG4gICAgICAgIHRoaXMucGxheSgpO1xyXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5rZXlDb2RlID09IDgwKSB7IC8vIHBcclxuICAgICAgICAgICAgICAgIHRoaXMucGxheVBhdXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGxheSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwicGxheVwiKTtcclxuICAgICAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RGcmFtZVRpbWUgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkxvb3AoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBhdXNlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUnVubmluZykge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInBhdXNlXCIpO1xyXG4gICAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcGxheVBhdXNlKCkge1xyXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nID8gdGhpcy5wYXVzZSgpIDogdGhpcy5wbGF5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZFVwZGF0ZUZ1bmN0aW9uID0gKGZ1bmM6IFVwZGF0ZUZ1bmN0aW9uKSA9PiB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVGdW5jdGlvbnMucHVzaChmdW5jKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlVXBkYXRlRnVuY3Rpb24gPSAoZnVuYzogVXBkYXRlRnVuY3Rpb24pID0+IHtcclxuICAgICAgICB0aGlzLnVwZGF0ZUZ1bmN0aW9ucy5zcGxpY2UodGhpcy51cGRhdGVGdW5jdGlvbnMuaW5kZXhPZihmdW5jKSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldEZwcyA9IChmcHM6IG51bWJlcikgPT4ge1xyXG4gICAgICAgIHRoaXMuZnBzID0gZnBzO1xyXG4gICAgICAgIHRoaXMuZnBzSW50ZXJ2YWwgPSAxMDAwIC8gdGhpcy5mcHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhbmltYXRpb25Mb29wID0gKCkgPT4ge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUnVubmluZykge1xyXG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25Mb29wKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBub3cgPSBEYXRlLm5vdygpO1xyXG4gICAgICAgIHZhciBlbGFwc2VkID0gbm93IC0gdGhpcy5sYXN0RnJhbWVUaW1lO1xyXG5cclxuICAgICAgICBpZiAoZWxhcHNlZCA+IHRoaXMuZnBzSW50ZXJ2YWwpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gbm93O1xyXG4gICAgICAgICAgICB2YXIgdGltZURpZmYgPSBlbGFwc2VkIC8gMTAwMDtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdXBkYXRlRnVuY3Rpb24gb2YgdGhpcy51cGRhdGVGdW5jdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZUZ1bmN0aW9uKHRpbWVEaWZmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IEVDYW52YXMgfSBmcm9tIFwiLi9lQ2FudmFzXCI7XHJcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi9nZW9tZXRyeS9yZWN0YW5nbGVcIjtcclxuaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuL2xheW91dENvbnRyb2xzL2xheW91dFZpZXdcIjtcclxuaW1wb3J0IHsgRUFuaW1hdGlvbiB9IGZyb20gXCIuLi9lQW5pbWF0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhZ2Uge1xyXG4gICAgcHJpdmF0ZSB2aWV3OiBMYXlvdXRWaWV3O1xyXG4gICAgcHJpdmF0ZSBzaG91bGRVcGRhdGVMYXlvdXQ6IGJvb2xlYW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjYW52YXM6IEVDYW52YXMpIHtcclxuICAgICAgICBjYW52YXMuYWRkRHJhd0Z1bmN0aW9uKHRoaXMucmVuZGVyKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwibW91c2Vtb3ZlXCIsIHRoaXMubW91c2VNb3ZlKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5jbGljayk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGUoKTogU3RhZ2Uge1xyXG4gICAgICAgIHZhciBjYW52YXMgPSBFQ2FudmFzLmNyZWF0ZUZ1bGxTY3JlZW4oKTtcclxuICAgICAgICB2YXIgc3RhZ2UgPSBuZXcgU3RhZ2UoY2FudmFzKTtcclxuICAgICAgICB2YXIgYW5pbWF0aW9uID0gbmV3IEVBbmltYXRpb24oKTtcclxuICAgICAgICBhbmltYXRpb24uYWRkVXBkYXRlRnVuY3Rpb24oY2FudmFzLmRyYXcpO1xyXG4gICAgICAgIHJldHVybiBzdGFnZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1vdXNlTW92ZSA9IChldjogTW91c2VFdmVudCkgPT4ge1xyXG4gICAgICAgIHRoaXMudmlldy5tb3VzZU1vdmUoZXYpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xpY2sgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy52aWV3KSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlldy5jbGljayhldik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlldykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaG91bGRVcGRhdGVMYXlvdXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy51cGRhdGVMYXlvdXQoY3R4LCBuZXcgUmVjdGFuZ2xlKDAsIDAsIHdpZHRoLCBoZWlnaHQpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlTGF5b3V0ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICAgICAgdGhpcy52aWV3LnJlbmRlcihjdHgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2V0VmlldyA9ICh2aWV3OiBMYXlvdXRWaWV3KSA9PiB7XHJcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcclxuICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZUxheW91dCA9IHRydWU7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgUmVuZGVyT2JqZWN0IHtcclxuICAgIHByaXZhdGUgc3RhdGljIGlkQ291bnRlciA9IDA7XHJcbiAgICBwcml2YXRlIGdlbmVyYXRlTmV3SWQgPSAoKSA9PiB7XHJcbiAgICAgICAgUmVuZGVyT2JqZWN0LmlkQ291bnRlcisrO1xyXG4gICAgICAgIHJldHVybiBSZW5kZXJPYmplY3QuaWRDb3VudGVyO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuaWQgPSB0aGlzLmdlbmVyYXRlTmV3SWQoKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSBcIm9iamVjdCBcIiArIHRoaXMuaWQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGlkOiBudW1iZXI7XHJcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xyXG4gICAgcHVibGljIHRhZzogYW55O1xyXG5cclxuICAgIHB1YmxpYyBib3VuZHM6IFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgMCwgMCk7XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVuZGVyKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKTogdm9pZDtcclxuXHJcbiAgICBhYnN0cmFjdCBtb3VzZU1vdmUoZXY6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG4gICAgYWJzdHJhY3QgY2xpY2soZXY6IE1vdXNlRXZlbnQpOiB2b2lkO1xyXG59IiwiaW1wb3J0IHsgUmVuZGVyT2JqZWN0IH0gZnJvbSBcIi4uL3JlbmRlck9iamVjdFwiO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGF5b3V0VmlldyBleHRlbmRzIFJlbmRlck9iamVjdCB7XHJcbiAgICBwcm90ZWN0ZWQgY2hpbGRyZW46IFJlbmRlck9iamVjdFtdID0gW107XHJcbiAgICBwcml2YXRlIHNob3VsZFVwZGF0ZUxheW91dCA9IGZhbHNlO1xyXG5cclxuICAgIHB1YmxpYyByZW5kZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG91bGRVcGRhdGVMYXlvdXQpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVMYXlvdXQoY3R4LCB0aGlzLmJvdW5kcyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlTGF5b3V0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY3R4KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZDtcclxuXHJcbiAgICBwdWJsaWMgdHJpZ2dlclVwZGF0ZUxheW91dCA9ICgpID0+IHtcclxuICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZUxheW91dCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1vdXNlTW92ZShldjogTW91c2VFdmVudCkge1xyXG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjaGlsZC5tb3VzZU1vdmUoZXYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xpY2soZXY6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4udG9MaXN0KCkpIHtcclxuICAgICAgICAgICAgY2hpbGQuY2xpY2soZXYpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IFJlbmRlck9iamVjdCB9IGZyb20gXCIuLi9lbmMvc3JjL3VpL3JlbmRlck9iamVjdFwiO1xyXG5pbXBvcnQgeyBTdGFyIH0gZnJvbSBcIi4vbW9kZWxzL3N0YXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdGFyUmVuZGVyT2JqZWN0IGV4dGVuZHMgUmVuZGVyT2JqZWN0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0YXI6IFN0YXIpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW5kZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImRyYXdpbmdcIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmFyYyh0aGlzLnN0YXIueCwgdGhpcy5zdGFyLnksIHRoaXMuc3Rhci5yLCAwLCBNYXRoLlBJICogMik7XHJcbiAgICAgICAgY3R4LmZpbGwoKTtcclxuICAgIH1cclxuICAgIG1vdXNlTW92ZShldjogTW91c2VFdmVudCk6IHZvaWQge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1ldGhvZCBub3QgaW1wbGVtZW50ZWQuXCIpO1xyXG4gICAgfVxyXG4gICAgY2xpY2soZXY6IE1vdXNlRXZlbnQpOiB2b2lkIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFJlbmRlck9iamVjdCB9IGZyb20gXCIuLi9lbmMvc3JjL3VpL3JlbmRlck9iamVjdFwiO1xyXG5pbXBvcnQgeyBMYXlvdXRWaWV3IH0gZnJvbSBcIi4uL2VuYy9zcmMvdWkvbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlld1wiO1xyXG5pbXBvcnQgeyBTdGFyUmVuZGVyT2JqZWN0IH0gZnJvbSBcIi4vc3RhclJlbmRlck9iamVjdFwiO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vZW5jL3NyYy9nZW9tZXRyeS9yZWN0YW5nbGVcIjtcclxuaW1wb3J0IHsgU3RhckxheWVyIH0gZnJvbSBcIi4vbW9kZWxzL3N0YXJMYXllclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXJMYXllckRyYXdlciBleHRlbmRzIExheW91dFZpZXcge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHN0YXJMYXllcjogU3RhckxheWVyKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3Qgc3RhciBvZiB0aGlzLnN0YXJMYXllci5zdGFycykge1xyXG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmV3IFN0YXJSZW5kZXJPYmplY3Qoc3RhcikpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHVibGljIG1vdXNlTW92ZShldjogTW91c2VFdmVudCkge1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBjbGljayhldjogTW91c2VFdmVudCkge1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGVudW0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUge1xyXG4gICAgaGlkZGVuLFxyXG4gICAgYmVmb3JlVmlzaWJsZSxcclxuICAgIHZpc2libGVcclxufSIsImV4cG9ydCBlbnVtIFNldHRpbmdPcGVyYXRpb24ge1xyXG4gICAgQWRkU3RhckxheWVyLFxyXG4gICAgUmVtb3ZlU3RhckxheWVyXHJcbn0iLCJpbXBvcnQgeyBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZSB9IGZyb20gXCIuL3NldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsIHtcclxuICAgIHB1YmxpYyBzdGF0ZTogU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUgPSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5oaWRkZW47XHJcbn0iLCJleHBvcnQgY2xhc3MgRUV2ZW50IHtcclxuICAgIHByaXZhdGUgbGlzdGVuZXJzOiAoKCkgPT4gdm9pZClbXSA9IFtdO1xyXG5cclxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPj0gMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcImxpc3RlbmVyIGFscmVhZHkgYWRkZWRcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVySWZOb3RFeGlzdHMgPSAobGlzdGVuZXI6ICgpID0+IHZvaWQpID0+IHtcclxuICAgICAgICAvLyB2YWxpZGF0aW9uXHJcbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkaXNwYXRjaEV2ZW50ID0gKCkgPT4ge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgZXZlbnQgPSB0aGlzLmxpc3RlbmVyc1tpXTtcclxuICAgICAgICAgICAgZXZlbnQoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSAobGlzdGVuZXI6ICgpID0+IHZvaWQpID0+IHtcclxuICAgICAgICAvLyB2YWxpZGF0aW9uXHJcbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA8IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJsaXN0ZW5lciBub3QgZm91bmRcIjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnNwbGljZSh0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZUV2ZW50TGlzdGVuZXJJZkV4aXN0cyA9IChsaXN0ZW5lcjogKCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpIDwgMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UodGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRUV2ZW50VDxUPiB7XHJcbiAgICBwcml2YXRlIGxpc3RlbmVyczogKChhcmc6IFQpID0+IHZvaWQpW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lciA9IChsaXN0ZW5lcjogKGFyZzogVCkgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpID49IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJsaXN0ZW5lciBhbHJlYWR5IGFkZGVkXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGlzcGF0Y2hFdmVudCA9IChhcmc6IFQpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5saXN0ZW5lcnNbaV07XHJcbiAgICAgICAgICAgIGV2ZW50KGFyZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoYXJnOiBUKSA9PiB2b2lkKSA9PiB7XHJcbiAgICAgICAgLy8gdmFsaWRhdGlvblxyXG4gICAgICAgIGlmICghbGlzdGVuZXIgfHwgdGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcikgPCAwKSB7XHJcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgbm90IGZvdW5kXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UodGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgRUV2ZW50VFQ8VDEsIFQyPiB7XHJcbiAgICBwcml2YXRlIGxpc3RlbmVyczogKChhcmcxOiBUMSwgYXJnMjogVDIpID0+IHZvaWQpW10gPSBbXTtcclxuXHJcbiAgICBwdWJsaWMgYWRkRXZlbnRMaXN0ZW5lciA9IChsaXN0ZW5lcjogKGFyZzE6IFQxLCBhcmcyOiBUMikgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpID49IDApIHtcclxuICAgICAgICAgICAgdGhyb3cgXCJsaXN0ZW5lciBhbHJlYWR5IGFkZGVkXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZGlzcGF0Y2hFdmVudCA9IChhcmcxOiBUMSwgYXJnMjogVDIpID0+IHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5saXN0ZW5lcnNbaV07XHJcbiAgICAgICAgICAgIGV2ZW50KGFyZzEsIGFyZzIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IChsaXN0ZW5lcjogKGFyZzE6IFQxLCBhcmcyOiBUMikgPT4gdm9pZCkgPT4ge1xyXG4gICAgICAgIC8vIHZhbGlkYXRpb25cclxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpIDwgMCkge1xyXG4gICAgICAgICAgICB0aHJvdyBcImxpc3RlbmVyIG5vdCBmb3VuZFwiO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpLCAxKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFJlbmRlck9iamVjdCB9IGZyb20gXCIuLi9yZW5kZXJPYmplY3RcIjtcclxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvUG9pbnRcIjtcclxuaW1wb3J0IHsgRUNhbnZhcyB9IGZyb20gXCIuLi9lQ2FudmFzXCI7XHJcbmltcG9ydCB7IEVFdmVudFQgfSBmcm9tIFwiLi4vLi4vZUV2ZW50XCI7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ29udHJvbCBleHRlbmRzIFJlbmRlck9iamVjdCB7XHJcbiAgICBwcm90ZWN0ZWQgaXNNb3VzZU92ZXIgPSBmYWxzZTtcclxuICAgIHB1YmxpYyBpc0VuYWJsZWQgPSB0cnVlO1xyXG4gICAgcHVibGljIGNsaWNrZWQgPSBuZXcgRUV2ZW50VDxDb250cm9sPigpO1xyXG5cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBhbGlnbihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgcG9zaXRpb246IFBvaW50KTogdm9pZDtcclxuXHJcbiAgICBwdWJsaWMgbW91c2VNb3ZlID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmJvdW5kcy5pc0hpdEJ5KGV2LmNsaWVudFgsIGV2LmNsaWVudFkpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTW91c2VPdmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIEVDYW52YXMuU2V0Q3Vyc29yKHRoaXMubmFtZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTW91c2VPdmVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBFQ2FudmFzLlNldEN1cnNvcih0aGlzLm5hbWUsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgY2xpY2sgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRzLmlzSGl0QnkoZXYuY2xpZW50WCwgZXYuY2xpZW50WSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xpY2tlZC5kaXNwYXRjaEV2ZW50KHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIEJ1dHRvblByb3BlcnRpZXMge1xyXG4gICAgcHVibGljIGZvbnRTaXplID0gNDA7XHJcbiAgICBwdWJsaWMgZmlsbFN0eWxlID0gXCJibGFja1wiO1xyXG4gICAgcHVibGljIG1vdXNlT3ZlckZpbGxTdHlsZSA9IFwicmVkXCI7XHJcbiAgICBwdWJsaWMgYmFja2dyb3VuZEZpbGxTdHlsZTogc3RyaW5nID0gdW5kZWZpbmVkO1xyXG59IiwiaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xyXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gXCIuLi8uLi9nZW9tZXRyeS9Qb2ludFwiO1xyXG5pbXBvcnQgeyBCdXR0b25Qcm9wZXJ0aWVzIH0gZnJvbSBcIi4vcHJpbWl0aXZlcy9idXR0b25Qcm9wZXJ0aWVzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQnV0dG9uIGV4dGVuZHMgQ29udHJvbCB7XHJcbiAgICBwdWJsaWMgcHJvcGVydGllcyA9IG5ldyBCdXR0b25Qcm9wZXJ0aWVzKCk7XHJcbiAgICBwdWJsaWMgdGV4dDogc3RyaW5nO1xyXG4gICAgcHVibGljIGlzVmlzaWJsZSA9IHRydWU7XHJcblxyXG4gICAgcHVibGljIGhvcml6b250YWxBbGlnbjogXCJsZWZ0XCIgfCBcImNlbnRlclwiIHwgXCJyaWdodFwiID0gXCJjZW50ZXJcIjtcclxuICAgIHB1YmxpYyB2ZXJ0aWNhbEFsaWduOiBcInRvcFwiIHwgXCJjZW50ZXJcIiB8IFwiYm90dG9tXCIgPSBcImNlbnRlclwiO1xyXG5cclxuICAgIHB1YmxpYyByZW5kZXIgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJvcGVydGllcy5iYWNrZ3JvdW5kRmlsbFN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5wcm9wZXJ0aWVzLmJhY2tncm91bmRGaWxsU3R5bGU7XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QodGhpcy5ib3VuZHMueCwgdGhpcy5ib3VuZHMueSwgdGhpcy5ib3VuZHMud2lkdGgsIHRoaXMuYm91bmRzLmhlaWdodCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzTW91c2VPdmVyKSB7XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5wcm9wZXJ0aWVzLm1vdXNlT3ZlckZpbGxTdHlsZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnByb3BlcnRpZXMuZmlsbFN0eWxlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjdHguZm9udCA9IHRoaXMucHJvcGVydGllcy5mb250U2l6ZSArIFwicHggQXJpYWxcIjtcclxuICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IFwibGVmdFwiO1xyXG4gICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcclxuICAgICAgICAgICAgY3R4LmZpbGxUZXh0KHRoaXMudGV4dCwgdGhpcy5ib3VuZHMueCwgdGhpcy5ib3VuZHMueSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhbGlnbiA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgcG9zaXRpb246IFBvaW50KSA9PiB7XHJcbiAgICAgICAgY3R4LmZvbnQgPSB0aGlzLnByb3BlcnRpZXMuZm9udFNpemUgKyBcInB4IEFyaWFsXCI7XHJcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IFwibGVmdFwiO1xyXG4gICAgICAgIGN0eC50ZXh0QmFzZWxpbmUgPSBcInRvcFwiO1xyXG4gICAgICAgIHZhciBzaXplID0gY3R4Lm1lYXN1cmVUZXh0KHRoaXMudGV4dCk7XHJcblxyXG4gICAgICAgIHZhciBib3VuZHMgPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIHNpemUud2lkdGgsIHRoaXMucHJvcGVydGllcy5mb250U2l6ZSk7XHJcblxyXG4gICAgICAgIHN3aXRjaCAodGhpcy5ob3Jpem9udGFsQWxpZ24pIHtcclxuICAgICAgICAgICAgY2FzZSBcImxlZnRcIjpcclxuICAgICAgICAgICAgICAgIGJvdW5kcy54ID0gcG9zaXRpb24ueDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiY2VudGVyXCI6XHJcbiAgICAgICAgICAgICAgICBib3VuZHMueCA9IHBvc2l0aW9uLnggLSBzaXplLndpZHRoIC8gMjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwicmlnaHRcIjpcclxuICAgICAgICAgICAgICAgIGJvdW5kcy54ID0gcG9zaXRpb24ueCAtIHNpemUud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnZlcnRpY2FsQWxpZ24pIHtcclxuICAgICAgICAgICAgY2FzZSBcInRvcFwiOlxyXG4gICAgICAgICAgICAgICAgYm91bmRzLnkgPSBwb3NpdGlvbi55O1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgXCJjZW50ZXJcIjpcclxuICAgICAgICAgICAgICAgIGJvdW5kcy55ID0gcG9zaXRpb24ueSAtIHRoaXMucHJvcGVydGllcy5mb250U2l6ZSAvIDI7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBcImJvdHRvbVwiOlxyXG4gICAgICAgICAgICAgICAgYm91bmRzLnkgPSBwb3NpdGlvbi55IC0gdGhpcy5wcm9wZXJ0aWVzLmZvbnRTaXplO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm91bmRzID0gYm91bmRzO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIFBvaW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB4OiBudW1iZXIsIHB1YmxpYyB5OiBudW1iZXIpIHsgfVxyXG59IiwiZXhwb3J0IGNsYXNzIFBvaW50IHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB4OiBudW1iZXIsIHB1YmxpYyB5OiBudW1iZXIpIHsgfVxyXG59IiwiaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuL2xheW91dFZpZXdcIjtcclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuLi9jb250cm9scy9jb250cm9sXCI7XHJcbmltcG9ydCB7IFBvaW50IH0gZnJvbSBcIi4uLy4uL2dlb21ldHJ5L1BvaW50XCI7XHJcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi8uLi9nZW9tZXRyeS9yZWN0YW5nbGVcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaXN0VmlldyBleHRlbmRzIExheW91dFZpZXcge1xyXG4gICAgcHVibGljIHNwYWNpbmcgPSAzMDtcclxuXHJcbiAgICBwdWJsaWMgZ2V0IGl0ZW1zKCk6IENvbnRyb2xbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRyZW4gYXMgQ29udHJvbFtdO1xyXG4gICAgfVxyXG4gICAgcHVibGljIHNldCBpdGVtcyh2OiBDb250cm9sW10pIHtcclxuICAgICAgICB0aGlzLmNoaWxkcmVuID0gdjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSk6IHZvaWQge1xyXG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuaXRlbXMubGVuZ3RoO1xyXG4gICAgICAgIGlmIChjb3VudCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIHggPSBib3VuZHMud2lkdGggLyAyO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciB5ID0gYm91bmRzLmhlaWdodCAvIDIgLSB0aGlzLnNwYWNpbmcgKiAoY291bnQgLSAxKSAvIDIgKyBpICogdGhpcy5zcGFjaW5nO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc1tpXS5hbGlnbihjdHgsIG5ldyBQb2ludCh4LCB5KSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBMYXlvdXRWaWV3IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlld1wiO1xyXG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy9nZW9tZXRyeS9yZWN0YW5nbGVcIjtcclxuaW1wb3J0IHsgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsIH0gZnJvbSBcIi4vc2V0dGluZ3NPdmVybGF5Vmlld01vZGVsXCI7XHJcbmltcG9ydCB7IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlIH0gZnJvbSBcIi4vc2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGVcIjtcclxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvYnV0dG9uXCI7XHJcbmltcG9ydCB7IFBvaW50IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcG9pbnRcIjtcclxuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2NvbnRyb2xcIjtcclxuaW1wb3J0IHsgTGlzdFZpZXcgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9saXN0Vmlld1wiO1xyXG5pbXBvcnQgeyBTdGFyTGF5ZXIgfSBmcm9tIFwiLi4vbW9kZWxzL3N0YXJMYXllclwiO1xyXG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vYXBwXCI7XHJcbmltcG9ydCB7IFNldHRpbmdPcGVyYXRpb24gfSBmcm9tIFwiLi4vc2V0dGluZ3Mvc2V0dGluZ09wZXJhdGlvblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdzT3ZlcmxheVZpZXcgZXh0ZW5kcyBMYXlvdXRWaWV3IHtcclxuICAgIHByaXZhdGUgdmlld01vZGVsOiBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWwgPSBuZXcgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsKCk7XHJcbiAgICBwcml2YXRlIGxhc3RNb3ZlZCA9IERhdGUubm93KCk7XHJcbiAgICBwcml2YXRlIGluYWN0aXZpdHlUaW1lb3V0ID0gMjAwMDtcclxuICAgIHByaXZhdGUgc2hvd092ZXJMYXllckJ1dHRvbjogQnV0dG9uO1xyXG4gICAgcHJpdmF0ZSBzZXR0aW5nc0xpc3Q6IExpc3RWaWV3O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uID0gbmV3IEJ1dHRvbigpO1xyXG4gICAgICAgIHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbi50ZXh0ID0gXCJTaG93L0hpZGUgU2V0dGluZ3NcIjtcclxuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24ucHJvcGVydGllcy5maWxsU3R5bGUgPSBcImdyZWVuXCI7XHJcbiAgICAgICAgdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uLnZlcnRpY2FsQWxpZ24gPSBcInRvcFwiO1xyXG4gICAgICAgIHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbi5ob3Jpem9udGFsQWxpZ24gPSBcImxlZnRcIjtcclxuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24uY2xpY2tlZC5hZGRFdmVudExpc3RlbmVyKHRoaXMuc2hvd0hpZGVPdmVybGF5Q2xpY2tlZCk7XHJcbiAgICAgICAgdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uLnByb3BlcnRpZXMuYmFja2dyb3VuZEZpbGxTdHlsZSA9IFwicmdiYSgwLCAwLCAwLCAwLjUpXCI7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbik7XHJcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QgPSBuZXcgTGlzdFZpZXcoKTtcclxuICAgICAgICB2YXIgYnRuMSA9IG5ldyBCdXR0b24oKTtcclxuICAgICAgICBidG4xLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0Lml0ZW1zLnB1c2goYnRuMSk7XHJcbiAgICAgICAgQXBwLnNldHRpbmdNYW5hZ2VyLnVwZGF0ZS5hZGRFdmVudExpc3RlbmVyKHRoaXMuc2V0dGluZ3NVcGRhdGVkKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldHRpbmdzVXBkYXRlZCA9IChvcGVyYXRpb246IFNldHRpbmdPcGVyYXRpb24pID0+IHtcclxuICAgICAgICBzd2l0Y2ggKG9wZXJhdGlvbikge1xyXG4gICAgICAgICAgICBjYXNlIFNldHRpbmdPcGVyYXRpb24uQWRkU3RhckxheWVyOlxyXG4gICAgICAgICAgICBjYXNlIFNldHRpbmdPcGVyYXRpb24uUmVtb3ZlU3RhckxheWVyOlxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVTZXR0aW5ncygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2hvd0hpZGVPdmVybGF5Q2xpY2tlZCA9IChzZW5kZXI6IENvbnRyb2wpID0+IHtcclxuICAgICAgICBpZiAodGhpcy52aWV3TW9kZWwuc3RhdGUgPT0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUudmlzaWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGUpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUudmlzaWJsZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uLmFsaWduKGN0eCwgbmV3IFBvaW50KGJvdW5kcy54LCBib3VuZHMueSkpO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0LnVwZGF0ZUxheW91dChjdHgsIG5ldyBSZWN0YW5nbGUoMTAwLCAxMDAsIDQwMCwgNDAwKSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtb3VzZU1vdmUgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICBpZiAodGhpcy52aWV3TW9kZWwuc3RhdGUgPT0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuIHx8IHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5iZWZvcmVWaXNpYmxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VwZXIubW91c2VNb3ZlKGV2KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbW91c2VJbmFjdGl2aXR5SGFuZGxlciA9ICgpID0+IHtcclxuICAgICAgICBpZiAoRGF0ZS5ub3coKSAtIHRoaXMubGFzdE1vdmVkID49IHRoaXMuaW5hY3Rpdml0eVRpbWVvdXQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5tb3VzZUluYWN0aXZpdHlIYW5kbGVyLCB0aGlzLmluYWN0aXZpdHlUaW1lb3V0IC0gKERhdGUubm93KCkgLSB0aGlzLmxhc3RNb3ZlZCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFN0YXRlID0gKHN0YXRlOiBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZSkgPT4ge1xyXG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcclxuICAgICAgICAgICAgY2FzZSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5oaWRkZW46XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24uaXNWaXNpYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmhpZGRlbjtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGU6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RNb3ZlZCA9IERhdGUubm93KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3TW9kZWwuc3RhdGUgPT0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLm1vdXNlSW5hY3Rpdml0eUhhbmRsZXIsIHRoaXMuaW5hY3Rpdml0eVRpbWVvdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbi5pc1Zpc2libGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLnZpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMubW91c2VJbmFjdGl2aXR5SGFuZGxlciwgdGhpcy5pbmFjdGl2aXR5VGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmVJdGVtSWZFeGlzdHModGhpcy5zZXR0aW5nc0xpc3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwuc3RhdGUgPSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5iZWZvcmVWaXNpYmxlO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUudmlzaWJsZTpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9PSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5iZWZvcmVWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuc2V0dGluZ3NMaXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNldHRpbmdzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLnZpc2libGU7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVTZXR0aW5ncygpIHtcclxuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5pdGVtcyA9IFtdO1xyXG4gICAgICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgQXBwLnNldHRpbmdzLnN0YXJMYXllcnMpIHtcclxuICAgICAgICAgICAgdmFyIGJ0bkZvckxheWVyID0gbmV3IEJ1dHRvbigpO1xyXG4gICAgICAgICAgICBidG5Gb3JMYXllci50ZXh0ID0gXCJSZW1vdmUgTGF5ZXJcIjtcclxuICAgICAgICAgICAgYnRuRm9yTGF5ZXIudGFnID0gbGF5ZXI7XHJcbiAgICAgICAgICAgIGJ0bkZvckxheWVyLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5pdGVtcy5wdXNoKGJ0bkZvckxheWVyKTtcclxuICAgICAgICAgICAgYnRuRm9yTGF5ZXIuY2xpY2tlZC5hZGRFdmVudExpc3RlbmVyKChzZW5kZXI6IENvbnRyb2wpID0+IHtcclxuICAgICAgICAgICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci5yZW1vdmVTdGFyTGF5ZXIobGF5ZXIpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ0bkZvck5ld0xheWVyID0gbmV3IEJ1dHRvbigpO1xyXG4gICAgICAgIGJ0bkZvck5ld0xheWVyLnRleHQgPSBcIkFkZCBMYXllclwiO1xyXG4gICAgICAgIGJ0bkZvck5ld0xheWVyLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0Lml0ZW1zLnB1c2goYnRuRm9yTmV3TGF5ZXIpO1xyXG4gICAgICAgIGJ0bkZvck5ld0xheWVyLmNsaWNrZWQuYWRkRXZlbnRMaXN0ZW5lcigoc2VuZGVyOiBDb250cm9sKSA9PiB7XHJcbiAgICAgICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci5hZGRTdGFyTGF5ZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEFwcCB9IGZyb20gXCIuL2FwcFwiO1xyXG5pbXBvcnQgeyBTdGFyTGF5ZXIgfSBmcm9tIFwiLi9tb2RlbHMvc3RhckxheWVyXCI7XHJcbmltcG9ydCB7IEVBbmltYXRpb24gfSBmcm9tIFwiLi4vZW5jL3NyYy9lQW5pbWF0aW9uXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhckxheWVyQW5pbWF0b3Ige1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHN0YXJMYXllcjogU3RhckxheWVyKSB7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSA9ICh0aW1lRGlmZjogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgZm9yIChjb25zdCBzdGFyIG9mIHRoaXMuc3RhckxheWVyLnN0YXJzKSB7XHJcbiAgICAgICAgICAgIHN0YXIueCArPSB0aGlzLnN0YXJMYXllci5zcGVlZCAqIHRpbWVEaWZmO1xyXG4gICAgICAgICAgICBpZiAoc3Rhci54ID4gQXBwLnNldHRpbmdzLndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICBzdGFyLnggLT0gQXBwLnNldHRpbmdzLndpZHRoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xheW91dFZpZXdcIjtcclxuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XHJcbmltcG9ydCB7IFF1aWNrRHJhd1ZpZXcgfSBmcm9tIFwiLi4vZW5jL3NyYy91aS9xdWlja0RyYXdWaWV3XCI7XHJcbmltcG9ydCB7IFN0YXJMYXllckRyYXdlciB9IGZyb20gXCIuL3N0YXJMYXllckRyYXdlclwiO1xyXG5pbXBvcnQgeyBTZXR0aW5nc092ZXJsYXlWaWV3IH0gZnJvbSBcIi4vb3ZlcmxheS9zZXR0aW5nc092ZXJsYXlWaWV3XCI7XHJcbmltcG9ydCB7IFN0YXJMYXllciB9IGZyb20gXCIuL21vZGVscy9zdGFyTGF5ZXJcIjtcclxuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XHJcbmltcG9ydCB7IFN0YXJMYXllckFuaW1hdG9yIH0gZnJvbSBcIi4vc3RhckxheWVyQW5pbWF0b3JcIjtcclxuaW1wb3J0IHsgRUFuaW1hdGlvbiB9IGZyb20gXCIuLi9lbmMvc3JjL2VBbmltYXRpb25cIjtcclxuaW1wb3J0IHsgU2V0dGluZ09wZXJhdGlvbiB9IGZyb20gXCIuL3NldHRpbmdzL3NldHRpbmdPcGVyYXRpb25cIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBJbnNwaWVydHlQbGF5ZXJWaWV3IGV4dGVuZHMgTGF5b3V0VmlldyB7XHJcbiAgICBwcml2YXRlIHN0YXJMYXllcnM6IFN0YXJMYXllckRyYXdlcltdID0gW107XHJcbiAgICBwcml2YXRlIHN0YXJBbmltYXRvcnM6IFN0YXJMYXllckFuaW1hdG9yW10gPSBbXTtcclxuICAgIHByaXZhdGUgc2V0dGluZ3NPdmVybGF5OiBTZXR0aW5nc092ZXJsYXlWaWV3O1xyXG4gICAgYW5pbTogRUFuaW1hdGlvbjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLnNldHRpbmdzT3ZlcmxheSA9IG5ldyBTZXR0aW5nc092ZXJsYXlWaWV3KCk7XHJcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuc2V0dGluZ3NPdmVybGF5KTtcclxuICAgICAgICB0aGlzLmFuaW0gPSBuZXcgRUFuaW1hdGlvbigpO1xyXG4gICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci51cGRhdGUuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmFwcFNldHRpbmdzVXBkYXRlZCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhcHBTZXR0aW5nc1VwZGF0ZWQgPSAob3BlcmF0aW9uOiBTZXR0aW5nT3BlcmF0aW9uKSA9PiB7XHJcbiAgICAgICAgc3dpdGNoIChvcGVyYXRpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBTZXR0aW5nT3BlcmF0aW9uLkFkZFN0YXJMYXllcjpcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkU3RhckxheWVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBTZXR0aW5nT3BlcmF0aW9uLlJlbW92ZVN0YXJMYXllcjpcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlU3RhckxheWVyKCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFkZFN0YXJMYXllciA9ICgpID0+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IHN0YXJMYXllciBvZiBBcHAuc2V0dGluZ3Muc3RhckxheWVycykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFyTGF5ZXJzLmZpcnN0T3JEZWZhdWx0KHggPT4geC5zdGFyTGF5ZXIgPT0gc3RhckxheWVyKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXIgPSBuZXcgU3RhckxheWVyRHJhd2VyKHN0YXJMYXllcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJMYXllcnMucHVzaChsYXllcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnNwbGljZSgwLCAwLCBsYXllcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0b3IgPSBuZXcgU3RhckxheWVyQW5pbWF0b3Ioc3RhckxheWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbS5hZGRVcGRhdGVGdW5jdGlvbihhbmltYXRvci51cGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyQW5pbWF0b3JzLnB1c2goYW5pbWF0b3IpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlbW92ZVN0YXJMYXllciA9ICgpID0+IHtcclxuICAgICAgICBmb3IgKGNvbnN0IHN0YXJMYXllciBvZiBBcHAuc2V0dGluZ3Muc3RhckxheWVycykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGFyTGF5ZXJzLmZpcnN0T3JEZWZhdWx0KHggPT4geC5zdGFyTGF5ZXIgPT0gc3RhckxheWVyKSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXIgPSB0aGlzLnN0YXJMYXllcnMuZmlyc3QoeCA9PiB4LnN0YXJMYXllciA9PSBzdGFyTGF5ZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmUoeCA9PiB4ID09IGxheWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckxheWVycy5yZW1vdmUoeCA9PiB4ID09IGxheWVyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRvciA9IHRoaXMuc3RhckFuaW1hdG9ycy5maXJzdCh4ID0+IHguc3RhckxheWVyID09IHN0YXJMYXllcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW0ucmVtb3ZlVXBkYXRlRnVuY3Rpb24oYW5pbWF0b3IudXBkYXRlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhckFuaW1hdG9ycy5yZW1vdmVJdGVtKGFuaW1hdG9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSk6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgdGhpcy5zdGFyTGF5ZXJzKSB7XHJcbiAgICAgICAgICAgIGxheWVyLnVwZGF0ZUxheW91dChjdHgsIGJvdW5kcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3NPdmVybGF5LnVwZGF0ZUxheW91dChjdHgsIGJvdW5kcyk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBTdGFyIH0gZnJvbSBcIi4vc3RhclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN0YXJMYXllciB7XHJcbiAgICBwdWJsaWMgc3RhcnM6IFN0YXJbXSA9IFtdO1xyXG4gICAgcHVibGljIHNwZWVkID0gTWF0aC5yYW5kb20oKSAqIDIwICsgNTtcclxufSIsImltcG9ydCB7IFN0YWdlIH0gZnJvbSBcIi4uL2VuYy9zcmMvdWkvc3RhZ2VcIjtcclxuaW1wb3J0IHsgSW5zcGllcnR5UGxheWVyVmlldyB9IGZyb20gXCIuL2luc3BpZXJ0eVBsYXllclZpZXdcIjtcclxuaW1wb3J0IHsgU2V0dGluZ3MgfSBmcm9tIFwiLi9tb2RlbHMvc2V0dGluZ3NcIjtcclxuaW1wb3J0IHsgU2V0dGluZ3NNYW5hZ2VyIH0gZnJvbSBcIi4vc2V0dGluZ3Mvc2V0dGluZ3NNYW5hZ2VyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQXBwIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0dGluZ3MgPSBuZXcgU2V0dGluZ3Mod2luZG93LmlubmVyV2lkdGgsIHdpbmRvdy5pbm5lckhlaWdodCk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHNldHRpbmdNYW5hZ2VyID0gbmV3IFNldHRpbmdzTWFuYWdlcigpO1xyXG5cclxuICAgIHB1YmxpYyBydW4gPSAoKSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJoaVwiKTtcclxuXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImJsYWNrXCI7XHJcbiAgICAgICAgdmFyIHN0YWdlID0gU3RhZ2UuY3JlYXRlKCk7XHJcblxyXG4gICAgICAgIHZhciB2aWV3ID0gbmV3IEluc3BpZXJ0eVBsYXllclZpZXcoKTtcclxuICAgICAgICBzdGFnZS5zZXRWaWV3KHZpZXcpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgU3RhckxheWVyIH0gZnJvbSBcIi4vc3RhckxheWVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0dGluZ3Mge1xyXG4gICAgY29uc3RydWN0b3IocHVibGljIHdpZHRoOiBudW1iZXIsIHB1YmxpYyBoZWlnaHQ6IG51bWJlcikgeyB9XHJcblxyXG4gICAgcHVibGljIHN0YXJMYXllcnM6IFN0YXJMYXllcltdID0gW107XHJcbn1cclxuIiwiaW1wb3J0IHsgU2V0dGluZ09wZXJhdGlvbiB9IGZyb20gXCIuL3NldHRpbmdPcGVyYXRpb25cIjtcclxuaW1wb3J0IHsgRUV2ZW50VCB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2VFdmVudFwiO1xyXG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vYXBwXCI7XHJcbmltcG9ydCB7IFN0YXJMYXllciB9IGZyb20gXCIuLi9tb2RlbHMvc3RhckxheWVyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NNYW5hZ2VyIHtcclxuICAgIHB1YmxpYyB1cGRhdGUgPSBuZXcgRUV2ZW50VDxTZXR0aW5nT3BlcmF0aW9uPigpO1xyXG5cclxuICAgIHB1YmxpYyBhZGRTdGFyTGF5ZXIgPSAoKSA9PiB7XHJcbiAgICAgICAgdmFyIGxheWVyID0gbmV3IFN0YXJMYXllcigpO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwMDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxheWVyLnN0YXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgeDogTWF0aC5yYW5kb20oKSAqIEFwcC5zZXR0aW5ncy53aWR0aCxcclxuICAgICAgICAgICAgICAgIHk6IE1hdGgucmFuZG9tKCkgKiBBcHAuc2V0dGluZ3MuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgcjogTWF0aC5yYW5kb20oKSAqIDIgKyAwLjA1XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBBcHAuc2V0dGluZ3Muc3RhckxheWVycy5wdXNoKGxheWVyKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZS5kaXNwYXRjaEV2ZW50KFNldHRpbmdPcGVyYXRpb24uQWRkU3RhckxheWVyKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlU3RhckxheWVyID0gKHN0YXJMYXllcjogU3RhckxheWVyKSA9PiB7XHJcbiAgICAgICAgQXBwLnNldHRpbmdzLnN0YXJMYXllcnMucmVtb3ZlSXRlbShzdGFyTGF5ZXIpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlLmRpc3BhdGNoRXZlbnQoU2V0dGluZ09wZXJhdGlvbi5SZW1vdmVTdGFyTGF5ZXIpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4vYXBwXCI7XHJcbmltcG9ydCBcIi4uL2VuYy9zcmMvZXh0ZW5zaW9uc1wiO1xyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIG1haW4sIGZhbHNlKTtcclxuXHJcbmZ1bmN0aW9uIG1haW4oKSB7XHJcbiAgICB2YXIgYXBwID0gbmV3IEFwcCgpO1xyXG4gICAgYXBwLnJ1bigpO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ==