!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=3)}([function(t,e,i){t.exports=i.p+"ef12961f66786d579f3985c19fea303b.ogg"},function(t,e,i){t.exports=i.p+"4f3b71289b7ebbf613233710c9237407.png"},function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var i=e(t)+1,s=this.firstOrDefault(t=>e(t)==i);return s||(s=this.first(t=>1==e(t))),s},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,i){"use strict";i.r(e);class s{constructor(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s,this.collidesWith=(t=>{var e=!1,i=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(i=!0):t.y<=this.y&&t.y+t.width>this.y&&(i=!0)),e&&i}),this.isHitBy=((t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height)}}class n{constructor(t){this.canvas=t,this.canvasResized=(()=>{this.shouldUpdateLayout=!0}),this.mouseDown=(t=>{this.view&&this.view.mouseDown({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.mouseUp=(t=>{this.view&&this.view.mouseUp({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.mouseMove=(t=>{this.view&&this.view.mouseMove({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.click=(t=>{this.view&&this.view.click({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.render=((t,e,i)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new s(0,0,e,i)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,i),this.view.render(t))}),this.setView=(t=>{this.view=t,this.shouldUpdateLayout=!0}),t.addDrawFunction(this.render),t.resized.addEventListener(this.canvasResized),document.addEventListener("mousedown",this.mouseDown),document.addEventListener("mouseup",this.mouseUp),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("click",this.click)}}var a,r,h,o,d,l;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(a||(a={})),function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom"}(r||(r={}));class u{constructor(){this.top=0,this.right=0,this.bottom=0,this.left=0}}class c{constructor(){this.horizontalAlign=a.Center,this.verticalAlign=r.Center,this.margin=new u,this.calculateDimensionsX=((t,e)=>{switch(this.horizontalAlign){case a.Left:return t.x+this.margin.left;case a.Center:return t.x+t.width/2-e/2;case a.Right:return t.x+t.width-e-this.margin.right}}),this.calculateDimensionsY=((t,e)=>{switch(this.verticalAlign){case r.Top:return t.y+this.margin.top;case r.Center:return t.y+t.height/2-e/2;case r.Bottom:return t.y+t.height-e-this.margin.bottom}})}}class m{constructor(){this.generateNewId=(()=>(m.idCounter++,m.idCounter)),this.bounds=new s(0,0,0,0),this.dimensions=new s(0,0,0,0),this.alignement=new c,this.shouldUpdateLayout=!1,this.triggerUpdateLayout=(()=>{this.shouldUpdateLayout=!0}),this.disableMouseEvents=(()=>{this.mouseDown=(()=>{}),this.mouseUp=(()=>{}),this.mouseMove=(()=>{}),this.click=(()=>{})}),this.id=this.generateNewId(),this.name="object "+this.id}render(t){this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1)}updateLayout(t,e){this.bounds=e}}m.idCounter=0;class g extends m{constructor(){super(...arguments),this.children=[]}render(t){super.render(t);for(const e of this.children)e.render(t)}mouseDown(t){for(const e of this.children)e.mouseDown(t)}mouseUp(t){for(const e of this.children)e.mouseUp(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}class p extends m{constructor(t){super(),this.star=t}mouseDown(t){}mouseUp(t){}render(t){t.fillStyle="white",t.beginPath(),t.arc(this.star.x,this.star.y,this.star.r,0,2*Math.PI),t.fill()}mouseMove(t){throw new Error("Method not implemented.")}click(t){throw new Error("Method not implemented.")}}!function(t){t[t.AddStarLayer=0]="AddStarLayer",t[t.RemoveStarLayer=1]="RemoveStarLayer",t[t.ChangeNumberOfStars=2]="ChangeNumberOfStars",t[t.ChangeSpeed=3]="ChangeSpeed",t[t.ChangeSizes=4]="ChangeSizes"}(h||(h={}));class y extends g{constructor(t){super(),this.starLayer=t,this.settingsUpdated=(t=>{switch(t){case h.ChangeNumberOfStars:this.updateNumberOfStars()}}),this.updateNumberOfStars=(()=>{this.triggerUpdateLayout()}),Z.settingManager.update.addEventListener(this.settingsUpdated),this.disableMouseEvents(),this.triggerUpdateLayout()}updateLayout(t,e){this.children=[];for(const t of this.starLayer.stars)this.children.push(new p(t))}mouseMove(t){}click(t){}}!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(o||(o={}));class v{constructor(){this.state=o.hidden}}class f{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.addEventListenerIfNotExists=(t=>{!t||this.listeners.indexOf(t)>=0||this.listeners.push(t)}),this.dispatchEvent=(()=>{for(let t=0;t<this.listeners.length;t++){(0,this.listeners[t])()}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)}),this.removeEventListenerIfExists=(t=>{!t||this.listeners.indexOf(t)<0||this.listeners.splice(this.listeners.indexOf(t),1)})}}class w{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=(t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class L{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=((t,e)=>{for(let i=0;i<this.listeners.length;i++){(0,this.listeners[i])(t,e)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class x{constructor(){this.drawFunctions=[],this.dpr=1,this.dprScalingEnabled=!0,this.enableDprScaling=(()=>{this.dprScalingEnabled=!0,this.resize()}),this.disableDprScaling=(()=>{this.dprScalingEnabled=!1,this.resize()}),this.resized=new f,this.resize=(()=>{this.dpr=this.dprScalingEnabled&&window.devicePixelRatio||1,this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight,this.resized.dispatchEvent()}),this.draw=(()=>{this.ctx.save(),this.ctx.scale(this.dpr,this.dpr);for(const t of this.drawFunctions)t(this.ctx,this.width,this.height);this.ctx.restore()}),this.addDrawFunction=(t=>{this.drawFunctions.push(t)}),this.removeDrawFunction=(t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)})}get width(){return this.canvas.clientWidth/this.dpr}get height(){return this.canvas.clientHeight/this.dpr}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new x;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}x.cursorLock=null,x.SetCursor=((t,e)=>{e?(document.body.style.cursor="pointer",x.cursorLock=t):t==x.cursorLock&&(document.body.style.cursor="default",x.cursorLock=null)});class S extends m{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new w,this.click=(t=>{this.isEnabled&&this.dimensions.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)})}mouseMove(t){this.isEnabled&&(this.dimensions.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,x.SetCursor(this.name,!0)):(this.isMouseOver=!1,x.SetCursor(this.name,!1)))}mouseDown(t){}mouseUp(t){}}class b{constructor(){this.fontSize=40,this.fontPrefix="",this.fontFamily="fontawesome",this.fillStyle="blue",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0,this.getFont=(()=>{var t="";return this.fontPrefix&&(t+=this.fontPrefix+" "),t+=this.fontSize+"px "+this.fontFamily})}}class V extends S{constructor(){super(...arguments),this.properties=new b,this.render=(t=>{this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.dimensions.x,this.dimensions.y)}),this.updateLayout=((t,e)=>{super.updateLayout(t,e),t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top";var i=t.measureText(this.text),n=this.alignement.calculateDimensionsX(e,i.width),a=this.alignement.calculateDimensionsY(e,this.properties.fontSize);this.dimensions=new s(n,a,i.width,this.properties.fontSize)})}}!function(t){t[t.Horizontal=0]="Horizontal",t[t.Vertical=1]="Vertical"}(d||(d={}));class C{constructor(){this.itemSpacing=30,this.orientation=d.Vertical}}class E extends g{constructor(){super(...arguments),this.properties=new C,this.addItem=(t=>{t.alignement.horizontalAlign=a.Left,t.alignement.verticalAlign=r.Top,this.children.push(t),this.triggerUpdateLayout()}),this.removeItem=(t=>{this.children.removeItem(t),this.triggerUpdateLayout()})}updateLayout(t,e){super.updateLayout(t,e);var i=this.alignement.calculateDimensionsX(e,this.dimensions.width),n=this.alignement.calculateDimensionsY(e,this.dimensions.height),a=0,r=0;if(this.properties.orientation==d.Vertical)for(let e=0;e<this.children.length;e++){const h=this.children[e];e>0&&(n+=this.properties.itemSpacing,r+=this.properties.itemSpacing),h.updateLayout(t,new s(i,n,0,0)),n+=h.dimensions.height,r+=h.dimensions.height,a=Math.max(a,h.dimensions.width)}else for(let e=0;e<this.children.length;e++){const h=this.children[e];e>0&&(i+=this.properties.itemSpacing,a+=this.properties.itemSpacing),h.updateLayout(t,new s(i,n,0,0)),i+=h.dimensions.width,a+=h.dimensions.width,r=Math.max(r,h.dimensions.height)}this.dimensions.x==i&&this.dimensions.y==n&&this.dimensions.width==a&&this.dimensions.height==r||(this.dimensions.x=i,this.dimensions.y=n,this.dimensions.height=r,this.dimensions.width=a,this.updateLayout(t,e))}}class I extends S{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValue=50,this.valueChanged=new w,this.updateLayout=((t,e)=>{super.updateLayout(t,e),this.dimensions=new s(e.x,e.y,200,2*this.radius)}),this.mouseDown=(t=>{this.dimensions.isHitBy(t.clientX,t.clientY)&&(this.isDragging=!0,this.updateCurrentValue(t))}),this.mouseUp=(t=>{this.isDragging=!1})}render(t){var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke();var s=(this.currentValue-this.minValue)/(this.maxValue-this.minValue);t.fillStyle="blue",t.beginPath(),t.arc(e+this.radius+(this.dimensions.width-2*this.radius)*s,i+this.dimensions.height/2,this.radius,0,2*Math.PI),t.closePath(),t.fill()}mouseMove(t){super.mouseMove(t),this.isDragging&&this.updateCurrentValue(t)}updateCurrentValue(t){var e=t.clientX-this.dimensions.x-this.radius;(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),this.currentValue=e,this.valueChanged.dispatchEvent(this.currentValue)}}class M extends S{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValueLow=25,this.currentValueHigh=75,this.minDiff=.1,this.valuesChanged=new L,this.updateLayout=((t,e)=>{super.updateLayout(t,e),this.dimensions=new s(e.x,e.y,200,2*this.radius)}),this.mouseDown=(t=>{if(this.dimensions.isHitBy(t.clientX,t.clientY)){var e=this.getClickedValue(t),i=Math.abs(this.currentValueLow-e),s=Math.abs(this.currentValueHigh-e);i==s?e<this.currentValueLow?this.isDraggingLow=!0:this.isDraggingHigh=!0:i>s?this.isDraggingHigh=!0:this.isDraggingLow=!0,this.updateCurrentValues(t)}}),this.mouseUp=(t=>{this.isDraggingHigh=!1,this.isDraggingLow=!1})}render(t){var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke(),t.fillStyle="blue";var s=i+this.dimensions.height/2,n=(this.currentValueLow-this.minValue)/(this.maxValue-this.minValue),a=e+this.radius+(this.dimensions.width-2*this.radius)*n,r=(this.currentValueHigh-this.minValue)/(this.maxValue-this.minValue),h=e+this.radius+(this.dimensions.width-2*this.radius)*r;t.strokeStyle="blue",t.lineWidth=2,t.beginPath(),t.moveTo(a,s),t.lineTo(h,s),t.stroke(),t.beginPath(),t.arc(a,s,this.radius,0,2*Math.PI),t.closePath(),t.fill(),t.beginPath(),t.arc(h,s,this.radius,0,2*Math.PI),t.closePath(),t.fill()}mouseMove(t){super.mouseMove(t),(this.isDraggingHigh||this.isDraggingLow)&&this.updateCurrentValues(t)}updateCurrentValues(t){var e=this.getClickedValue(t);this.isDraggingLow?e>this.currentValueHigh-this.minDiff&&(e=this.currentValueHigh-this.minDiff):e<this.currentValueLow+this.minDiff&&(e=this.currentValueLow+this.minDiff),this.isDraggingLow?this.currentValueLow=e:this.currentValueHigh=e,this.valuesChanged.dispatchEvent(this.currentValueLow,this.currentValueHigh)}getClickedValue(t){var e=t.clientX-this.dimensions.x-this.radius;return(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),e}}class A extends g{constructor(t){super(),this.starLayer=t,this.numberOfStarsChanged=(t=>{Z.settingManager.changeNumberOfStars(this.starLayer,Math.round(t))}),this.speedChanged=(t=>{Z.settingManager.changeSpeed(this.starLayer,t)}),this.sizesChanged=((t,e)=>{Z.settingManager.changeSizes(this.starLayer,t,e)}),this.settingsList=new E,this.settingsList.alignement.horizontalAlign=a.Left,this.settingsList.alignement.verticalAlign=r.Top;var e=new V;e.text="Remove Layer",e.properties.fillStyle="white",this.settingsList.addItem(e),this.children.push(e),e.clicked.addEventListener(t=>{Z.settingManager.removeStarLayer(this.starLayer)});var i=new I;i.minValue=10,i.maxValue=1e3,i.currentValue=t.stars.length,this.children.push(i),this.settingsList.addItem(i),i.valueChanged.addEventListener(this.numberOfStarsChanged);var s=new I;s.minValue=0,s.maxValue=30,s.currentValue=t.speed,this.children.push(s),this.settingsList.addItem(s),s.valueChanged.addEventListener(this.speedChanged);var n=new M,h=this.starLayer.stars.map(t=>t.r);n.minValue=.01,n.maxValue=5,n.currentValueLow=Math.min(...h),n.currentValueHigh=Math.max(...h),this.children.push(n),this.settingsList.addItem(n),n.valuesChanged.addEventListener(this.sizesChanged)}updateLayout(t,e){this.settingsList.updateLayout(t,new s(e.x,e.y,0,0))}}class F extends g{constructor(){super(),this.viewModel=new v,this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.layerButtons=[],this.settingsUpdated=(t=>{switch(t){case h.AddStarLayer:for(const t of Z.settings.starLayers)if(!this.layerButtons.map(t=>t.tag).contains(t)){this.settingsList.removeItem(this.addLayerBtn);var e=new V;e.text="Edit Layer",e.tag=t,e.properties.fillStyle="white",this.settingsList.addItem(e),this.layerButtons.push(e),e.clicked.addEventListener(e=>{this.toggleShowHideStarLayerView(t)}),this.settingsList.addItem(this.addLayerBtn);break}break;case h.RemoveStarLayer:for(const t of this.layerButtons)if(!Z.settings.starLayers.contains(t.tag)){this.settingsList.removeItem(t),this.layerButtons.removeItem(t);break}this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0}}),this.toggleShowHideStarLayerView=(t=>{if(this.detailedStarLayerView)if(this.detailedStarLayerView.starLayer!=t){this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;e=new A(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}else this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;else{var e=new A(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}}),this.showHideOverlayClicked=(t=>{this.viewModel.state==o.visible?this.setState(o.beforeVisible):this.setState(o.visible)}),this.mouseMove=(t=>{this.viewModel.state!=o.hidden&&this.viewModel.state!=o.beforeVisible||this.setState(o.beforeVisible),super.mouseMove(t)}),this.mouseInactivityHandler=(()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.viewModel.state==o.beforeVisible&&this.setState(o.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))}),this.setState=(t=>{switch(t){case o.hidden:this.children.removeItem(this.showOverLayerButton),this.viewModel.state=o.hidden;break;case o.beforeVisible:this.lastMoved=Date.now(),this.viewModel.state==o.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.addItemIfNotExists(this.showOverLayerButton)),this.viewModel.state==o.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.removeItemIfExists(this.settingsList),this.children.removeItemIfExists(this.detailedStarLayerView),this.detailedStarLayerView=void 0),this.viewModel.state=o.beforeVisible;break;case o.visible:this.viewModel.state==o.beforeVisible&&this.children.push(this.settingsList),this.viewModel.state=o.visible}}),this.showOverLayerButton=new V,this.showOverLayerButton.text="Show/Hide Settings",this.showOverLayerButton.properties.fillStyle="green",this.showOverLayerButton.alignement.verticalAlign=r.Top,this.showOverLayerButton.alignement.horizontalAlign=a.Left,this.showOverLayerButton.clicked.addEventListener(this.showHideOverlayClicked),this.showOverLayerButton.properties.backgroundFillStyle="rgba(0, 0, 0, 0.5)",this.children.push(this.showOverLayerButton),this.settingsList=new E,this.settingsList.alignement.horizontalAlign=a.Left,this.settingsList.alignement.verticalAlign=r.Top;var t=new V;t.text="Add Layer",t.properties.fillStyle="white",this.settingsList.addItem(t),t.clicked.addEventListener(t=>{Z.settingManager.addStarLayer()}),this.addLayerBtn=t,Z.settingManager.update.addEventListener(this.settingsUpdated)}updateLayout(t,e){super.updateLayout(t,e),this.showOverLayerButton.updateLayout(t,e);var i=2*this.showOverLayerButton.dimensions.height;this.settingsList.updateLayout(t,new s(e.x,e.y+i,e.width,e.height-i)),this.detailedStarLayerView&&this.detailedStarLayerView.updateLayout(t,new s(e.x+this.settingsList.dimensions.width,e.y+i,e.width,e.height-i))}}class O{constructor(t){this.starLayer=t,this.update=(t=>{for(const e of this.starLayer.stars)e.x+=this.starLayer.speed*t,e.x>Z.settings.width&&(e.x-=Z.settings.width)})}}class k{}k.instances={},k.addInstance=((t,e)=>{k.instances[t]=e}),k.getInstance=(t=>k.instances[t]);class D extends g{constructor(){super(),this.playIconText="",this.pauseIconText="",this.stopIconText="",this.nextIconText="",this.previousIconText="";var t=k.getInstance("audio"),e=new E;e.alignement.verticalAlign=r.Bottom,e.alignement.margin.bottom=10,e.properties.orientation=d.Horizontal,this.children.push(e);var i=new V;i.properties.fontPrefix="900",i.properties.fontFamily="'Font Awesome 5 Free'",i.text=this.playIconText,i.clicked.addEventListener(()=>{i.text==this.playIconText?(t.play(),i.text=this.pauseIconText):(t.pause(),i.text=this.playIconText)}),e.addItem(i);var s=new V;s.properties.fontPrefix="900",s.properties.fontFamily="'Font Awesome 5 Free'",s.text=this.stopIconText,s.clicked.addEventListener(()=>{t.stop(),i.text==this.pauseIconText&&(i.text=this.playIconText)}),e.addItem(s);var n=new V;n.properties.fontPrefix="900",n.properties.fontFamily="'Font Awesome 5 Free'",n.text=this.previousIconText,n.clicked.addEventListener(()=>{t.previous()}),e.addItem(n);var a=new V;a.properties.fontPrefix="900",a.properties.fontFamily="'Font Awesome 5 Free'",a.text=this.nextIconText,a.clicked.addEventListener(()=>{t.next()}),e.addItem(a)}updateLayout(t,e){super.updateLayout(t,e);for(const e of this.children)e.updateLayout(t,this.bounds)}}!function(t){t[t.FitAndOverfill=0]="FitAndOverfill",t[t.FitAndSpace=1]="FitAndSpace"}(l||(l={}));class T{constructor(){this.imageScalingMode=l.FitAndSpace,this.scale=1}}class P extends S{constructor(t){super(),this.properties=new T,this.render=(t=>{super.render(t),t.drawImage(this.image,this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height),this.isMouseOver&&this.isEnabled&&(t.fillStyle="rgba(255,255,255,0.5)",t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height))}),this.image=t}updateLayout(t,e){super.updateLayout(t,e);var i=1,s=this.image.naturalWidth/this.image.naturalHeight>e.width/e.height;switch(this.properties.imageScalingMode){case l.FitAndOverfill:i=s?e.height/this.image.height:e.width/this.image.width;break;case l.FitAndSpace:i=s?e.width/this.image.width:e.height/this.image.height}var n=this.image.naturalWidth*i,a=this.image.naturalHeight*i;this.dimensions.x=this.alignement.calculateDimensionsX(e,n),this.dimensions.y=this.alignement.calculateDimensionsY(e,n),this.dimensions.width=n,this.dimensions.height=a}}P.createFromUrl=(t=>new Promise((e,i)=>{var s=new Image;s.src=t,s.onload=(()=>{e(new P(s))})}));class U extends g{constructor(){super();var t=k.getInstance("assets").getImage("background"),e=new P(t);e.disableMouseEvents(),e.properties.imageScalingMode=l.FitAndOverfill,this.children.push(e)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class N extends g{constructor(){super(),this.starLayers=[],this.starAnimators=[],this.appSettingsUpdated=(t=>{switch(t){case h.AddStarLayer:this.addStarLayer();break;case h.RemoveStarLayer:this.removeStarLayer()}}),this.addStarLayer=(()=>{for(const i of Z.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==i)){var t=new y(i);this.starLayers.push(t),this.children.splice(1,0,t),this.triggerUpdateLayout();var e=new O(i);this.animation.addUpdateFunction(e.update),this.starAnimators.push(e);break}}),this.removeStarLayer=(()=>{for(const e of this.starLayers)if(null==Z.settings.starLayers.firstOrDefault(t=>t==e.starLayer)){var t=this.starAnimators.first(t=>t.starLayer==e.starLayer);this.animation.removeUpdateFunction(t.update),this.starAnimators.removeItem(t),this.children.remove(t=>t==e),this.starLayers.remove(t=>t==e),this.triggerUpdateLayout()}}),this.animation=k.getInstance("animation"),this.settingsOverlay=new F,this.playerView=new D,this.children.push(new U),this.children.push(this.playerView),this.children.push(this.settingsOverlay),Z.settingManager.update.addEventListener(this.appSettingsUpdated)}updateLayout(t,e){super.updateLayout(t,e),console.log(e);for(const i of this.children)i.updateLayout(t,e)}}class B{constructor(){this.stars=[],this.speed=20*Math.random()+5}}class H{constructor(){this.updateFunctions=[],this.isRunning=!1,this.addUpdateFunction=(t=>{this.updateFunctions.push(t)}),this.removeUpdateFunction=(t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)}),this.setFps=(t=>{this.fps=t,this.fpsInterval=1e3/this.fps}),this.animationLoop=(()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var i=e/1e3;for(const t of this.updateFunctions)t(i)}}),this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class z{constructor(){this.loadFontawesomeFree=(()=>this.loadFont("","","900 20px 'Font Awesome 5 Free'")),this.loadFontawesomeBrands=(()=>this.loadFont("","","400 20px 'Font Awesome 5 Brands'")),this.countPixels=(t=>{var e=0;for(let r=0;r<t.data.length;r+=4){var i=t.data[r],s=t.data[r+1],n=t.data[r+2],a=t.data[r+3];i<50&&s<50&&n<50&&a>.9&&e++}return e}),this.getIconPixels=((t,e,i)=>{t.clearRect(0,0,e.width,e.height),t.fillText(i,0,0);var s=t.getImageData(0,0,e.width,e.height);return this.countPixels(s)}),this.loadFont=((t,e,i)=>{var s=10;return new Promise((n,a)=>{console.log('loading font "'+i+'"');var r=document.createElement("canvas");r.width=20,r.height=20;var h=r.getContext("2d");h.font=i,h.fillStyle="black",h.textAlign="left",h.textBaseline="top";var o=()=>{var a=this.getIconPixels(h,r,t),d=this.getIconPixels(h,r,e);Math.abs(d-a)>5?(console.log('loaded font "'+i+'"'),n()):0==--s?console.log("stop loading font after "+s+" retries with 500ms delay"):setTimeout(()=>{o()},500)};o()})})}}class K{constructor(t,e){this.name=t,this.audioCtx=e}}class R extends K{constructor(){super(...arguments),this.getAudioNode=(()=>this.analyserNode)}reload(){return new Promise((t,e)=>{this.analyserNode||(this.analyserNode=this.audioCtx.createAnalyser()),this.analyserNode.fftSize=32,this.analyserNode.smoothingTimeConstant=.9,this.bufferLength=this.analyserNode.frequencyBinCount,this.dataArray=new Uint8Array(this.bufferLength),t()})}getSpectrum(){return this.analyserNode?(this.analyserNode.getByteFrequencyData(this.dataArray),this.dataArray):new Uint8Array(0)}getWave(){return this.analyserNode?(this.analyserNode.getByteTimeDomainData(this.dataArray),this.dataArray):new Uint8Array(0)}}class X extends K{constructor(){super(...arguments),this.getAudioNode=(()=>this.audioCtx.destination)}reload(){}}class Y extends K{constructor(t,e,i){super(t,e),this.audioEnded=new f,this.audioEndedEvent=(()=>{this.audioEnded.dispatchEvent()}),this.getAudioNode=(()=>this.source),this.play=(()=>{this.audio.play()}),this.pause=(()=>{this.audio.pause()}),this.stop=(()=>{this.audio.pause(),this.audio.currentTime=0}),this.setUrl=(t=>{var e=!this.audio.paused;this.url=t,this.audio.src=t,this.audio.load(),e&&this.audio.play()}),this.url=i,this.audio=document.createElement("audio"),this.audio.controls=!0,this.audio.src=this.url,this.audio.addEventListener("ended",this.audioEndedEvent)}reload(){return new Promise((t,e)=>{this.source||(this.source=this.audioCtx.createMediaElementSource(this.audio)),t()})}}class W{constructor(){this.audioNodes=[],this.addMediaElementSource=((t,e)=>{var i=new Y(t,this.audioCtx,e);return this.audioNodes.push(i),i}),this.addAnalyzer=(t=>{var e=new R(t,this.audioCtx);return this.audioNodes.push(e),e}),this.getAudioGraphNode=(t=>this.audioNodes.first(e=>e.name==t)),this.audioContextStateChanged=new w,this.documentClick=(()=>{"suspended"===this.audioCtx.state&&(this.audioCtx.resume(),document.removeEventListener("click",this.documentClick))}),this.audioContextStateChangedEvaluator=(()=>{"running"===this.audioCtx.state&&(console.log("audio context state changed"),this.audioCtx.removeEventListener("statechange",this.audioContextStateChangedEvaluator),this.reload().then(()=>{this.audioContextStateChanged.dispatchEvent(this.audioCtx.state)}))}),this.reload=(()=>new Promise((t,e)=>{console.log("realoading audio graph"),Promise.all(this.audioNodes.map(t=>t.reload())).then(()=>{console.log("reloaded audio graph");for(let t=0;t<this.audioNodes.length;t++){const e=this.audioNodes[t];e.getAudioNode().disconnect(),t<this.audioNodes.length-1?e.getAudioNode().connect(this.audioNodes[t+1].getAudioNode()):e.getAudioNode().connect(this.destinationNode.getAudioNode())}t()})})),this.audioCtx=new AudioContext,this.audioCtx.addEventListener("statechange",this.audioContextStateChangedEvaluator),"suspended"===this.audioCtx.state&&(document.addEventListener("click",this.documentClick),console.log("Audio context is suspended. Click the dom to make it running.")),this.destinationNode=new X("destination",this.audioCtx)}}var j=i(0),_=i.n(j);class G{constructor(){this.songs=[_.a,_.a,_.a,_.a,_.a,_.a,_.a],this.reload=(()=>this.audioGraph.reload()),this.play=(()=>{this.source.play()}),this.pause=(()=>{this.source.pause()}),this.next=(()=>{var t=this.songs.indexOf(this.source.url)+1;t==this.songs.length&&(t=0),this.source.setUrl(this.songs[t])}),this.previous=(()=>{var t=this.songs.indexOf(this.source.url)-1;-1==t&&(t=this.songs.length-1),this.source.setUrl(this.songs[t])}),this.stop=(()=>{this.source.stop()}),this.audioGraph=new W,this.source=this.audioGraph.addMediaElementSource("source",this.songs[0]),this.analyser=this.audioGraph.addAnalyzer("analyser")}}class q{constructor(){this.imageAssets=[],this.addImage=((t,e)=>{this.imageAssets.push({name:t,url:e,image:void 0})}),this.getImage=(t=>{var e=this.imageAssets.firstOrDefault(e=>e.name==t);return e?e.image:void 0}),this.load=(()=>Promise.all(this.imageAssets.map(t=>new Promise((e,i)=>{if(t.image)e();else{var s=new Image;s.src=t.url,s.onload=(()=>{t.image=s,e()})}}))))}}var J=i(1),Q=i.n(J);class Z{constructor(){this.run=(()=>{document.body.style.backgroundColor="black",console.log("loading app"),Promise.all([(new z).loadFontawesomeFree(),new Promise((t,e)=>{var i=new G;i.reload(),k.addInstance("audio",i),t()}),new Promise((t,e)=>{var i=x.createFullScreen(),s=new n(i),a=new H;a.addUpdateFunction(i.draw),k.addInstance("canvas",i),k.addInstance("stage",s),k.addInstance("animation",a),t()}),new Promise((t,e)=>{var i=new q;k.addInstance("assets",i),i.addImage("background",Q.a),i.load().then(()=>{t()})})]).then(()=>{console.log("loaded app");var t=k.getInstance("stage"),e=new N;t.setView(e),Z.settingManager.addStarLayer(),Z.settingManager.addStarLayer()})})}}Z.settings=new class{constructor(t,e){this.width=t,this.height=e,this.starLayers=[]}}(window.innerWidth,window.innerHeight),Z.settingManager=new class{constructor(){this.update=new w,this.addStarLayer=(()=>{var t=new B;for(let e=0;e<100;e++)t.stars.push({x:Math.random()*Z.settings.width,y:Math.random()*Z.settings.height,r:2*Math.random()+.05});Z.settings.starLayers.push(t),this.update.dispatchEvent(h.AddStarLayer)}),this.removeStarLayer=(t=>{Z.settings.starLayers.removeItem(t),this.update.dispatchEvent(h.RemoveStarLayer)}),this.changeNumberOfStars=((t,e)=>{if(e>0){var i=e-t.stars.length;if(i>0)for(let e=0;e<i;e++)t.stars.push({x:Math.random()*Z.settings.width,y:Math.random()*Z.settings.height,r:2*Math.random()+.05});else if(i<0)for(let e=0;e<-i;e++)t.stars.splice(Math.floor(Math.random()*t.stars.length),1);this.update.dispatchEvent(h.ChangeNumberOfStars)}}),this.changeSpeed=((t,e)=>{t.speed=e,this.update.dispatchEvent(h.ChangeSpeed)}),this.changeSizes=((t,e,i)=>{var s=t.stars.map(t=>t.r),n=Math.min(...s),a=Math.max(...s)-n;a<=0&&(a=1e-4);for(const s of t.stars)s.r=(s.r-n)/a*(i-e)+e;this.update.dispatchEvent(h.ChangeSpeed)})}};i(2);document.addEventListener("DOMContentLoaded",function(){(new Z).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,