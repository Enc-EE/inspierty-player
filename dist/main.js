!function(t){var e={};function s(i){if(e[i])return e[i].exports;var r=e[i]={i:i,l:!1,exports:{}};return t[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)s.d(i,r,function(e){return t[e]}.bind(null,r));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=1)}([function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var s=e(t)+1,i=this.firstOrDefault(t=>e(t)==s);return i||(i=this.first(t=>1==e(t))),i},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,s){"use strict";s.r(e);class i{constructor(){this.drawFunctions=[],this.resize=(()=>{console.log("canvas.resize()"),this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight}),this.draw=(()=>{for(const t of this.drawFunctions)t(this.ctx,this.width,this.height)}),this.addDrawFunction=(t=>{this.drawFunctions.push(t)}),this.removeDrawFunction=(t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)})}get width(){return this.canvas.width}get height(){return this.canvas.height}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new i;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}i.cursorLock=null,i.SetCursor=((t,e)=>{e?(document.body.style.cursor="pointer",i.cursorLock=t):t==i.cursorLock&&(document.body.style.cursor="default",i.cursorLock=null)});class r{constructor(t,e,s,i){this.x=t,this.y=e,this.width=s,this.height=i,this.collidesWith=(t=>{var e=!1,s=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(s=!0):t.y<=this.y&&t.y+t.width>this.y&&(s=!0)),e&&s}),this.isHitBy=((t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height)}}class n{constructor(){this.updateFunctions=[],this.isRunning=!1,this.addUpdateFunction=(t=>{this.updateFunctions.push(t)}),this.removeUpdateFunction=(t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)}),this.setFps=(t=>{this.fps=t,this.fpsInterval=1e3/this.fps}),this.animationLoop=(()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var s=e/1e3;for(const t of this.updateFunctions)t(s)}}),this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(console.log("play"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(console.log("pause"),this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class o{constructor(t){this.canvas=t,this.mouseMove=(t=>{this.view.mouseMove(t)}),this.click=(t=>{this.view&&this.view.click(t)}),this.render=((t,e,s)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new r(0,0,e,s)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,s),this.view.render(t))}),this.setView=(t=>{this.view=t,this.shouldUpdateLayout=!0}),t.addDrawFunction(this.render),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("click",this.click)}static create(){var t=i.createFullScreen(),e=new o(t);return(new n).addUpdateFunction(t.draw),e}}class a{constructor(){this.generateNewId=(()=>(a.idCounter++,a.idCounter)),this.bounds=new r(0,0,0,0),this.id=this.generateNewId(),this.name="object "+this.id}}var h,d,l,u;a.idCounter=0,function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(h||(h={})),function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom"}(d||(d={}));class c{constructor(){this.horizontalAlign=h.Center,this.verticalAlign=d.Center}}class y extends a{constructor(){super(...arguments),this.children=[],this.shouldUpdateLayout=!1,this.alignement=new c,this.triggerUpdateLayout=(()=>{this.shouldUpdateLayout=!0})}render(t){this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1);for(const e of this.children)e.render(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}class p extends a{constructor(t){super(),this.star=t}render(t){t.fillStyle="white",t.beginPath(),t.arc(this.star.x,this.star.y,this.star.r,0,2*Math.PI),t.fill()}mouseMove(t){throw new Error("Method not implemented.")}click(t){throw new Error("Method not implemented.")}}!function(t){t[t.AddStarLayer=0]="AddStarLayer",t[t.RemoveStarLayer=1]="RemoveStarLayer",t[t.ChangeNumberOfStars=2]="ChangeNumberOfStars"}(l||(l={}));class g extends y{constructor(t){super(),this.starLayer=t,this.settingsUpdated=(t=>{switch(t){case l.ChangeNumberOfStars:this.updateNumberOfStars()}}),this.updateNumberOfStars=(()=>{this.starLayer.stars.length!=this.children.length&&this.triggerUpdateLayout()}),C.settingManager.update.addEventListener(this.settingsUpdated),this.triggerUpdateLayout()}updateLayout(t,e){this.children=[];for(const t of this.starLayer.stars)this.children.push(new p(t))}mouseMove(t){}click(t){}}!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(u||(u={}));class v{constructor(){this.state=u.hidden}}class f{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=(t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class m extends a{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new f,this.alignement=new c,this.mouseMove=(t=>{this.isEnabled&&(this.bounds.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,i.SetCursor(this.name,!0)):(this.isMouseOver=!1,i.SetCursor(this.name,!1)))}),this.click=(t=>{this.isEnabled&&this.bounds.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)})}}class w{constructor(){this.fontSize=40,this.fillStyle="black",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0}}class L extends m{constructor(){super(...arguments),this.properties=new w,this.isVisible=!0,this.render=(t=>{this.isVisible&&(this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.bounds.x,this.bounds.y,this.bounds.width,this.bounds.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.fontSize+"px Arial",t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.bounds.x,this.bounds.y))}),this.align=((t,e)=>{t.font=this.properties.fontSize+"px Arial",t.textAlign="left",t.textBaseline="top";var s=t.measureText(this.text),i=new r(0,0,s.width,this.properties.fontSize);switch(console.log(this.alignement),this.alignement.horizontalAlign){case h.Left:i.x=e.x;break;case h.Center:i.x=e.x-s.width/2;break;case h.Right:i.x=e.x-s.width}switch(this.alignement.verticalAlign){case d.Top:i.y=e.y;break;case d.Center:i.y=e.y-this.properties.fontSize/2;break;case d.Bottom:i.y=e.y-this.properties.fontSize}this.bounds=i})}}class b{constructor(t,e){this.x=t,this.y=e}}class x{constructor(t,e){this.x=t,this.y=e}}class S extends y{constructor(){super(...arguments),this.spacing=30,this.controls=[],this.layoutViews=[],this.addControl=(t=>{t.alignement=this.alignement,this.controls.push(t),this.children.push(t),this.triggerUpdateLayout()}),this.removeControl=(t=>{this.controls.removeItem(t),this.children.removeItem(t),this.triggerUpdateLayout()}),this.addLayoutView=(t=>{t.alignement=this.alignement,this.layoutViews.push(t),this.children.push(t),this.triggerUpdateLayout()}),this.removeLayoutView=(t=>{this.layoutViews.removeItem(t),this.children.removeItem(t),this.triggerUpdateLayout()})}updateLayout(t,e){var s=0;switch(this.alignement.horizontalAlign){case h.Left:s=e.x;break;case h.Center:s=e.x-e.width/2;break;case h.Right:s=e.x-e.width}this.bounds.x=s;var i=0;switch(this.alignement.verticalAlign){case d.Top:i=e.y;break;case d.Center:i=e.y-e.height/2;break;case d.Bottom:i=e.y-e.height}this.bounds.y=i;var n=0,o=0;for(const e of this.children)if(this.children.indexOf(e)>0&&(i+=this.spacing,o+=this.spacing),this.controls.contains(e)){var a=e;console.log(i),a.align(t,new x(s,i)),i+=a.bounds.height,o+=a.bounds.height,n=Math.max(n,a.bounds.width)}else{if(!this.layoutViews.contains(e))throw new Error("Error: 280420191625");var l=e;l.updateLayout(t,new r(s,i,0,0)),i+=l.bounds.height,o+=a.bounds.height,n=Math.max(n,l.bounds.width)}o==this.bounds.height&&n==this.bounds.width||(this.bounds.height=o,this.bounds.width=n,this.updateLayout(t,new r(e.x,e.y,this.bounds.width,this.bounds.height)))}}class M extends y{constructor(){super(),this.viewModel=new v,this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.layerButtons=[],this.settingsUpdated=(t=>{switch(t){case l.AddStarLayer:for(const t of C.settings.starLayers)if(!this.layerButtons.map(t=>t.tag).contains(t)){this.settingsList.removeControl(this.addLayerBtn);var e=new L;e.text="Remove Layer",e.tag=t,e.properties.fillStyle="white",this.settingsList.addControl(e),this.layerButtons.push(e),e.clicked.addEventListener(e=>{C.settingManager.removeStarLayer(t)}),this.settingsList.addControl(this.addLayerBtn);break}break;case l.RemoveStarLayer:for(const t of this.layerButtons)if(!C.settings.starLayers.contains(t.tag)){this.settingsList.removeControl(t),this.layerButtons.removeItem(t);break}}}),this.showHideOverlayClicked=(t=>{this.viewModel.state==u.visible?this.setState(u.beforeVisible):this.setState(u.visible)}),this.mouseMove=(t=>{this.viewModel.state!=u.hidden&&this.viewModel.state!=u.beforeVisible||this.setState(u.beforeVisible),super.mouseMove(t)}),this.mouseInactivityHandler=(()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.viewModel.state==u.beforeVisible&&this.setState(u.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))}),this.setState=(t=>{switch(t){case u.hidden:this.showOverLayerButton.isVisible=!1,this.viewModel.state=u.hidden;break;case u.beforeVisible:this.lastMoved=Date.now(),this.viewModel.state==u.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.showOverLayerButton.isVisible=!0),this.viewModel.state==u.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.removeItemIfExists(this.settingsList)),this.viewModel.state=u.beforeVisible;break;case u.visible:this.viewModel.state==u.beforeVisible&&this.children.push(this.settingsList),this.viewModel.state=u.visible}}),this.showOverLayerButton=new L,this.showOverLayerButton.text="Show/Hide Settings",this.showOverLayerButton.properties.fillStyle="green",this.showOverLayerButton.alignement.verticalAlign=d.Top,this.showOverLayerButton.alignement.horizontalAlign=h.Left,this.showOverLayerButton.clicked.addEventListener(this.showHideOverlayClicked),this.showOverLayerButton.properties.backgroundFillStyle="rgba(0, 0, 0, 0.5)",this.children.push(this.showOverLayerButton),this.settingsList=new S,this.settingsList.alignement.horizontalAlign=h.Left,this.settingsList.alignement.verticalAlign=d.Top;var t=new L;t.text="Add Layer",t.properties.fillStyle="white",this.settingsList.addControl(t),t.clicked.addEventListener(t=>{C.settingManager.addStarLayer()}),this.addLayerBtn=t,C.settingManager.update.addEventListener(this.settingsUpdated)}updateLayout(t,e){this.showOverLayerButton.align(t,new b(e.x,e.y)),console.log(this.showOverLayerButton.bounds.height),this.settingsList.updateLayout(t,new r(0,2*this.showOverLayerButton.bounds.height,0,0))}}class O{constructor(t){this.starLayer=t,this.update=(t=>{for(const e of this.starLayer.stars)e.x+=this.starLayer.speed*t,e.x>C.settings.width&&(e.x-=C.settings.width)})}}class k extends y{constructor(){super(),this.starLayers=[],this.starAnimators=[],this.appSettingsUpdated=(t=>{switch(t){case l.AddStarLayer:this.addStarLayer();break;case l.RemoveStarLayer:this.removeStarLayer()}}),this.addStarLayer=(()=>{for(const s of C.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==s)){var t=new g(s);this.starLayers.push(t),this.children.splice(0,0,t),this.triggerUpdateLayout();var e=new O(s);this.anim.addUpdateFunction(e.update),this.starAnimators.push(e);break}}),this.removeStarLayer=(()=>{for(const s of C.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==s)){var t=this.starLayers.first(t=>t.starLayer==s);this.children.remove(e=>e==t),this.starLayers.remove(e=>e==t),this.triggerUpdateLayout();var e=this.starAnimators.first(t=>t.starLayer==s);this.anim.removeUpdateFunction(e.update),this.starAnimators.removeItem(e)}}),this.settingsOverlay=new M,this.children.push(this.settingsOverlay),this.anim=new n,C.settingManager.update.addEventListener(this.appSettingsUpdated)}updateLayout(t,e){for(const s of this.starLayers)s.updateLayout(t,e);this.settingsOverlay.updateLayout(t,e)}}class A{constructor(){this.stars=[],this.speed=20*Math.random()+5}}class C{constructor(){this.run=(()=>{console.log("hi"),document.body.style.backgroundColor="black";var t=o.create(),e=new k;t.setView(e)})}}C.settings=new class{constructor(t,e){this.width=t,this.height=e,this.starLayers=[]}}(window.innerWidth,window.innerHeight),C.settingManager=new class{constructor(){this.update=new f,this.addStarLayer=(()=>{var t=new A;for(let e=0;e<100;e++)t.stars.push({x:Math.random()*C.settings.width,y:Math.random()*C.settings.height,r:2*Math.random()+.05});C.settings.starLayers.push(t),this.update.dispatchEvent(l.AddStarLayer)}),this.removeStarLayer=(t=>{C.settings.starLayers.removeItem(t),this.update.dispatchEvent(l.RemoveStarLayer)}),this.changeNumberOfStars=((t,e)=>{if(e>0){var s=e-t.stars.length;if(s>0)for(let e=0;e<s;e++)t.stars.push({x:Math.random()*C.settings.width,y:Math.random()*C.settings.height,r:2*Math.random()+.05});else if(s<0)for(let e=0;e<s;e++)t.stars.splice(Math.floor(Math.random()*t.stars.length),1);this.update.dispatchEvent(l.ChangeNumberOfStars)}})}};s(0);document.addEventListener("DOMContentLoaded",function(){(new C).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,