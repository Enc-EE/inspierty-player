!function(t){var e={};function i(s){if(e[s])return e[s].exports;var a=e[s]={i:s,l:!1,exports:{}};return t[s].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(s,a,function(e){return t[e]}.bind(null,a));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=7)}([function(t,e,i){t.exports=i.p+"4548616750b49599e29ad31f27052fc7.mp3"},function(t,e,i){t.exports=i.p+"42e1c91573e0327cd3f17f251e8af2a6.mp3"},function(t,e,i){t.exports=i.p+"f1ceea5d555947c80281f368bfaf8fa8.mp3"},function(t,e,i){t.exports=i.p+"4f3b71289b7ebbf613233710c9237407.png"},function(t,e,i){t.exports=i.p+"6a43807098d8f46bbb8d5a51f7b14e46.png"},function(t,e,i){t.exports=i.p+"30c5d3ef9ae2db8ebf69cf21da84a7bc.png"},function(t,e){Array.prototype.firstOrDefault=function(t){for(const e of this)if(t(e))return e;return null},Array.prototype.first=function(t){for(const e of this)if(t(e))return e;throw console.log("item not found"),console.log(this),"item not found"},Array.prototype.getNext=function(t,e){var i=e(t)+1,s=this.firstOrDefault(t=>e(t)==i);return s||(s=this.first(t=>1==e(t))),s},Array.prototype.removeItem=function(t){var e=this.indexOf(t);if(-1==e)throw"item not found";this.splice(e,1)},Array.prototype.contains=function(t){return-1!==this.indexOf(t)},Array.prototype.removeItemIfExists=function(t){var e=this.indexOf(t);-1!=e&&this.splice(e,1)},Array.prototype.addItemIfNotExists=function(t){-1==this.indexOf(t)&&this.push(t)},Array.prototype.remove=function(t){this.removeItem(this.first(t))},Array.prototype.toList=function(){return this.filter(t=>!0)}},function(t,e,i){"use strict";i.r(e);class s{constructor(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s,this.collidesWith=(t=>{var e=!1,i=!1;return this.x<=t.x?this.x<=t.x&&this.x+this.width>t.x&&(e=!0):t.x<=this.x&&t.x+t.width>this.x&&(e=!0),e&&(this.y<=t.y?this.y<=t.y&&this.y+this.width>t.y&&(i=!0):t.y<=this.y&&t.y+t.width>this.y&&(i=!0)),e&&i}),this.isHitBy=((t,e)=>t>this.x&&t<this.x+this.width&&e>this.y&&e<this.y+this.height)}}class a{constructor(t){this.canvas=t,this.canvasResized=(()=>{this.shouldUpdateLayout=!0}),this.mouseDown=(t=>{this.view&&this.view.mouseDown({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.mouseUp=(t=>{this.view&&this.view.mouseUp({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.mouseMove=(t=>{this.view&&this.view.mouseMove({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.click=(t=>{this.view&&this.view.click({clientX:t.clientX/this.canvas.dpr,clientY:t.clientY/this.canvas.dpr,altKey:t.altKey,ctrlKey:t.ctrlKey,shiftKey:t.shiftKey})}),this.render=((t,e,i)=>{this.view&&(this.shouldUpdateLayout&&(this.view.updateLayout(t,new s(0,0,e,i)),this.shouldUpdateLayout=!1),t.clearRect(0,0,e,i),this.view.render(t))}),this.setView=(t=>{this.view=t,this.shouldUpdateLayout=!0}),t.addDrawFunction(this.render),t.resized.addEventListener(this.canvasResized),document.addEventListener("mousedown",this.mouseDown),document.addEventListener("mouseup",this.mouseUp),document.addEventListener("mousemove",this.mouseMove),document.addEventListener("click",this.click)}}var n,r,h,o,d,l;!function(t){t[t.Left=0]="Left",t[t.Center=1]="Center",t[t.Right=2]="Right"}(n||(n={})),function(t){t[t.Top=0]="Top",t[t.Center=1]="Center",t[t.Bottom=2]="Bottom"}(r||(r={}));class u{constructor(){this.top=0,this.right=0,this.bottom=0,this.left=0}}class c{constructor(){this.horizontalAlign=n.Center,this.verticalAlign=r.Center,this.margin=new u,this.calculateDimensionsX=((t,e)=>{switch(this.horizontalAlign){case n.Left:return t.x+this.margin.left;case n.Center:return t.x+t.width/2-e/2;case n.Right:return t.x+t.width-e-this.margin.right}}),this.calculateDimensionsY=((t,e)=>{switch(this.verticalAlign){case r.Top:return t.y+this.margin.top;case r.Center:return t.y+t.height/2-e/2;case r.Bottom:return t.y+t.height-e-this.margin.bottom}})}}class p{constructor(){this.generateNewId=(()=>(p.idCounter++,p.idCounter)),this.bounds=new s(0,0,0,0),this.dimensions=new s(0,0,0,0),this.alignement=new c,this.shouldUpdateLayout=!1,this.triggerUpdateLayout=(()=>{this.shouldUpdateLayout=!0}),this.disableMouseEvents=(()=>{this.mouseDown=(()=>{}),this.mouseUp=(()=>{}),this.mouseMove=(()=>{}),this.click=(()=>{})}),this.id=this.generateNewId(),this.name="object "+this.id}render(t){this.shouldUpdateLayout&&(this.updateLayout(t,this.bounds),this.shouldUpdateLayout=!1)}updateLayout(t,e){this.bounds=e}}p.idCounter=0;class g extends p{constructor(){super(...arguments),this.children=[]}render(t){super.render(t);for(const e of this.children)e.render(t)}mouseDown(t){for(const e of this.children)e.mouseDown(t)}mouseUp(t){for(const e of this.children)e.mouseUp(t)}mouseMove(t){for(const e of this.children)e.mouseMove(t)}click(t){for(const e of this.children.toList())e.click(t)}}class m extends p{constructor(t){super(),this.star=t}mouseDown(t){}mouseUp(t){}render(t){var e=3*this.star.r,i=t.createRadialGradient(this.star.x,this.star.y,this.star.r,this.star.x,this.star.y,e);i.addColorStop(0,"rgba(255, 255, 255, 0.2)"),i.addColorStop(1,"rgba(255, 255, 255, 0)"),t.fillStyle=i,t.arc(this.star.x,this.star.y,e,0,2*Math.PI),t.fill(),t.fillStyle="white",t.beginPath(),t.arc(this.star.x,this.star.y,this.star.r,0,2*Math.PI),t.fill()}mouseMove(t){throw new Error("Method not implemented.")}click(t){throw new Error("Method not implemented.")}}!function(t){t[t.AddStarLayer=0]="AddStarLayer",t[t.RemoveStarLayer=1]="RemoveStarLayer",t[t.ChangeNumberOfStars=2]="ChangeNumberOfStars",t[t.ChangeSpeed=3]="ChangeSpeed",t[t.ChangeSizes=4]="ChangeSizes"}(h||(h={}));class y extends g{constructor(t){super(),this.starLayer=t,this.settingsUpdated=(t=>{switch(t){case h.ChangeNumberOfStars:this.updateNumberOfStars()}}),this.updateNumberOfStars=(()=>{this.triggerUpdateLayout()}),ht.settingManager.update.addEventListener(this.settingsUpdated),this.disableMouseEvents(),this.triggerUpdateLayout()}updateLayout(t,e){this.children=[];for(const t of this.starLayer.stars)this.children.push(new m(t))}mouseMove(t){}click(t){}}!function(t){t[t.hidden=0]="hidden",t[t.beforeVisible=1]="beforeVisible",t[t.visible=2]="visible"}(o||(o={}));class v{constructor(){this.state=o.hidden}}class f{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.addEventListenerIfNotExists=(t=>{!t||this.listeners.indexOf(t)>=0||this.listeners.push(t)}),this.dispatchEvent=(()=>{for(let t=0;t<this.listeners.length;t++){(0,this.listeners[t])()}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)}),this.removeEventListenerIfExists=(t=>{!t||this.listeners.indexOf(t)<0||this.listeners.splice(this.listeners.indexOf(t),1)})}}class w{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=(t=>{for(let e=0;e<this.listeners.length;e++){(0,this.listeners[e])(t)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class L{constructor(){this.listeners=[],this.addEventListener=(t=>{if(!t||this.listeners.indexOf(t)>=0)throw"listener already added";this.listeners.push(t)}),this.dispatchEvent=((t,e)=>{for(let i=0;i<this.listeners.length;i++){(0,this.listeners[i])(t,e)}}),this.removeEventListener=(t=>{if(!t||this.listeners.indexOf(t)<0)throw"listener not found";this.listeners.splice(this.listeners.indexOf(t),1)})}}class x{constructor(){this.drawFunctions=[],this.dpr=1,this.dprScalingEnabled=!0,this.enableDprScaling=(()=>{this.dprScalingEnabled=!0,this.resize()}),this.disableDprScaling=(()=>{this.dprScalingEnabled=!1,this.resize()}),this.resized=new f,this.resize=(()=>{this.dpr=this.dprScalingEnabled&&window.devicePixelRatio||1,this.canvas.width=this.canvas.clientWidth,this.canvas.height=this.canvas.clientHeight,this.resized.dispatchEvent()}),this.draw=(()=>{this.ctx.save(),this.ctx.scale(this.dpr,this.dpr);for(const t of this.drawFunctions)t(this.ctx,this.width,this.height);this.ctx.restore()}),this.addDrawFunction=(t=>{this.drawFunctions.push(t)}),this.removeDrawFunction=(t=>{this.drawFunctions.splice(this.drawFunctions.indexOf(t),1)})}get width(){return this.canvas.clientWidth/this.dpr}get height(){return this.canvas.clientHeight/this.dpr}static createFullScreen(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var t=document.createElement("canvas");document.body.appendChild(t),t.style.width="100%",t.style.height="100%";var e=new x;return e.canvas=t,e.ctx=t.getContext("2d"),window.addEventListener("resize",e.resize),e.resize(),e}}x.cursorLock=null,x.SetCursor=((t,e)=>{e?(document.body.style.cursor="pointer",x.cursorLock=t):t==x.cursorLock&&(document.body.style.cursor="default",x.cursorLock=null)});class S extends p{constructor(){super(...arguments),this.isMouseOver=!1,this.isEnabled=!0,this.clicked=new w,this.click=(t=>{this.isEnabled&&this.dimensions.isHitBy(t.clientX,t.clientY)&&this.clicked.dispatchEvent(this)})}mouseMove(t){this.isEnabled&&(this.dimensions.isHitBy(t.clientX,t.clientY)?(this.isMouseOver=!0,x.SetCursor(this.name,!0)):(this.isMouseOver=!1,x.SetCursor(this.name,!1)))}mouseDown(t){}mouseUp(t){}}class b{constructor(){this.fontSize=40,this.fontPrefix="",this.fontFamily="fontawesome",this.fillStyle="blue",this.mouseOverFillStyle="red",this.backgroundFillStyle=void 0,this.getFont=(()=>{var t="";return this.fontPrefix&&(t+=this.fontPrefix+" "),t+=this.fontSize+"px "+this.fontFamily})}}class V extends S{constructor(){super(...arguments),this.properties=new b,this.render=(t=>{this.properties.backgroundFillStyle&&(t.fillStyle=this.properties.backgroundFillStyle,t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height)),this.isMouseOver?t.fillStyle=this.properties.mouseOverFillStyle:t.fillStyle=this.properties.fillStyle,t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top",t.fillText(this.text,this.dimensions.x,this.dimensions.y)}),this.updateLayout=((t,e)=>{super.updateLayout(t,e),t.font=this.properties.getFont(),t.textAlign="left",t.textBaseline="top";var i=t.measureText(this.text),a=this.alignement.calculateDimensionsX(e,i.width),n=this.alignement.calculateDimensionsY(e,this.properties.fontSize);this.dimensions=new s(a,n,i.width,this.properties.fontSize)})}}!function(t){t[t.Horizontal=0]="Horizontal",t[t.Vertical=1]="Vertical"}(d||(d={}));class I{constructor(){this.itemSpacing=30,this.orientation=d.Vertical}}class M extends g{constructor(){super(...arguments),this.properties=new I,this.addItem=(t=>{t.alignement.horizontalAlign=n.Left,t.alignement.verticalAlign=r.Top,this.children.push(t),this.triggerUpdateLayout()}),this.removeItem=(t=>{this.children.removeItem(t),this.triggerUpdateLayout()})}updateLayout(t,e){super.updateLayout(t,e);var i=this.alignement.calculateDimensionsX(e,this.dimensions.width),a=this.alignement.calculateDimensionsY(e,this.dimensions.height),n=0,r=0;if(this.properties.orientation==d.Vertical)for(let e=0;e<this.children.length;e++){const h=this.children[e];e>0&&(a+=this.properties.itemSpacing,r+=this.properties.itemSpacing),h.updateLayout(t,new s(i,a,0,0)),a+=h.dimensions.height,r+=h.dimensions.height,n=Math.max(n,h.dimensions.width)}else for(let e=0;e<this.children.length;e++){const h=this.children[e];e>0&&(i+=this.properties.itemSpacing,n+=this.properties.itemSpacing),h.updateLayout(t,new s(i,a,0,0)),i+=h.dimensions.width,n+=h.dimensions.width,r=Math.max(r,h.dimensions.height)}this.dimensions.x==i&&this.dimensions.y==a&&this.dimensions.width==n&&this.dimensions.height==r||(this.dimensions.x=i,this.dimensions.y=a,this.dimensions.height=r,this.dimensions.width=n,this.updateLayout(t,e))}}class C extends S{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValue=50,this.valueChanged=new w,this.updateLayout=((t,e)=>{super.updateLayout(t,e),this.dimensions=new s(e.x,e.y,200,2*this.radius)}),this.mouseDown=(t=>{this.dimensions.isHitBy(t.clientX,t.clientY)&&(this.isDragging=!0,this.updateCurrentValue(t))}),this.mouseUp=(t=>{this.isDragging=!1})}render(t){var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke();var s=(this.currentValue-this.minValue)/(this.maxValue-this.minValue);t.fillStyle="blue",t.beginPath(),t.arc(e+this.radius+(this.dimensions.width-2*this.radius)*s,i+this.dimensions.height/2,this.radius,0,2*Math.PI),t.closePath(),t.fill()}mouseMove(t){super.mouseMove(t),this.isDragging&&this.updateCurrentValue(t)}updateCurrentValue(t){var e=t.clientX-this.dimensions.x-this.radius;(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),this.currentValue=e,this.valueChanged.dispatchEvent(this.currentValue)}}class E extends S{constructor(){super(),this.radius=10,this.minValue=0,this.maxValue=100,this.currentValueLow=25,this.currentValueHigh=75,this.minDiff=.1,this.valuesChanged=new L,this.updateLayout=((t,e)=>{super.updateLayout(t,e),this.dimensions=new s(e.x,e.y,200,2*this.radius)}),this.mouseDown=(t=>{if(this.dimensions.isHitBy(t.clientX,t.clientY)){var e=this.getClickedValue(t),i=Math.abs(this.currentValueLow-e),s=Math.abs(this.currentValueHigh-e);i==s?e<this.currentValueLow?this.isDraggingLow=!0:this.isDraggingHigh=!0:i>s?this.isDraggingHigh=!0:this.isDraggingLow=!0,this.updateCurrentValues(t)}}),this.mouseUp=(t=>{this.isDraggingHigh=!1,this.isDraggingLow=!1})}render(t){var e=this.dimensions.x,i=this.dimensions.y;t.strokeStyle="white",t.lineWidth=2,t.beginPath(),t.moveTo(e+this.radius,i+this.dimensions.height/2),t.lineTo(e+this.dimensions.width-this.radius,i+this.dimensions.height/2),t.stroke(),t.fillStyle="blue";var s=i+this.dimensions.height/2,a=(this.currentValueLow-this.minValue)/(this.maxValue-this.minValue),n=e+this.radius+(this.dimensions.width-2*this.radius)*a,r=(this.currentValueHigh-this.minValue)/(this.maxValue-this.minValue),h=e+this.radius+(this.dimensions.width-2*this.radius)*r;t.strokeStyle="blue",t.lineWidth=2,t.beginPath(),t.moveTo(n,s),t.lineTo(h,s),t.stroke(),t.beginPath(),t.arc(n,s,this.radius,0,2*Math.PI),t.closePath(),t.fill(),t.beginPath(),t.arc(h,s,this.radius,0,2*Math.PI),t.closePath(),t.fill()}mouseMove(t){super.mouseMove(t),(this.isDraggingHigh||this.isDraggingLow)&&this.updateCurrentValues(t)}updateCurrentValues(t){var e=this.getClickedValue(t);this.isDraggingLow?e>this.currentValueHigh-this.minDiff&&(e=this.currentValueHigh-this.minDiff):e<this.currentValueLow+this.minDiff&&(e=this.currentValueLow+this.minDiff),this.isDraggingLow?this.currentValueLow=e:this.currentValueHigh=e,this.valuesChanged.dispatchEvent(this.currentValueLow,this.currentValueHigh)}getClickedValue(t){var e=t.clientX-this.dimensions.x-this.radius;return(e=e/(this.dimensions.width-2*this.radius)*(this.maxValue-this.minValue)+this.minValue)>this.maxValue&&(e=this.maxValue),e<this.minValue&&(e=this.minValue),e}}class A extends g{constructor(t){super(),this.starLayer=t,this.numberOfStarsChanged=(t=>{ht.settingManager.changeNumberOfStars(this.starLayer,Math.round(t))}),this.speedChanged=(t=>{ht.settingManager.changeSpeed(this.starLayer,t)}),this.sizesChanged=((t,e)=>{ht.settingManager.changeSizes(this.starLayer,t,e)}),this.settingsList=new M,this.settingsList.alignement.horizontalAlign=n.Left,this.settingsList.alignement.verticalAlign=r.Top;var e=new V;e.text="Remove Layer",e.properties.fillStyle="white",this.settingsList.addItem(e),this.children.push(e),e.clicked.addEventListener(t=>{ht.settingManager.removeStarLayer(this.starLayer)});var i=new C;i.minValue=10,i.maxValue=1e3,i.currentValue=t.stars.length,this.children.push(i),this.settingsList.addItem(i),i.valueChanged.addEventListener(this.numberOfStarsChanged);var s=new C;s.minValue=0,s.maxValue=30,s.currentValue=t.speed,this.children.push(s),this.settingsList.addItem(s),s.valueChanged.addEventListener(this.speedChanged);var a=new E,h=this.starLayer.stars.map(t=>t.r);a.minValue=.01,a.maxValue=5,a.currentValueLow=Math.min(...h),a.currentValueHigh=Math.max(...h),this.children.push(a),this.settingsList.addItem(a),a.valuesChanged.addEventListener(this.sizesChanged)}updateLayout(t,e){this.settingsList.updateLayout(t,new s(e.x,e.y,0,0))}}class F extends g{constructor(){super(),this.viewModel=new v,this.lastMoved=Date.now(),this.inactivityTimeout=2e3,this.layerButtons=[],this.settingsUpdated=(t=>{switch(t){case h.AddStarLayer:for(const t of ht.settings.starLayers)if(!this.layerButtons.map(t=>t.tag).contains(t)){this.settingsList.removeItem(this.addLayerBtn);var e=new V;e.text="Edit Layer",e.tag=t,e.properties.fillStyle="white",this.settingsList.addItem(e),this.layerButtons.push(e),e.clicked.addEventListener(e=>{this.toggleShowHideStarLayerView(t)}),this.settingsList.addItem(this.addLayerBtn);break}break;case h.RemoveStarLayer:for(const t of this.layerButtons)if(!ht.settings.starLayers.contains(t.tag)){this.settingsList.removeItem(t),this.layerButtons.removeItem(t);break}this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0}}),this.toggleShowHideStarLayerView=(t=>{if(this.detailedStarLayerView)if(this.detailedStarLayerView.starLayer!=t){this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;e=new A(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}else this.children.removeItem(this.detailedStarLayerView),this.detailedStarLayerView=void 0;else{var e=new A(t);this.detailedStarLayerView=e,this.children.push(this.detailedStarLayerView),this.triggerUpdateLayout()}}),this.showHideOverlayClicked=(t=>{this.viewModel.state==o.visible?this.setState(o.beforeVisible):this.setState(o.visible)}),this.mouseMove=(t=>{this.viewModel.state!=o.hidden&&this.viewModel.state!=o.beforeVisible||this.setState(o.beforeVisible),super.mouseMove(t)}),this.mouseInactivityHandler=(()=>{Date.now()-this.lastMoved>=this.inactivityTimeout?this.viewModel.state==o.beforeVisible&&this.setState(o.hidden):setTimeout(this.mouseInactivityHandler,this.inactivityTimeout-(Date.now()-this.lastMoved))}),this.setState=(t=>{switch(t){case o.hidden:this.children.removeItem(this.showOverLayerButton),this.viewModel.state=o.hidden;break;case o.beforeVisible:this.lastMoved=Date.now(),this.viewModel.state==o.hidden&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.addItemIfNotExists(this.showOverLayerButton)),this.viewModel.state==o.visible&&(setTimeout(this.mouseInactivityHandler,this.inactivityTimeout),this.children.removeItemIfExists(this.settingsList),this.children.removeItemIfExists(this.detailedStarLayerView),this.detailedStarLayerView=void 0),this.viewModel.state=o.beforeVisible;break;case o.visible:this.viewModel.state==o.beforeVisible&&this.children.push(this.settingsList),this.viewModel.state=o.visible}}),this.showOverLayerButton=new V,this.showOverLayerButton.text="Show/Hide Settings",this.showOverLayerButton.properties.fillStyle="green",this.showOverLayerButton.alignement.verticalAlign=r.Top,this.showOverLayerButton.alignement.horizontalAlign=n.Left,this.showOverLayerButton.clicked.addEventListener(this.showHideOverlayClicked),this.showOverLayerButton.properties.backgroundFillStyle="rgba(0, 0, 0, 0.5)",this.children.push(this.showOverLayerButton),this.settingsList=new M,this.settingsList.alignement.horizontalAlign=n.Left,this.settingsList.alignement.verticalAlign=r.Top;var t=new V;t.text="Add Layer",t.properties.fillStyle="white",this.settingsList.addItem(t),t.clicked.addEventListener(t=>{ht.settingManager.addStarLayer()}),this.addLayerBtn=t,ht.settingManager.update.addEventListener(this.settingsUpdated)}updateLayout(t,e){super.updateLayout(t,e),this.showOverLayerButton.updateLayout(t,e);var i=2*this.showOverLayerButton.dimensions.height;this.settingsList.updateLayout(t,new s(e.x,e.y+i,e.width,e.height-i)),this.detailedStarLayerView&&this.detailedStarLayerView.updateLayout(t,new s(e.x+this.settingsList.dimensions.width,e.y+i,e.width,e.height-i))}}class O{constructor(t){this.starLayer=t,this.update=(t=>{for(const e of this.starLayer.stars)e.x+=this.starLayer.speed*t,e.y+=this.starLayer.speed*t,e.x>ht.settings.width&&(e.x-=ht.settings.width),e.y>ht.settings.height&&(e.y-=ht.settings.height)})}}class k{}k.instances={},k.addInstance=((t,e)=>{k.instances[t]=e}),k.getInstance=(t=>k.instances[t]);class D extends g{constructor(){super(),this.playIconText="",this.pauseIconText="",this.stopIconText="",this.nextIconText="",this.previousIconText="";var t=k.getInstance("audio"),e=new M;e.alignement.verticalAlign=r.Bottom,e.alignement.margin.bottom=10,e.properties.orientation=d.Horizontal,this.children.push(e);var i=new V;i.properties.fontPrefix="900",i.properties.fontFamily="'Font Awesome 5 Free'",i.text=this.playIconText,i.clicked.addEventListener(()=>{i.text==this.playIconText?(t.play(),i.text=this.pauseIconText):(t.pause(),i.text=this.playIconText),this.triggerUpdateLayout()}),e.addItem(i);var s=new V;s.properties.fontPrefix="900",s.properties.fontFamily="'Font Awesome 5 Free'",s.text=this.stopIconText,s.clicked.addEventListener(()=>{t.stop(),i.text==this.pauseIconText&&(i.text=this.playIconText),this.triggerUpdateLayout()}),e.addItem(s);var a=new V;a.properties.fontPrefix="900",a.properties.fontFamily="'Font Awesome 5 Free'",a.text=this.previousIconText,a.clicked.addEventListener(()=>{t.previous()}),e.addItem(a);var n=new V;n.properties.fontPrefix="900",n.properties.fontFamily="'Font Awesome 5 Free'",n.text=this.nextIconText,n.clicked.addEventListener(()=>{t.next()}),e.addItem(n)}updateLayout(t,e){super.updateLayout(t,e);for(const e of this.children)e.updateLayout(t,this.bounds)}}!function(t){t[t.FitAndOverfill=0]="FitAndOverfill",t[t.FitAndSpace=1]="FitAndSpace"}(l||(l={}));class P{constructor(){this.imageScalingMode=l.FitAndSpace,this.scale=1}}class T extends S{constructor(t){super(),this.properties=new P,this.render=(t=>{super.render(t),t.drawImage(this.image,this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height),this.isMouseOver&&this.isEnabled&&(t.fillStyle="rgba(255,255,255,0.5)",t.fillRect(this.dimensions.x,this.dimensions.y,this.dimensions.width,this.dimensions.height))}),this.image=t}updateLayout(t,e){super.updateLayout(t,e);var i=1,s=this.image.naturalWidth/this.image.naturalHeight>e.width/e.height;switch(this.properties.imageScalingMode){case l.FitAndOverfill:i=s?e.height/this.image.height:e.width/this.image.width;break;case l.FitAndSpace:i=s?e.width/this.image.width:e.height/this.image.height}var a=this.image.naturalWidth*i,n=this.image.naturalHeight*i;this.dimensions.x=this.alignement.calculateDimensionsX(e,a),this.dimensions.y=this.alignement.calculateDimensionsY(e,a),this.dimensions.width=a,this.dimensions.height=n}}T.createFromUrl=(t=>new Promise((e,i)=>{var s=new Image;s.src=t,s.onload=(()=>{e(new T(s))})}));class U extends g{constructor(){super();var t=k.getInstance("assets").getImage("background"),e=new T(t);e.disableMouseEvents(),e.properties.imageScalingMode=l.FitAndOverfill,this.children.push(e)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class B extends g{constructor(){super(),this.frequencyIndex=7,this.lowerBorder=.4,this.upperBorder=.9;var t=k.getInstance("assets"),e=k.getInstance("audio");this.analyser=e.getAnalyser();var i=t.getImage("logo"),s=t.getImage("logo-nova");this.disableMouseEvents();var a=new T(s);a.properties.imageScalingMode=l.FitAndOverfill,this.children.push(a);var n=a.render;a.render=(t=>{var e=this.analyser.getSpectrum(),i=this.calculateRelDataValue(e[this.frequencyIndex]);t.save(),t.globalAlpha=i,n(t),t.restore()});var r=new T(i);r.properties.imageScalingMode=l.FitAndOverfill,this.children.push(r)}calculateRelDataValue(t){var e=t/255;return e<this.lowerBorder&&(e=this.lowerBorder),e>this.upperBorder&&(e=this.upperBorder),(e-this.lowerBorder)/(this.upperBorder-this.lowerBorder)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class N extends g{constructor(){super(),this.starLayers=[],this.starAnimators=[],this.appSettingsUpdated=(t=>{switch(t){case h.AddStarLayer:this.addStarLayer();break;case h.RemoveStarLayer:this.removeStarLayer()}}),this.addStarLayer=(()=>{for(const i of ht.settings.starLayers)if(null==this.starLayers.firstOrDefault(t=>t.starLayer==i)){var t=new y(i);this.starLayers.push(t),this.children.splice(1,0,t),this.triggerUpdateLayout();var e=new O(i);this.animation.addUpdateFunction(e.update),this.starAnimators.push(e);break}}),this.removeStarLayer=(()=>{for(const e of this.starLayers)if(null==ht.settings.starLayers.firstOrDefault(t=>t==e.starLayer)){var t=this.starAnimators.first(t=>t.starLayer==e.starLayer);this.animation.removeUpdateFunction(t.update),this.starAnimators.removeItem(t),this.children.remove(t=>t==e),this.starLayers.remove(t=>t==e),this.triggerUpdateLayout()}}),this.animation=k.getInstance("animation"),this.settingsOverlay=new F,this.playerView=new D,this.children.push(new U),this.children.push(this.playerView),this.children.push(this.settingsOverlay),this.children.push(new B),ht.settingManager.update.addEventListener(this.appSettingsUpdated)}updateLayout(t,e){super.updateLayout(t,e);for(const i of this.children)i.updateLayout(t,e)}}class H{constructor(){this.stars=[],this.speed=1*Math.random()+.1}}class z{constructor(){this.updateFunctions=[],this.isRunning=!1,this.addUpdateFunction=(t=>{this.updateFunctions.push(t)}),this.removeUpdateFunction=(t=>{this.updateFunctions.splice(this.updateFunctions.indexOf(t),1)}),this.setFps=(t=>{this.fps=t,this.fpsInterval=1e3/this.fps}),this.animationLoop=(()=>{this.isRunning&&requestAnimationFrame(this.animationLoop);var t=Date.now(),e=t-this.lastFrameTime;if(e>this.fpsInterval){this.lastFrameTime=t;var i=e/1e3;for(const t of this.updateFunctions)t(i)}}),this.setFps(30),this.play(),document.addEventListener("keyup",t=>{80==t.keyCode&&this.playPause()})}play(){this.isRunning||(this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())}pause(){this.isRunning&&(this.isRunning=!1)}playPause(){this.isRunning?this.pause():this.play()}}class R{constructor(){this.loadFontawesomeFree=(()=>this.loadFont("","","900 20px 'Font Awesome 5 Free'")),this.loadFontawesomeBrands=(()=>this.loadFont("","","400 20px 'Font Awesome 5 Brands'")),this.countPixels=(t=>{var e=0;for(let r=0;r<t.data.length;r+=4){var i=t.data[r],s=t.data[r+1],a=t.data[r+2],n=t.data[r+3];i<50&&s<50&&a<50&&n>.9&&e++}return e}),this.getIconPixels=((t,e,i)=>{t.clearRect(0,0,e.width,e.height),t.fillText(i,0,0);var s=t.getImageData(0,0,e.width,e.height);return this.countPixels(s)}),this.loadFont=((t,e,i)=>{var s=10;return new Promise((a,n)=>{console.log('loading font "'+i+'"');var r=document.createElement("canvas");r.width=20,r.height=20;var h=r.getContext("2d");h.font=i,h.fillStyle="black",h.textAlign="left",h.textBaseline="top";var o=()=>{var n=this.getIconPixels(h,r,t),d=this.getIconPixels(h,r,e);Math.abs(d-n)>5?(console.log('loaded font "'+i+'"'),a()):0==--s?(console.log("stop loading font after "+s+" retries with 500ms delay"),a()):setTimeout(()=>{o()},500)};o()})})}}class K{constructor(t,e){this.name=t,this.audioCtx=e}}class X extends K{constructor(){super(...arguments),this.getAudioNode=(()=>this.analyserNode)}reload(){return new Promise((t,e)=>{this.analyserNode||(this.analyserNode=this.audioCtx.createAnalyser()),this.analyserNode.fftSize=32,this.analyserNode.smoothingTimeConstant=.9,this.bufferLength=this.analyserNode.frequencyBinCount,this.dataArray=new Uint8Array(this.bufferLength),t()})}getSpectrum(){return this.analyserNode?(this.analyserNode.getByteFrequencyData(this.dataArray),this.dataArray):new Uint8Array(0)}getWave(){return this.analyserNode?(this.analyserNode.getByteTimeDomainData(this.dataArray),this.dataArray):new Uint8Array(0)}}class Y extends K{constructor(){super(...arguments),this.getAudioNode=(()=>this.audioCtx.destination)}reload(){}}class W extends K{constructor(t,e,i){super(t,e),this.audioEnded=new f,this.audioEndedEvent=(()=>{this.audioEnded.dispatchEvent()}),this.getAudioNode=(()=>this.source),this.play=(()=>{this.audio.play()}),this.pause=(()=>{this.audio.pause()}),this.stop=(()=>{this.audio.pause(),this.audio.currentTime=0}),this.setUrl=(t=>{var e=!this.audio.paused;this.url=t,this.audio.src=t,this.audio.load(),e&&this.audio.play()}),this.url=i,this.audio=document.createElement("audio"),this.audio.controls=!0,this.audio.src=this.url,this.audio.addEventListener("ended",this.audioEndedEvent)}reload(){return new Promise((t,e)=>{this.source||(this.source=this.audioCtx.createMediaElementSource(this.audio)),t()})}}class j{constructor(){this.audioNodes=[],this.addMediaElementSource=((t,e)=>{var i=new W(t,this.audioCtx,e);return this.audioNodes.push(i),i}),this.addAnalyzer=(t=>{var e=new X(t,this.audioCtx);return this.audioNodes.push(e),e}),this.getAudioGraphNode=(t=>this.audioNodes.first(e=>e.name==t)),this.audioContextStateChanged=new w,this.documentClick=(()=>{"suspended"===this.audioCtx.state&&(this.audioCtx.resume(),document.removeEventListener("click",this.documentClick))}),this.audioContextStateChangedEvaluator=(()=>{"running"===this.audioCtx.state&&(console.log("audio context state changed"),this.audioCtx.removeEventListener("statechange",this.audioContextStateChangedEvaluator),this.reload().then(()=>{this.audioContextStateChanged.dispatchEvent(this.audioCtx.state)}))}),this.reload=(()=>new Promise((t,e)=>{console.log("realoading audio graph"),Promise.all(this.audioNodes.map(t=>t.reload())).then(()=>{console.log("reloaded audio graph");for(let t=0;t<this.audioNodes.length;t++){const e=this.audioNodes[t];e.getAudioNode().disconnect(),t<this.audioNodes.length-1?e.getAudioNode().connect(this.audioNodes[t+1].getAudioNode()):e.getAudioNode().connect(this.destinationNode.getAudioNode())}t()})})),this.audioCtx=new AudioContext,this.audioCtx.addEventListener("statechange",this.audioContextStateChangedEvaluator),"suspended"===this.audioCtx.state&&(document.addEventListener("click",this.documentClick),console.log("Audio context is suspended. Click the dom to make it running.")),this.destinationNode=new Y("destination",this.audioCtx)}}var G=i(0),_=i.n(G),q=i(1),J=i.n(q),Q=i(2),Z=i.n(Q);class ${constructor(){this.songs=[_.a,J.a,Z.a],this.reload=(()=>this.audioGraph.reload()),this.play=(()=>{this.source.play()}),this.pause=(()=>{this.source.pause()}),this.next=(()=>{var t=this.songs.indexOf(this.source.url)+1;t==this.songs.length&&(t=0),this.source.setUrl(this.songs[t])}),this.previous=(()=>{var t=this.songs.indexOf(this.source.url)-1;-1==t&&(t=this.songs.length-1),this.source.setUrl(this.songs[t])}),this.getAnalyser=(()=>this.analyser),this.stop=(()=>{this.source.stop()}),this.audioGraph=new j,this.source=this.audioGraph.addMediaElementSource("source",this.songs[0]),this.analyser=this.audioGraph.addAnalyzer("analyser")}}class tt{constructor(){this.imageAssets=[],this.addImage=((t,e)=>{this.imageAssets.push({name:t,url:e,image:void 0})}),this.getImage=(t=>{var e=this.imageAssets.firstOrDefault(e=>e.name==t);return e?e.image:void 0}),this.load=(()=>Promise.all(this.imageAssets.map(t=>new Promise((e,i)=>{if(t.image)e();else{var s=new Image;s.src=t.url,s.onload=(()=>{t.image=s,e()})}}))))}}var et=i(3),it=i.n(et),st=i(4),at=i.n(st),nt=i(5),rt=i.n(nt);class ht{constructor(){this.run=(()=>{document.body.style.backgroundColor="black",console.log("loading app"),Promise.all([(new R).loadFontawesomeFree(),new Promise((t,e)=>{var i=new $;i.reload(),k.addInstance("audio",i),t()}),new Promise((t,e)=>{var i=x.createFullScreen(),s=new a(i),n=new z;n.addUpdateFunction(i.draw),k.addInstance("canvas",i),k.addInstance("stage",s),k.addInstance("animation",n),t()}),new Promise((t,e)=>{var i=new tt;k.addInstance("assets",i),i.addImage("background",it.a),i.addImage("logo",at.a),i.addImage("logo-nova",rt.a),i.load().then(()=>{t()})})]).then(()=>{console.log("loaded app");var t=k.getInstance("stage"),e=new N;t.setView(e),ht.settingManager.addStarLayer(),ht.settingManager.addStarLayer(),ht.settingManager.addStarLayer(),ht.settingManager.addStarLayer()})})}}ht.settings=new class{constructor(t,e){this.width=t,this.height=e,this.starLayers=[]}}(window.innerWidth,window.innerHeight),ht.settingManager=new class{constructor(){this.update=new w,this.addStarLayer=(()=>{var t=new H;for(let e=0;e<300;e++)t.stars.push({x:Math.random()*ht.settings.width,y:Math.random()*ht.settings.height,r:.5*Math.random()+.05});ht.settings.starLayers.push(t),this.update.dispatchEvent(h.AddStarLayer)}),this.removeStarLayer=(t=>{ht.settings.starLayers.removeItem(t),this.update.dispatchEvent(h.RemoveStarLayer)}),this.changeNumberOfStars=((t,e)=>{if(e>0){var i=e-t.stars.length;if(i>0)for(let e=0;e<i;e++)t.stars.push({x:Math.random()*ht.settings.width,y:Math.random()*ht.settings.height,r:2*Math.random()+.05});else if(i<0)for(let e=0;e<-i;e++)t.stars.splice(Math.floor(Math.random()*t.stars.length),1);this.update.dispatchEvent(h.ChangeNumberOfStars)}}),this.changeSpeed=((t,e)=>{t.speed=e,this.update.dispatchEvent(h.ChangeSpeed)}),this.changeSizes=((t,e,i)=>{var s=t.stars.map(t=>t.r),a=Math.min(...s),n=Math.max(...s)-a;n<=0&&(n=1e-4);for(const s of t.stars)s.r=(s.r-a)/n*(i-e)+e;this.update.dispatchEvent(h.ChangeSpeed)})}};i(6);document.addEventListener("DOMContentLoaded",function(){(new ht).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9kZW1vL1RyYWlsZXJfZmFpbnRDb2xvci5tcDMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9kZW1vL1RyYWlsZXJfRGVlcEZpZWxkLm1wMyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2RlbW8vVHJhaWxlcl9EcmlmdGluZ0ludG9UaGVBdG1vc3BoZXJlLm1wMyIsIndlYnBhY2s6Ly8vLi9zcmMvYXNzZXRzL2JhY2tncm91bmQucG5nIiwid2VicGFjazovLy8uL3NyYy9hc3NldHMvbG9nby1mcm9udC5wbmciLCJ3ZWJwYWNrOi8vLy4vc3JjL2Fzc2V0cy9sb2dvLW5vdmEucG5nIiwid2VicGFjazovLy8uL2VuYy9zcmMvZXh0ZW5zaW9ucy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZS50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL3N0YWdlLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvYWxpZ25lbWVudC9ob3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2FsaWduZW1lbnQvdmVydGljYWxBbGlnbmVtZW50T3B0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9zZXR0aW5ncy9zZXR0aW5nT3BlcmF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L292ZXJsYXkvc2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9hbGlnbmVtZW50L29yaWVudGF0aW9uLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvaW1hZ2VTY2FsaW5nTW9kZS50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2FsaWduZW1lbnQvc3BhY2luZy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2FsaWduZW1lbnQvYWxpZ25lbWVudC50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL3JlbmRlck9iamVjdC50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xheW91dFZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvc3RhclJlbmRlck9iamVjdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9zdGFyTGF5ZXJEcmF3ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvb3ZlcmxheS9zZXR0aW5nc092ZXJsYXlWaWV3TW9kZWwudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9lRXZlbnQudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9lQ2FudmFzLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvdWkvY29udHJvbHMvY29udHJvbC50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2J1dHRvblByb3BlcnRpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9jb250cm9scy9idXR0b24udHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9saXN0Vmlld1Byb3BlcnRpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9saXN0Vmlldy50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2NvbnRyb2xzL3NsaWRlci50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2NvbnRyb2xzL3JhbmdlU2xpZGVyLnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L292ZXJsYXkvc3RhckxheWVyVmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9vdmVybGF5L3NldHRpbmdzT3ZlcmxheVZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXcvc3RhckxheWVyQW5pbWF0b3IudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9kaW5qZWN0LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L3BsYXllclZpZXcudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9jb250cm9scy9pbWFnZVByb3BlcnRpZXMudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy91aS9jb250cm9scy9pbWFnZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9iYWNrZ3JvdW5kSW1hZ2VWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy92aWV3L2Zyb250Vmlldy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdmlldy9pbnNwaWVydHlQbGF5ZXJWaWV3LnRzIiwid2VicGFjazovLy8uL3NyYy9tb2RlbHMvc3RhckxheWVyLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvZUFuaW1hdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL3VpL2NhbnZhc0hlbHBlci50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2F1ZGlvL2F1ZGlvR3JhcGhOb2RlLnRzIiwid2VicGFjazovLy8uL2VuYy9zcmMvYXVkaW8vYXVkaW9HcmFwaE5vZGVBbmFseXNlci50cyIsIndlYnBhY2s6Ly8vLi9lbmMvc3JjL2F1ZGlvL2F1ZGlvR3JhcGhOb2RlRGVzdGluYXRpb24udHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9hdWRpby9hdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9hdWRpby9hdWRpb0dyYXBoLnRzIiwid2VicGFjazovLy8uL3NyYy9hdWRpb01hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vZW5jL3NyYy9hc3NldE1hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbW9kZWxzL3NldHRpbmdzLnRzIiwid2VicGFjazovLy8uL3NyYy9zZXR0aW5ncy9zZXR0aW5nc01hbmFnZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiQXJyYXkiLCJmaXJzdE9yRGVmYXVsdCIsImZ1bmMiLCJhcnJheUl0ZW0iLCJ0aGlzIiwiZmlyc3QiLCJjb25zb2xlIiwibG9nIiwiZ2V0TmV4dCIsImN1cnJlbnQiLCJzZWxlY3RvciIsIm5leHRQb3NpdGlvbiIsIm5leHQiLCJ4IiwicmVtb3ZlSXRlbSIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJjb250YWlucyIsInJlbW92ZUl0ZW1JZkV4aXN0cyIsImFkZEl0ZW1JZk5vdEV4aXN0cyIsInB1c2giLCJyZW1vdmUiLCJ0b0xpc3QiLCJmaWx0ZXIiLCJSZWN0YW5nbGUiLCJbb2JqZWN0IE9iamVjdF0iLCJ5Iiwid2lkdGgiLCJoZWlnaHQiLCJjb2xsaWRlc1dpdGgiLCJyZWN0YW5nbGUiLCJoaXR4IiwiaGl0eSIsImlzSGl0QnkiLCJzdGFnZV9TdGFnZSIsImNhbnZhcyIsImNhbnZhc1Jlc2l6ZWQiLCJzaG91bGRVcGRhdGVMYXlvdXQiLCJtb3VzZURvd24iLCJldiIsInZpZXciLCJjbGllbnRYIiwiZHByIiwiY2xpZW50WSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIm1vdXNlVXAiLCJtb3VzZU1vdmUiLCJjbGljayIsInJlbmRlciIsImN0eCIsInVwZGF0ZUxheW91dCIsImNsZWFyUmVjdCIsInNldFZpZXciLCJhZGREcmF3RnVuY3Rpb24iLCJyZXNpemVkIiwiYWRkRXZlbnRMaXN0ZW5lciIsImRvY3VtZW50IiwiSG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb24iLCJWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24iLCJTZXR0aW5nT3BlcmF0aW9uIiwiU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUiLCJPcmllbnRhdGlvbiIsIkltYWdlU2NhbGluZ01vZGUiLCJTcGFjaW5nIiwidG9wIiwicmlnaHQiLCJib3R0b20iLCJsZWZ0IiwiYWxpZ25lbWVudF9BbGlnbmVtZW50IiwiaG9yaXpvbnRhbEFsaWduIiwiQ2VudGVyIiwidmVydGljYWxBbGlnbiIsIm1hcmdpbiIsImNhbGN1bGF0ZURpbWVuc2lvbnNYIiwiYm91bmRzIiwiTGVmdCIsIlJpZ2h0IiwiY2FsY3VsYXRlRGltZW5zaW9uc1kiLCJUb3AiLCJCb3R0b20iLCJyZW5kZXJPYmplY3RfUmVuZGVyT2JqZWN0IiwiZ2VuZXJhdGVOZXdJZCIsImlkQ291bnRlciIsImRpbWVuc2lvbnMiLCJhbGlnbmVtZW50IiwidHJpZ2dlclVwZGF0ZUxheW91dCIsImRpc2FibGVNb3VzZUV2ZW50cyIsImlkIiwibGF5b3V0Vmlld19MYXlvdXRWaWV3IiwiY2hpbGRyZW4iLCJzdXBlciIsImNoaWxkIiwic3RhclJlbmRlck9iamVjdF9TdGFyUmVuZGVyT2JqZWN0Iiwic3RhciIsImVuZCIsImdyYWQiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsImFkZENvbG9yU3RvcCIsImZpbGxTdHlsZSIsImFyYyIsIk1hdGgiLCJQSSIsImZpbGwiLCJiZWdpblBhdGgiLCJFcnJvciIsInN0YXJMYXllckRyYXdlcl9TdGFyTGF5ZXJEcmF3ZXIiLCJzdGFyTGF5ZXIiLCJzZXR0aW5nc1VwZGF0ZWQiLCJvcGVyYXRpb24iLCJDaGFuZ2VOdW1iZXJPZlN0YXJzIiwidXBkYXRlTnVtYmVyT2ZTdGFycyIsImFwcF9BcHAiLCJzZXR0aW5nTWFuYWdlciIsInVwZGF0ZSIsInN0YXJzIiwic2V0dGluZ3NPdmVybGF5Vmlld01vZGVsX1NldHRpbmdzT3ZlcmxheVZpZXdNb2RlbCIsInN0YXRlIiwiaGlkZGVuIiwiRUV2ZW50IiwibGlzdGVuZXJzIiwibGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVySWZOb3RFeGlzdHMiLCJkaXNwYXRjaEV2ZW50IiwibGVuZ3RoIiwiZXZlbnQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcklmRXhpc3RzIiwiRUV2ZW50VCIsImFyZyIsIkVFdmVudFRUIiwiYXJnMSIsImFyZzIiLCJlQ2FudmFzX0VDYW52YXMiLCJkcmF3RnVuY3Rpb25zIiwiZHByU2NhbGluZ0VuYWJsZWQiLCJlbmFibGVEcHJTY2FsaW5nIiwicmVzaXplIiwiZGlzYWJsZURwclNjYWxpbmciLCJ3aW5kb3ciLCJkZXZpY2VQaXhlbFJhdGlvIiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJkcmF3Iiwic2F2ZSIsInNjYWxlIiwiZHJhd0Z1bmN0aW9uIiwicmVzdG9yZSIsInJlbW92ZURyYXdGdW5jdGlvbiIsImJvZHkiLCJwYXJlbnRFbGVtZW50Iiwic3R5bGUiLCJvdmVyZmxvdyIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmRDaGlsZCIsImVuQ2FudmFzIiwiZ2V0Q29udGV4dCIsImN1cnNvckxvY2siLCJTZXRDdXJzb3IiLCJwb2ludGVyIiwiY3Vyc29yIiwiY29udHJvbF9Db250cm9sIiwiaXNNb3VzZU92ZXIiLCJpc0VuYWJsZWQiLCJjbGlja2VkIiwiQnV0dG9uUHJvcGVydGllcyIsImZvbnRTaXplIiwiZm9udFByZWZpeCIsImZvbnRGYW1pbHkiLCJtb3VzZU92ZXJGaWxsU3R5bGUiLCJiYWNrZ3JvdW5kRmlsbFN0eWxlIiwidW5kZWZpbmVkIiwiZ2V0Rm9udCIsImZvbnQiLCJidXR0b25fQnV0dG9uIiwicHJvcGVydGllcyIsImZpbGxSZWN0IiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwiZmlsbFRleHQiLCJ0ZXh0Iiwic2l6ZSIsIm1lYXN1cmVUZXh0IiwibGlzdFZpZXdQcm9wZXJ0aWVzX0xpc3RWaWV3UHJvcGVydGllcyIsIml0ZW1TcGFjaW5nIiwib3JpZW50YXRpb24iLCJWZXJ0aWNhbCIsImxpc3RWaWV3X0xpc3RWaWV3IiwiYWRkSXRlbSIsImxheW91dFZpZXciLCJtYXgiLCJzbGlkZXJfU2xpZGVyIiwicmFkaXVzIiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsInZhbHVlQ2hhbmdlZCIsImlzRHJhZ2dpbmciLCJ1cGRhdGVDdXJyZW50VmFsdWUiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsIm1vdmVUbyIsImxpbmVUbyIsInN0cm9rZSIsInJlbFZhbHVlIiwiY2xvc2VQYXRoIiwidmFsIiwicmFuZ2VTbGlkZXJfUmFuZ2VTbGlkZXIiLCJjdXJyZW50VmFsdWVMb3ciLCJjdXJyZW50VmFsdWVIaWdoIiwibWluRGlmZiIsInZhbHVlc0NoYW5nZWQiLCJnZXRDbGlja2VkVmFsdWUiLCJkaWZmVG9Mb3ciLCJhYnMiLCJkaWZmVG9IaWdoIiwiaXNEcmFnZ2luZ0xvdyIsImlzRHJhZ2dpbmdIaWdoIiwidXBkYXRlQ3VycmVudFZhbHVlcyIsInNsaWRlclkiLCJyZWxWYWx1ZUxvdyIsImxvd1giLCJyZWxWYWx1ZUhpZ2giLCJoaWdoWCIsInN0YXJMYXllclZpZXdfU3RhckxheWVyVmlldyIsIm51bWJlck9mU3RhcnNDaGFuZ2VkIiwibnVtYmVyT2ZTdGFycyIsImNoYW5nZU51bWJlck9mU3RhcnMiLCJyb3VuZCIsInNwZWVkQ2hhbmdlZCIsInNwZWVkIiwiY2hhbmdlU3BlZWQiLCJzaXplc0NoYW5nZWQiLCJsb3dCb3JkZXIiLCJoaWdoQm9yZGVyIiwiY2hhbmdlU2l6ZXMiLCJzZXR0aW5nc0xpc3QiLCJidG5Gb3JMYXllciIsInNlbmRlciIsInJlbW92ZVN0YXJMYXllciIsInNsaWRlciIsInNsaWRlclNwZWVkIiwic2xpZGVyU2l6ZSIsInNpemVzIiwibWFwIiwibWluIiwic2V0dGluZ3NPdmVybGF5Vmlld19TZXR0aW5nc092ZXJsYXlWaWV3Iiwidmlld01vZGVsIiwibGFzdE1vdmVkIiwiRGF0ZSIsIm5vdyIsImluYWN0aXZpdHlUaW1lb3V0IiwibGF5ZXJCdXR0b25zIiwiQWRkU3RhckxheWVyIiwic2V0dGluZ3MiLCJzdGFyTGF5ZXJzIiwidGFnIiwiYWRkTGF5ZXJCdG4iLCJ0b2dnbGVTaG93SGlkZVN0YXJMYXllclZpZXciLCJSZW1vdmVTdGFyTGF5ZXIiLCJzZXR0aW5nc0xheWVyIiwiZGV0YWlsZWRTdGFyTGF5ZXJWaWV3Iiwic2hvd0hpZGVPdmVybGF5Q2xpY2tlZCIsInZpc2libGUiLCJzZXRTdGF0ZSIsImJlZm9yZVZpc2libGUiLCJtb3VzZUluYWN0aXZpdHlIYW5kbGVyIiwic2V0VGltZW91dCIsInNob3dPdmVyTGF5ZXJCdXR0b24iLCJidG5Gb3JOZXdMYXllciIsImFkZFN0YXJMYXllciIsInNwYWNlIiwic3RhckxheWVyQW5pbWF0b3JfU3RhckxheWVyQW5pbWF0b3IiLCJ0aW1lRGlmZiIsIkRpbmplY3QiLCJpbnN0YW5jZXMiLCJhZGRJbnN0YW5jZSIsImluc3RhbmNlIiwiZ2V0SW5zdGFuY2UiLCJwbGF5ZXJWaWV3X1BsYXllclZpZXciLCJwbGF5SWNvblRleHQiLCJwYXVzZUljb25UZXh0Iiwic3RvcEljb25UZXh0IiwibmV4dEljb25UZXh0IiwicHJldmlvdXNJY29uVGV4dCIsImF1ZGlvTWFuYWdlciIsImxpc3RWaWV3IiwiSG9yaXpvbnRhbCIsInBsYXlQYXVzZUJ0biIsInBsYXkiLCJwYXVzZSIsInN0b3BCdG4iLCJzdG9wIiwicHJldmlvdXNCdG4iLCJwcmV2aW91cyIsIm5leHRCdG4iLCJpbWFnZVByb3BlcnRpZXNfSW1hZ2VQcm9wZXJ0aWVzIiwiaW1hZ2VTY2FsaW5nTW9kZSIsIkZpdEFuZFNwYWNlIiwiaW1hZ2VfRUltYWdlIiwiaW1hZ2UiLCJkcmF3SW1hZ2UiLCJmaXRTY2FsZSIsImlzSW1hZ2VXaWRlciIsIm5hdHVyYWxXaWR0aCIsIm5hdHVyYWxIZWlnaHQiLCJGaXRBbmRPdmVyZmlsbCIsImNyZWF0ZUZyb21VcmwiLCJpbWFnZVVybCIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiSW1hZ2UiLCJzcmMiLCJvbmxvYWQiLCJiYWNrZ3JvdW5kSW1hZ2VWaWV3X0JhY2tncm91bmRJbWFnZVZpZXciLCJiYWNrZ3JvdW5kIiwiZ2V0SW1hZ2UiLCJmcm9udFZpZXdfRnJvbnRWaWV3IiwiZnJlcXVlbmN5SW5kZXgiLCJsb3dlckJvcmRlciIsInVwcGVyQm9yZGVyIiwiYXNzZXRNYW5hZ2VyIiwiYW5hbHlzZXIiLCJnZXRBbmFseXNlciIsImxvZ28iLCJsb2dvTm92YSIsImxvZ29Ob3ZhRUltYWdlIiwiZGF0YSIsImdldFNwZWN0cnVtIiwicmVsRGF0YVZhbHVlIiwiY2FsY3VsYXRlUmVsRGF0YVZhbHVlIiwiZ2xvYmFsQWxwaGEiLCJsb2dvRnJvbnQiLCJkYXRhVmFsdWUiLCJpbnNwaWVydHlQbGF5ZXJWaWV3X0luc3BpZXJ0eVBsYXllclZpZXciLCJzdGFyQW5pbWF0b3JzIiwiYXBwU2V0dGluZ3NVcGRhdGVkIiwibGF5ZXIiLCJhbmltYXRvciIsImFuaW1hdGlvbiIsImFkZFVwZGF0ZUZ1bmN0aW9uIiwic3RhckxheWVyRHJhd3MiLCJyZW1vdmVVcGRhdGVGdW5jdGlvbiIsInNldHRpbmdzT3ZlcmxheSIsInBsYXllclZpZXciLCJTdGFyTGF5ZXIiLCJyYW5kb20iLCJFQW5pbWF0aW9uIiwidXBkYXRlRnVuY3Rpb25zIiwiaXNSdW5uaW5nIiwic2V0RnBzIiwiZnBzIiwiZnBzSW50ZXJ2YWwiLCJhbmltYXRpb25Mb29wIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZWxhcHNlZCIsImxhc3RGcmFtZVRpbWUiLCJ1cGRhdGVGdW5jdGlvbiIsImtleUNvZGUiLCJwbGF5UGF1c2UiLCJDYW52YXNIZWxwZXIiLCJsb2FkRm9udGF3ZXNvbWVGcmVlIiwibG9hZEZvbnQiLCJsb2FkRm9udGF3ZXNvbWVCcmFuZHMiLCJjb3VudFBpeGVscyIsImltYWdlRGF0YSIsInBpeGVsQ291bnQiLCJnIiwiYiIsImEiLCJnZXRJY29uUGl4ZWxzIiwiaWNvbiIsImdldEltYWdlRGF0YSIsImljb24xIiwiaWNvbjIiLCJyZXRyaWVzIiwidGVtcENhbnZhcyIsInRlbXBDdHgiLCJjaGVja0xvYWRlZCIsImljb24xUGl4ZWxDb3VudCIsImljb24yUGl4ZWxDb3VudCIsIkF1ZGlvR3JhcGhOb2RlIiwiYXVkaW9DdHgiLCJhdWRpb0dyYXBoTm9kZUFuYWx5c2VyX0F1ZGlvR3JhcGhOb2RlQW5hbHlzZXIiLCJnZXRBdWRpb05vZGUiLCJhbmFseXNlck5vZGUiLCJjcmVhdGVBbmFseXNlciIsImZmdFNpemUiLCJzbW9vdGhpbmdUaW1lQ29uc3RhbnQiLCJidWZmZXJMZW5ndGgiLCJmcmVxdWVuY3lCaW5Db3VudCIsImRhdGFBcnJheSIsIlVpbnQ4QXJyYXkiLCJnZXRCeXRlRnJlcXVlbmN5RGF0YSIsImdldEJ5dGVUaW1lRG9tYWluRGF0YSIsImF1ZGlvR3JhcGhOb2RlRGVzdGluYXRpb25fQXVkaW9HcmFwaE5vZGVEZXN0aW5hdGlvbiIsImRlc3RpbmF0aW9uIiwiYXVkaW9HcmFwaE5vZGVFbGVtZW50U291cmNlX0F1ZGlvR3JhcGhOb2RlRWxlbWVudFNvdXJjZSIsInVybCIsImF1ZGlvRW5kZWQiLCJhdWRpb0VuZGVkRXZlbnQiLCJzb3VyY2UiLCJhdWRpbyIsImN1cnJlbnRUaW1lIiwic2V0VXJsIiwicGF1c2VkIiwibG9hZCIsImNvbnRyb2xzIiwiY3JlYXRlTWVkaWFFbGVtZW50U291cmNlIiwiYXVkaW9HcmFwaF9BdWRpb0dyYXBoIiwiYXVkaW9Ob2RlcyIsImFkZE1lZGlhRWxlbWVudFNvdXJjZSIsInNvdXJjZU5vZGUiLCJhZGRBbmFseXplciIsImFuYWx5emVyTm9kZSIsImdldEF1ZGlvR3JhcGhOb2RlIiwiYXVkaW9Db250ZXh0U3RhdGVDaGFuZ2VkIiwiZG9jdW1lbnRDbGljayIsInJlc3VtZSIsImF1ZGlvQ29udGV4dFN0YXRlQ2hhbmdlZEV2YWx1YXRvciIsInJlbG9hZCIsInRoZW4iLCJhbGwiLCJhdWRpb05vZGUiLCJkaXNjb25uZWN0IiwiY29ubmVjdCIsImRlc3RpbmF0aW9uTm9kZSIsIkF1ZGlvQ29udGV4dCIsImF1ZGlvTWFuYWdlcl9BdWRpb01hbmFnZXIiLCJzb25ncyIsIlRyYWlsZXJfZmFpbnRDb2xvcl9kZWZhdWx0IiwiVHJhaWxlcl9EZWVwRmllbGRfZGVmYXVsdCIsIlRyYWlsZXJfRHJpZnRpbmdJbnRvVGhlQXRtb3NwaGVyZV9kZWZhdWx0IiwiYXVkaW9HcmFwaCIsIm5leHRTb25nSW5kZXgiLCJwcmV2aW91c1NvbmdJbmRleCIsIkFzc2V0TWFuYWdlciIsImltYWdlQXNzZXRzIiwiYWRkSW1hZ2UiLCJpbWFnZUFzc2V0IiwicnVuIiwiYmFja2dyb3VuZENvbG9yIiwiY3JlYXRlRnVsbFNjcmVlbiIsInN0YWdlIiwiYmFja2dyb3VuZF9kZWZhdWx0IiwibG9nb19mcm9udF9kZWZhdWx0IiwibG9nb19ub3ZhX2RlZmF1bHQiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJkaWZmIiwiZmxvb3IiLCJDaGFuZ2VTcGVlZCIsIm1pbkZpeCJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9B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cVAsR0FBVTNOLEVBQWFELEdBQWNBLEVBRWhGeE8sS0FBS2lILE9BQU9TLGNBQWMvRCxFQUFpQndZLHNCQy9EbkQzWSxTQUFTRCxpQkFBaUIsbUJBRTFCLFlBQ2MsSUFBSXdELElBQ1Z5VSxRQUo0QyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDcpO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNDU0ODYxNjc1MGI0OTU5OWUyOWFkMzFmMjcwNTJmYzcubXAzXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNDJlMWM5MTU3M2UwMzI3Y2QzZjE3ZjI1MWU4YWYyYTYubXAzXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiZjFjZWVhNWQ1NTU5NDdjODAyODFmMzY4YmZhZjhmYTgubXAzXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNGYzYjcxMjg5YjdlYmJmNjEzMjMzNzEwYzkyMzc0MDcucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNmE0MzgwNzA5OGQ4ZjQ2YmJiOGQ1YTUxZjdiMTRlNDYucG5nXCI7IiwibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiMzBjNWQzZWY5YWUyZGI4ZWJmNjljZjIxZGE4NGE3YmMucG5nXCI7IiwiaW50ZXJmYWNlIEFycmF5PFQ+IHtcbiAgICByZW1vdmVJdGVtSWZFeGlzdHMoaXRlbTogVCk6IHZvaWQ7XG4gICAgY29udGFpbnMoaXRlbTogVCk6IGJvb2xlYW47XG4gICAgcmVtb3ZlSXRlbShpdGVtOiBUKTogdm9pZDtcbiAgICByZW1vdmUoc2VsZWN0b3I6IChpdGVtOiBUKSA9PiBib29sZWFuKTogdm9pZDtcbiAgICBhZGRJdGVtSWZOb3RFeGlzdHMoaXRlbTogVCk6IHZvaWQ7XG4gICAgdG9MaXN0KCk6IFRbXTtcbiAgICBnZXROZXh0KGN1cnJlbnQ6IFQsIHNlbGVjdG9yOiAoaXRlbTogVCkgPT4gbnVtYmVyKTogVDtcbiAgICBmaXJzdChzZWxlY3RvcjogKGl0ZW06IFQpID0+IGJvb2xlYW4pOiBUO1xuICAgIGZpcnN0T3JEZWZhdWx0KHNlbGVjdG9yOiAoaXRlbTogVCkgPT4gYm9vbGVhbik6IFQ7XG59XG5cbkFycmF5LnByb3RvdHlwZS5maXJzdE9yRGVmYXVsdCA9IGZ1bmN0aW9uIChmdW5jKSB7XG4gICAgZm9yIChjb25zdCBhcnJheUl0ZW0gb2YgdGhpcykge1xuICAgICAgICBpZiAoZnVuYyhhcnJheUl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlJdGVtO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5BcnJheS5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAoZnVuYykge1xuICAgIGZvciAoY29uc3QgYXJyYXlJdGVtIG9mIHRoaXMpIHtcbiAgICAgICAgaWYgKGZ1bmMoYXJyYXlJdGVtKSkge1xuICAgICAgICAgICAgcmV0dXJuIGFycmF5SXRlbTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zb2xlLmxvZyhcIml0ZW0gbm90IGZvdW5kXCIpO1xuICAgIGNvbnNvbGUubG9nKHRoaXMpO1xuICAgIHRocm93IFwiaXRlbSBub3QgZm91bmRcIjtcbn1cblxuQXJyYXkucHJvdG90eXBlLmdldE5leHQgPSBmdW5jdGlvbiA8VD4oY3VycmVudDogVCwgc2VsZWN0b3I6IChpdGVtOiBUKSA9PiBudW1iZXIpOiBUIHtcbiAgICB2YXIgbmV4dFBvc2l0aW9uID0gc2VsZWN0b3IoY3VycmVudCkgKyAxO1xuICAgIHZhciBuZXh0ID0gKHRoaXMgYXMgVFtdKS5maXJzdE9yRGVmYXVsdCgoeCkgPT4gc2VsZWN0b3IoeCkgPT0gbmV4dFBvc2l0aW9uKTtcbiAgICBpZiAoIW5leHQpIHtcbiAgICAgICAgbmV4dCA9ICh0aGlzIGFzIFRbXSkuZmlyc3QoeCA9PiBzZWxlY3Rvcih4KSA9PSAxKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV4dDtcbn1cblxuQXJyYXkucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggIT0gLTEpIHtcbiAgICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IFwiaXRlbSBub3QgZm91bmRcIjtcbiAgICB9XG59XG5cbkFycmF5LnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIDxUPihpdGVtOiBUKSB7XG4gICAgcmV0dXJuIHRoaXMuaW5kZXhPZihpdGVtKSAhPT0gLTE7XG59XG5cbkFycmF5LnByb3RvdHlwZS5yZW1vdmVJdGVtSWZFeGlzdHMgPSBmdW5jdGlvbiA8VD4oaXRlbTogVCkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXhPZihpdGVtKTtcbiAgICBpZiAoaW5kZXggIT0gLTEpIHtcbiAgICAgICAgdGhpcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cblxuQXJyYXkucHJvdG90eXBlLmFkZEl0ZW1JZk5vdEV4aXN0cyA9IGZ1bmN0aW9uIDxUPihpdGVtOiBUKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5pbmRleE9mKGl0ZW0pO1xuICAgIGlmIChpbmRleCA9PSAtMSkge1xuICAgICAgICAodGhpcyBhcyBUW10pLnB1c2goaXRlbSk7XG4gICAgfVxufVxuXG5BcnJheS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gPFQ+KHNlbGVjdG9yOiAoaXRlbTogVCkgPT4gYm9vbGVhbikge1xuICAgICh0aGlzIGFzIFRbXSkucmVtb3ZlSXRlbSgodGhpcyBhcyBUW10pLmZpcnN0KHNlbGVjdG9yKSk7XG59XG5cbkFycmF5LnByb3RvdHlwZS50b0xpc3QgPSBmdW5jdGlvbiA8VD4oKTogVFtdIHtcbiAgICByZXR1cm4gKHRoaXMgYXMgVFtdKS5maWx0ZXIoeCA9PiB0cnVlKTtcbn1cbiIsImV4cG9ydCBjbGFzcyBSZWN0YW5nbGUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB4OiBudW1iZXIsIHB1YmxpYyB5OiBudW1iZXIsIHB1YmxpYyB3aWR0aDogbnVtYmVyLCBwdWJsaWMgaGVpZ2h0OiBudW1iZXIpIHsgfVxuXG4gICAgcHVibGljIGNvbGxpZGVzV2l0aCA9IChyZWN0YW5nbGU6IFJlY3RhbmdsZSkgPT4ge1xuICAgICAgICB2YXIgaGl0eCA9IGZhbHNlO1xuICAgICAgICB2YXIgaGl0eSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy54IDw9IHJlY3RhbmdsZS54KSB7XG4gICAgICAgICAgICBpZiAodGhpcy54IDw9IHJlY3RhbmdsZS54ICYmIHRoaXMueCArIHRoaXMud2lkdGggPiByZWN0YW5nbGUueCkge1xuICAgICAgICAgICAgICAgIGhpdHggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHJlY3RhbmdsZS54IDw9IHRoaXMueCAmJiByZWN0YW5nbGUueCArIHJlY3RhbmdsZS53aWR0aCA+IHRoaXMueCkge1xuICAgICAgICAgICAgICAgIGhpdHggPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhpdHgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnkgPD0gcmVjdGFuZ2xlLnkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy55IDw9IHJlY3RhbmdsZS55ICYmIHRoaXMueSArIHRoaXMud2lkdGggPiByZWN0YW5nbGUueSkge1xuICAgICAgICAgICAgICAgICAgICBoaXR5ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChyZWN0YW5nbGUueSA8PSB0aGlzLnkgJiYgcmVjdGFuZ2xlLnkgKyByZWN0YW5nbGUud2lkdGggPiB0aGlzLnkpIHtcbiAgICAgICAgICAgICAgICAgICAgaGl0eSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhpdHggJiYgaGl0eTtcbiAgICB9XG5cbiAgICBwdWJsaWMgaXNIaXRCeSA9ICh4OiBudW1iZXIsIHk6IG51bWJlcikgPT4ge1xuICAgICAgICByZXR1cm4geCA+IHRoaXMueCAmJiB4IDwgdGhpcy54ICsgdGhpcy53aWR0aFxuICAgICAgICAgICAgJiYgeSA+IHRoaXMueSAmJiB5IDwgdGhpcy55ICsgdGhpcy5oZWlnaHQ7XG4gICAgfVxufSIsImltcG9ydCB7IEVDYW52YXMgfSBmcm9tIFwiLi9lQ2FudmFzXCI7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgeyBMYXlvdXRWaWV3IH0gZnJvbSBcIi4vbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlld1wiO1xuaW1wb3J0IHsgRUFuaW1hdGlvbiB9IGZyb20gXCIuLi9lQW5pbWF0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBTdGFnZSB7XG4gICAgcHJpdmF0ZSB2aWV3OiBMYXlvdXRWaWV3O1xuICAgIHByaXZhdGUgc2hvdWxkVXBkYXRlTGF5b3V0OiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjYW52YXM6IEVDYW52YXMpIHtcbiAgICAgICAgY2FudmFzLmFkZERyYXdGdW5jdGlvbih0aGlzLnJlbmRlcik7XG4gICAgICAgIGNhbnZhcy5yZXNpemVkLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5jYW52YXNSZXNpemVkKTtcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcIm1vdXNlZG93blwiLCB0aGlzLm1vdXNlRG93bik7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZXVwXCIsIHRoaXMubW91c2VVcCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJtb3VzZW1vdmVcIiwgdGhpcy5tb3VzZU1vdmUpO1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5jbGljayk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYW52YXNSZXNpemVkID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZUxheW91dCA9IHRydWU7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtb3VzZURvd24gPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudmlldykge1xuICAgICAgICAgICAgdGhpcy52aWV3Lm1vdXNlRG93bih7XG4gICAgICAgICAgICAgICAgY2xpZW50WDogZXYuY2xpZW50WCAvIHRoaXMuY2FudmFzLmRwcixcbiAgICAgICAgICAgICAgICBjbGllbnRZOiBldi5jbGllbnRZIC8gdGhpcy5jYW52YXMuZHByLFxuICAgICAgICAgICAgICAgIGFsdEtleTogZXYuYWx0S2V5LFxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGV2LmN0cmxLZXksXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGV2LnNoaWZ0S2V5XG4gICAgICAgICAgICB9IGFzIE1vdXNlRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtb3VzZVVwID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5tb3VzZVVwKHtcbiAgICAgICAgICAgICAgICBjbGllbnRYOiBldi5jbGllbnRYIC8gdGhpcy5jYW52YXMuZHByLFxuICAgICAgICAgICAgICAgIGNsaWVudFk6IGV2LmNsaWVudFkgLyB0aGlzLmNhbnZhcy5kcHIsXG4gICAgICAgICAgICAgICAgYWx0S2V5OiBldi5hbHRLZXksXG4gICAgICAgICAgICAgICAgY3RybEtleTogZXYuY3RybEtleSxcbiAgICAgICAgICAgICAgICBzaGlmdEtleTogZXYuc2hpZnRLZXlcbiAgICAgICAgICAgIH0gYXMgTW91c2VFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIG1vdXNlTW92ZSA9IChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy52aWV3KSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcubW91c2VNb3ZlKHtcbiAgICAgICAgICAgICAgICBjbGllbnRYOiBldi5jbGllbnRYIC8gdGhpcy5jYW52YXMuZHByLFxuICAgICAgICAgICAgICAgIGNsaWVudFk6IGV2LmNsaWVudFkgLyB0aGlzLmNhbnZhcy5kcHIsXG4gICAgICAgICAgICAgICAgYWx0S2V5OiBldi5hbHRLZXksXG4gICAgICAgICAgICAgICAgY3RybEtleTogZXYuY3RybEtleSxcbiAgICAgICAgICAgICAgICBzaGlmdEtleTogZXYuc2hpZnRLZXlcbiAgICAgICAgICAgIH0gYXMgTW91c2VFdmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGNsaWNrID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLnZpZXcpIHtcbiAgICAgICAgICAgIHRoaXMudmlldy5jbGljayh7XG4gICAgICAgICAgICAgICAgY2xpZW50WDogZXYuY2xpZW50WCAvIHRoaXMuY2FudmFzLmRwcixcbiAgICAgICAgICAgICAgICBjbGllbnRZOiBldi5jbGllbnRZIC8gdGhpcy5jYW52YXMuZHByLFxuICAgICAgICAgICAgICAgIGFsdEtleTogZXYuYWx0S2V5LFxuICAgICAgICAgICAgICAgIGN0cmxLZXk6IGV2LmN0cmxLZXksXG4gICAgICAgICAgICAgICAgc2hpZnRLZXk6IGV2LnNoaWZ0S2V5XG4gICAgICAgICAgICB9IGFzIE1vdXNlRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXIgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIHdpZHRoPzogbnVtYmVyLCBoZWlnaHQ/OiBudW1iZXIpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudmlldykge1xuICAgICAgICAgICAgaWYgKHRoaXMuc2hvdWxkVXBkYXRlTGF5b3V0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnVwZGF0ZUxheW91dChjdHgsIG5ldyBSZWN0YW5nbGUoMCwgMCwgd2lkdGgsIGhlaWdodCkpO1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkVXBkYXRlTGF5b3V0ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICAgICAgdGhpcy52aWV3LnJlbmRlcihjdHgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHNldFZpZXcgPSAodmlldzogTGF5b3V0VmlldykgPT4ge1xuICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZUxheW91dCA9IHRydWU7XG4gICAgfVxufSIsImV4cG9ydCBlbnVtIEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uIHtcbiAgICBMZWZ0LFxuICAgIENlbnRlcixcbiAgICBSaWdodCxcbn0iLCJleHBvcnQgZW51bSBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24ge1xuICAgIFRvcCxcbiAgICBDZW50ZXIsXG4gICAgQm90dG9tLFxufSIsImV4cG9ydCBlbnVtIFNldHRpbmdPcGVyYXRpb24ge1xuICAgIEFkZFN0YXJMYXllcixcbiAgICBSZW1vdmVTdGFyTGF5ZXIsXG4gICAgQ2hhbmdlTnVtYmVyT2ZTdGFycyxcbiAgICBDaGFuZ2VTcGVlZCxcbiAgICBDaGFuZ2VTaXplc1xufSIsImV4cG9ydCBlbnVtIFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlIHtcbiAgICBoaWRkZW4sXG4gICAgYmVmb3JlVmlzaWJsZSxcbiAgICB2aXNpYmxlXG59IiwiZXhwb3J0IGVudW0gT3JpZW50YXRpb24ge1xuICAgIEhvcml6b250YWwsXG4gICAgVmVydGljYWxcbn0iLCJleHBvcnQgZW51bSBJbWFnZVNjYWxpbmdNb2Rle1xuICAgIEZpdEFuZE92ZXJmaWxsLFxuICAgIEZpdEFuZFNwYWNlXG59IiwiZXhwb3J0IGNsYXNzIFNwYWNpbmcge1xuICAgIHB1YmxpYyB0b3A6IG51bWJlciA9IDA7XG4gICAgcHVibGljIHJpZ2h0OiBudW1iZXIgPSAwO1xuICAgIHB1YmxpYyBib3R0b206IG51bWJlciA9IDA7XG4gICAgcHVibGljIGxlZnQ6IG51bWJlciA9IDA7XG59IiwiaW1wb3J0IHsgSG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb24gfSBmcm9tIFwiLi9ob3Jpem9udGFsQWxpZ25lbWVudE9wdGlvblwiO1xuaW1wb3J0IHsgVmVydGljYWxBbGlnbmVtZW50T3B0aW9uIH0gZnJvbSBcIi4vdmVydGljYWxBbGlnbmVtZW50T3B0aW9uXCI7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgeyBTcGFjaW5nIH0gZnJvbSBcIi4vc3BhY2luZ1wiO1xuXG5leHBvcnQgY2xhc3MgQWxpZ25lbWVudCB7XG4gICAgcHVibGljIGhvcml6b250YWxBbGlnbiA9IEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uLkNlbnRlcjtcbiAgICBwdWJsaWMgdmVydGljYWxBbGlnbiA9IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbi5DZW50ZXI7XG5cbiAgICBwdWJsaWMgbWFyZ2luID0gbmV3IFNwYWNpbmcoKTtcbiAgICAvLyBwdWJsaWMgcGFkZGluZyA9IG5ldyBTcGFjaW5nKCk7XG5cbiAgICBwdWJsaWMgY2FsY3VsYXRlRGltZW5zaW9uc1ggPSAoYm91bmRzOiBSZWN0YW5nbGUsIHdpZHRoOiBudW1iZXIpID0+IHtcbiAgICAgICAgc3dpdGNoICh0aGlzLmhvcml6b250YWxBbGlnbikge1xuICAgICAgICAgICAgY2FzZSBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi5MZWZ0OlxuICAgICAgICAgICAgICAgIHJldHVybiBib3VuZHMueCArIHRoaXMubWFyZ2luLmxlZnQ7XG4gICAgICAgICAgICBjYXNlIEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uLkNlbnRlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYm91bmRzLnggKyBib3VuZHMud2lkdGggLyAyIC0gd2lkdGggLyAyO1xuICAgICAgICAgICAgY2FzZSBIb3Jpem9udGFsQWxpZ25lbWVudE9wdGlvbi5SaWdodDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYm91bmRzLnggKyBib3VuZHMud2lkdGggLSB3aWR0aCAtIHRoaXMubWFyZ2luLnJpZ2h0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNhbGN1bGF0ZURpbWVuc2lvbnNZID0gKGJvdW5kczogUmVjdGFuZ2xlLCBoZWlnaHQ6IG51bWJlcikgPT4ge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudmVydGljYWxBbGlnbikge1xuICAgICAgICAgICAgY2FzZSBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24uVG9wOlxuICAgICAgICAgICAgICAgIHJldHVybiBib3VuZHMueSArIHRoaXMubWFyZ2luLnRvcDtcbiAgICAgICAgICAgIGNhc2UgVmVydGljYWxBbGlnbmVtZW50T3B0aW9uLkNlbnRlcjpcbiAgICAgICAgICAgICAgICByZXR1cm4gYm91bmRzLnkgKyBib3VuZHMuaGVpZ2h0IC8gMiAtIGhlaWdodCAvIDI7XG4gICAgICAgICAgICBjYXNlIFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbi5Cb3R0b206XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJvdW5kcy55ICsgYm91bmRzLmhlaWdodCAtIGhlaWdodCAtIHRoaXMubWFyZ2luLmJvdHRvbTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgeyBBbGlnbmVtZW50IH0gZnJvbSBcIi4vYWxpZ25lbWVudC9hbGlnbmVtZW50XCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZW5kZXJPYmplY3Qge1xuICAgIHByaXZhdGUgc3RhdGljIGlkQ291bnRlciA9IDA7XG4gICAgcHJpdmF0ZSBnZW5lcmF0ZU5ld0lkID0gKCkgPT4ge1xuICAgICAgICBSZW5kZXJPYmplY3QuaWRDb3VudGVyKys7XG4gICAgICAgIHJldHVybiBSZW5kZXJPYmplY3QuaWRDb3VudGVyO1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmlkID0gdGhpcy5nZW5lcmF0ZU5ld0lkKCk7XG4gICAgICAgIHRoaXMubmFtZSA9IFwib2JqZWN0IFwiICsgdGhpcy5pZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgaWQ6IG51bWJlcjtcbiAgICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuICAgIHB1YmxpYyB0YWc6IGFueTtcblxuICAgIHB1YmxpYyBib3VuZHM6IFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgMCwgMCk7XG4gICAgcHVibGljIGRpbWVuc2lvbnM6IFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoMCwgMCwgMCwgMCk7XG5cbiAgICBwdWJsaWMgYWxpZ25lbWVudCA9IG5ldyBBbGlnbmVtZW50KCk7XG5cbiAgICBwcml2YXRlIHNob3VsZFVwZGF0ZUxheW91dCA9IGZhbHNlO1xuXG4gICAgcHVibGljIHJlbmRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgICAgICBpZiAodGhpcy5zaG91bGRVcGRhdGVMYXlvdXQpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGF5b3V0KGN0eCwgdGhpcy5ib3VuZHMpO1xuICAgICAgICAgICAgdGhpcy5zaG91bGRVcGRhdGVMYXlvdXQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSkge1xuICAgICAgICB0aGlzLmJvdW5kcyA9IGJvdW5kcztcbiAgICB9XG5cbiAgICBwdWJsaWMgdHJpZ2dlclVwZGF0ZUxheW91dCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zaG91bGRVcGRhdGVMYXlvdXQgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNhYmxlTW91c2VFdmVudHMgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMubW91c2VEb3duID0gKCkgPT4geyB9O1xuICAgICAgICB0aGlzLm1vdXNlVXAgPSAoKSA9PiB7IH07XG4gICAgICAgIHRoaXMubW91c2VNb3ZlID0gKCkgPT4geyB9O1xuICAgICAgICB0aGlzLmNsaWNrID0gKCkgPT4geyB9O1xuICAgIH1cblxuICAgIGFic3RyYWN0IG1vdXNlRG93bihldjogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgYWJzdHJhY3QgbW91c2VVcChldjogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgYWJzdHJhY3QgbW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KTogdm9pZDtcbiAgICBhYnN0cmFjdCBjbGljayhldjogTW91c2VFdmVudCk6IHZvaWQ7XG59IiwiaW1wb3J0IHsgUmVuZGVyT2JqZWN0IH0gZnJvbSBcIi4uL3JlbmRlck9iamVjdFwiO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTGF5b3V0VmlldyBleHRlbmRzIFJlbmRlck9iamVjdCB7XG4gICAgcHJvdGVjdGVkIGNoaWxkcmVuOiBSZW5kZXJPYmplY3RbXSA9IFtdO1xuXG4gICAgcHVibGljIHJlbmRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xuICAgICAgICBzdXBlci5yZW5kZXIoY3R4KTtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjaGlsZC5yZW5kZXIoY3R4KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBwdWJsaWMgbW91c2VEb3duKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGQubW91c2VEb3duKGV2KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtb3VzZVVwKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGQubW91c2VVcChldik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGQubW91c2VNb3ZlKGV2KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjbGljayhldjogTW91c2VFdmVudCkge1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4udG9MaXN0KCkpIHtcbiAgICAgICAgICAgIGNoaWxkLmNsaWNrKGV2KTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBSZW5kZXJPYmplY3QgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9yZW5kZXJPYmplY3RcIjtcbmltcG9ydCB7IFN0YXIgfSBmcm9tIFwiLi4vbW9kZWxzL3N0YXJcIjtcblxuZXhwb3J0IGNsYXNzIFN0YXJSZW5kZXJPYmplY3QgZXh0ZW5kcyBSZW5kZXJPYmplY3Qge1xuICAgIG1vdXNlRG93bihldjogTW91c2VFdmVudCk6IHZvaWQge1xuICAgIH1cbiAgICBtb3VzZVVwKGV2OiBNb3VzZUV2ZW50KTogdm9pZCB7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdGFyOiBTdGFyKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuXG4gICAgICAgIHZhciBlbmQgPSB0aGlzLnN0YXIuciAqIDM7XG4gICAgICAgIHZhciBncmFkID0gY3R4LmNyZWF0ZVJhZGlhbEdyYWRpZW50KHRoaXMuc3Rhci54LCB0aGlzLnN0YXIueSwgdGhpcy5zdGFyLnIsIHRoaXMuc3Rhci54LCB0aGlzLnN0YXIueSwgZW5kKTtcbiAgICAgICAgZ3JhZC5hZGRDb2xvclN0b3AoMCwgJ3JnYmEoMjU1LCAyNTUsIDI1NSwgMC4yKScpO1xuICAgICAgICBncmFkLmFkZENvbG9yU3RvcCgxLCAncmdiYSgyNTUsIDI1NSwgMjU1LCAwKScpO1xuICAgICAgICBjdHguZmlsbFN0eWxlID0gZ3JhZDtcbiAgICAgICAgY3R4LmFyYyh0aGlzLnN0YXIueCwgdGhpcy5zdGFyLnksIGVuZCwgMCwgTWF0aC5QSSAqIDIpO1xuICAgICAgICBjdHguZmlsbCgpO1xuXG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIndoaXRlXCI7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4LmFyYyh0aGlzLnN0YXIueCwgdGhpcy5zdGFyLnksIHRoaXMuc3Rhci5yLCAwLCBNYXRoLlBJICogMik7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgfVxuICAgIG1vdXNlTW92ZShldjogTW91c2VFdmVudCk6IHZvaWQge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgICB9XG4gICAgY2xpY2soZXY6IE1vdXNlRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWV0aG9kIG5vdCBpbXBsZW1lbnRlZC5cIik7XG4gICAgfVxufSIsImltcG9ydCB7IExheW91dFZpZXcgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9sYXlvdXRWaWV3XCI7XG5pbXBvcnQgeyBTdGFyUmVuZGVyT2JqZWN0IH0gZnJvbSBcIi4vc3RhclJlbmRlck9iamVjdFwiO1xuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgeyBTdGFyTGF5ZXIgfSBmcm9tIFwiLi4vbW9kZWxzL3N0YXJMYXllclwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcFwiO1xuaW1wb3J0IHsgU2V0dGluZ09wZXJhdGlvbiB9IGZyb20gXCIuLi9zZXR0aW5ncy9zZXR0aW5nT3BlcmF0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBTdGFyTGF5ZXJEcmF3ZXIgZXh0ZW5kcyBMYXlvdXRWaWV3IHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RhckxheWVyOiBTdGFyTGF5ZXIpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgQXBwLnNldHRpbmdNYW5hZ2VyLnVwZGF0ZS5hZGRFdmVudExpc3RlbmVyKHRoaXMuc2V0dGluZ3NVcGRhdGVkKVxuICAgICAgICB0aGlzLmRpc2FibGVNb3VzZUV2ZW50cygpO1xuICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHRpbmdzVXBkYXRlZCA9IChvcGVyYXRpb246IFNldHRpbmdPcGVyYXRpb24pID0+IHtcbiAgICAgICAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgU2V0dGluZ09wZXJhdGlvbi5DaGFuZ2VOdW1iZXJPZlN0YXJzOlxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlTnVtYmVyT2ZTdGFycygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVOdW1iZXJPZlN0YXJzID0gKCkgPT4ge1xuICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gW107XG5cbiAgICAgICAgZm9yIChjb25zdCBzdGFyIG9mIHRoaXMuc3RhckxheWVyLnN0YXJzKSB7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobmV3IFN0YXJSZW5kZXJPYmplY3Qoc3RhcikpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICBwdWJsaWMgbW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgfVxuXG4gICAgcHVibGljIGNsaWNrKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgfVxufSIsImltcG9ydCB7IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlIH0gZnJvbSBcIi4vc2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGVcIjtcblxuZXhwb3J0IGNsYXNzIFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbCB7XG4gICAgcHVibGljIHN0YXRlOiBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZSA9IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmhpZGRlbjtcbn0iLCJleHBvcnQgY2xhc3MgRUV2ZW50IHtcbiAgICBwcml2YXRlIGxpc3RlbmVyczogKCgpID0+IHZvaWQpW10gPSBbXTtcblxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIC8vIHZhbGlkYXRpb25cbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA+PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBcImxpc3RlbmVyIGFscmVhZHkgYWRkZWRcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVySWZOb3RFeGlzdHMgPSAobGlzdGVuZXI6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgICAgLy8gdmFsaWRhdGlvblxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpID49IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNwYXRjaEV2ZW50ID0gKCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IHRoaXMubGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgZXZlbnQoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIC8vIHZhbGlkYXRpb25cbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgbm90IGZvdW5kXCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UodGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVySWZFeGlzdHMgPSAobGlzdGVuZXI6ICgpID0+IHZvaWQpID0+IHtcbiAgICAgICAgLy8gdmFsaWRhdGlvblxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMuc3BsaWNlKHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpLCAxKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFRXZlbnRUPFQ+IHtcbiAgICBwcml2YXRlIGxpc3RlbmVyczogKChhcmc6IFQpID0+IHZvaWQpW10gPSBbXTtcblxuICAgIHB1YmxpYyBhZGRFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoYXJnOiBUKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIC8vIHZhbGlkYXRpb25cbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA+PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBcImxpc3RlbmVyIGFscmVhZHkgYWRkZWRcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkaXNwYXRjaEV2ZW50ID0gKGFyZzogVCkgPT4ge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBldmVudCA9IHRoaXMubGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgZXZlbnQoYXJnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoYXJnOiBUKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIC8vIHZhbGlkYXRpb25cbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgbm90IGZvdW5kXCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UodGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVFdmVudFRUPFQxLCBUMj4ge1xuICAgIHByaXZhdGUgbGlzdGVuZXJzOiAoKGFyZzE6IFQxLCBhcmcyOiBUMikgPT4gdm9pZClbXSA9IFtdO1xuXG4gICAgcHVibGljIGFkZEV2ZW50TGlzdGVuZXIgPSAobGlzdGVuZXI6IChhcmcxOiBUMSwgYXJnMjogVDIpID0+IHZvaWQpID0+IHtcbiAgICAgICAgLy8gdmFsaWRhdGlvblxuICAgICAgICBpZiAoIWxpc3RlbmVyIHx8IHRoaXMubGlzdGVuZXJzLmluZGV4T2YobGlzdGVuZXIpID49IDApIHtcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgYWxyZWFkeSBhZGRlZFwiO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgfVxuXG4gICAgcHVibGljIGRpc3BhdGNoRXZlbnQgPSAoYXJnMTogVDEsIGFyZzI6IFQyKSA9PiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5saXN0ZW5lcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGV2ZW50ID0gdGhpcy5saXN0ZW5lcnNbaV07XG4gICAgICAgICAgICBldmVudChhcmcxLCBhcmcyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVFdmVudExpc3RlbmVyID0gKGxpc3RlbmVyOiAoYXJnMTogVDEsIGFyZzI6IFQyKSA9PiB2b2lkKSA9PiB7XG4gICAgICAgIC8vIHZhbGlkYXRpb25cbiAgICAgICAgaWYgKCFsaXN0ZW5lciB8fCB0aGlzLmxpc3RlbmVycy5pbmRleE9mKGxpc3RlbmVyKSA8IDApIHtcbiAgICAgICAgICAgIHRocm93IFwibGlzdGVuZXIgbm90IGZvdW5kXCI7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmxpc3RlbmVycy5zcGxpY2UodGhpcy5saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lciksIDEpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBFQW5pbWF0aW9uIH0gZnJvbSBcIi4uL2VBbmltYXRpb25cIjtcbmltcG9ydCB7IEVFdmVudCB9IGZyb20gXCIuLi9lRXZlbnRcIjtcblxuZXhwb3J0IHR5cGUgRHJhd0Z1bmN0aW9uID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCB3aWR0aD86IG51bWJlciwgaGVpZ2h0PzogbnVtYmVyKSA9PiB2b2lkO1xuXG5leHBvcnQgY2xhc3MgRUNhbnZhcyB7XG4gICAgcHJpdmF0ZSBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIHByaXZhdGUgY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ7XG5cbiAgICBwcml2YXRlIGRyYXdGdW5jdGlvbnM6IERyYXdGdW5jdGlvbltdID0gW107XG4gICAgcHVibGljIGRwciA9IDE7XG5cbiAgICBwdWJsaWMgZ2V0IHdpZHRoKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5jbGllbnRXaWR0aCAvIHRoaXMuZHByO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaGVpZ2h0KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcy5jbGllbnRIZWlnaHQgLyB0aGlzLmRwcjtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRwclNjYWxpbmdFbmFibGVkID0gdHJ1ZTtcbiAgICBwdWJsaWMgZW5hYmxlRHByU2NhbGluZyA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5kcHJTY2FsaW5nRW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMucmVzaXplKCk7XG4gICAgfVxuICAgIHB1YmxpYyBkaXNhYmxlRHByU2NhbGluZyA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5kcHJTY2FsaW5nRW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZXNpemVkID0gbmV3IEVFdmVudCgpXG5cbiAgICBwcml2YXRlIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZ1bGxTY3JlZW4oKTogRUNhbnZhcyB7XG4gICAgICAgIGRvY3VtZW50LmJvZHkucGFyZW50RWxlbWVudC5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5tYXJnaW4gPSBcIjBcIjtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5zdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cbiAgICAgICAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNhbnZhcyk7XG4gICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IFwiMTAwJVwiXG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcblxuICAgICAgICB2YXIgZW5DYW52YXMgPSBuZXcgRUNhbnZhcygpO1xuICAgICAgICBlbkNhbnZhcy5jYW52YXMgPSBjYW52YXM7XG4gICAgICAgIGVuQ2FudmFzLmN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInJlc2l6ZVwiLCBlbkNhbnZhcy5yZXNpemUpO1xuICAgICAgICBlbkNhbnZhcy5yZXNpemUoKTtcbiAgICAgICAgcmV0dXJuIGVuQ2FudmFzO1xuICAgIH1cblxuICAgIHByaXZhdGUgc3RhdGljIGN1cnNvckxvY2s6IHN0cmluZyA9IG51bGw7XG5cbiAgICBwdWJsaWMgc3RhdGljIFNldEN1cnNvciA9IChuYW1lOiBzdHJpbmcsIHBvaW50ZXI6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgaWYgKHBvaW50ZXIpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCI7XG4gICAgICAgICAgICBFQ2FudmFzLmN1cnNvckxvY2sgPSBuYW1lO1xuICAgICAgICB9IGVsc2UgaWYgKG5hbWUgPT0gRUNhbnZhcy5jdXJzb3JMb2NrKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmN1cnNvciA9IFwiZGVmYXVsdFwiO1xuICAgICAgICAgICAgRUNhbnZhcy5jdXJzb3JMb2NrID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyByZXNpemUgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuZHByID0gdGhpcy5kcHJTY2FsaW5nRW5hYmxlZCA/IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDEgOiAxO1xuXG4gICAgICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy5jYW52YXMuY2xpZW50V2lkdGg7XG4gICAgICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuY2FudmFzLmNsaWVudEhlaWdodDtcblxuICAgICAgICB0aGlzLnJlc2l6ZWQuZGlzcGF0Y2hFdmVudCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBkcmF3ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmN0eC5zYXZlKCk7XG4gICAgICAgIHRoaXMuY3R4LnNjYWxlKHRoaXMuZHByLCB0aGlzLmRwcik7XG4gICAgICAgIGZvciAoY29uc3QgZHJhd0Z1bmN0aW9uIG9mIHRoaXMuZHJhd0Z1bmN0aW9ucykge1xuICAgICAgICAgICAgZHJhd0Z1bmN0aW9uKHRoaXMuY3R4LCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdHgucmVzdG9yZSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGREcmF3RnVuY3Rpb24gPSAoZnVuYzogRHJhd0Z1bmN0aW9uKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0Z1bmN0aW9ucy5wdXNoKGZ1bmMpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVEcmF3RnVuY3Rpb24gPSAoZnVuYzogRHJhd0Z1bmN0aW9uKSA9PiB7XG4gICAgICAgIHRoaXMuZHJhd0Z1bmN0aW9ucy5zcGxpY2UodGhpcy5kcmF3RnVuY3Rpb25zLmluZGV4T2YoZnVuYyksIDEpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSZW5kZXJPYmplY3QgfSBmcm9tIFwiLi4vcmVuZGVyT2JqZWN0XCI7XG5pbXBvcnQgeyBFQ2FudmFzIH0gZnJvbSBcIi4uL2VDYW52YXNcIjtcbmltcG9ydCB7IEVFdmVudFQgfSBmcm9tIFwiLi4vLi4vZUV2ZW50XCI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb250cm9sIGV4dGVuZHMgUmVuZGVyT2JqZWN0IHtcbiAgICBwcm90ZWN0ZWQgaXNNb3VzZU92ZXIgPSBmYWxzZTtcbiAgICBwdWJsaWMgaXNFbmFibGVkID0gdHJ1ZTtcblxuICAgIHB1YmxpYyBjbGlja2VkID0gbmV3IEVFdmVudFQ8Q29udHJvbD4oKTtcblxuICAgIHB1YmxpYyBtb3VzZU1vdmUoZXY6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kaW1lbnNpb25zLmlzSGl0QnkoZXYuY2xpZW50WCwgZXYuY2xpZW50WSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTW91c2VPdmVyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBFQ2FudmFzLlNldEN1cnNvcih0aGlzLm5hbWUsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzTW91c2VPdmVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgRUNhbnZhcy5TZXRDdXJzb3IodGhpcy5uYW1lLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY2xpY2sgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5kaW1lbnNpb25zLmlzSGl0QnkoZXYuY2xpZW50WCwgZXYuY2xpZW50WSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWNrZWQuZGlzcGF0Y2hFdmVudCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtb3VzZURvd24oZXY6IE1vdXNlRXZlbnQpOiB2b2lkIHsgfVxuICAgIHB1YmxpYyBtb3VzZVVwKGV2OiBNb3VzZUV2ZW50KTogdm9pZCB7IH1cbn0iLCJleHBvcnQgY2xhc3MgQnV0dG9uUHJvcGVydGllcyB7XG4gICAgcHVibGljIGZvbnRTaXplID0gNDA7XG4gICAgcHVibGljIGZvbnRQcmVmaXggPSBcIlwiO1xuICAgIHB1YmxpYyBmb250RmFtaWx5ID0gXCJmb250YXdlc29tZVwiO1xuICAgIHB1YmxpYyBmaWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICBwdWJsaWMgbW91c2VPdmVyRmlsbFN0eWxlID0gXCJyZWRcIjtcbiAgICBwdWJsaWMgYmFja2dyb3VuZEZpbGxTdHlsZTogc3RyaW5nID0gdW5kZWZpbmVkO1xuXG4gICAgcHVibGljIGdldEZvbnQgPSAoKSA9PiB7XG4gICAgICAgIHZhciBmb250ID0gXCJcIjtcbiAgICAgICAgaWYgKHRoaXMuZm9udFByZWZpeCkge1xuICAgICAgICAgICAgZm9udCArPSB0aGlzLmZvbnRQcmVmaXggKyBcIiBcIlxuICAgICAgICB9XG4gICAgICAgIGZvbnQgKz0gdGhpcy5mb250U2l6ZSArIFwicHhcIiArIFwiIFwiICsgdGhpcy5mb250RmFtaWx5O1xuICAgICAgICByZXR1cm4gZm9udDtcbiAgICB9XG59IiwiaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcbmltcG9ydCB7IEJ1dHRvblByb3BlcnRpZXMgfSBmcm9tIFwiLi9idXR0b25Qcm9wZXJ0aWVzXCI7XG5cbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBDb250cm9sIHtcblxuICAgIHB1YmxpYyBwcm9wZXJ0aWVzID0gbmV3IEJ1dHRvblByb3BlcnRpZXMoKTtcbiAgICBwdWJsaWMgdGV4dDogc3RyaW5nO1xuXG4gICAgcHVibGljIHJlbmRlciA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5wcm9wZXJ0aWVzLmJhY2tncm91bmRGaWxsU3R5bGUpIHtcbiAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnByb3BlcnRpZXMuYmFja2dyb3VuZEZpbGxTdHlsZTtcbiAgICAgICAgICAgIGN0eC5maWxsUmVjdCh0aGlzLmRpbWVuc2lvbnMueCwgdGhpcy5kaW1lbnNpb25zLnksIHRoaXMuZGltZW5zaW9ucy53aWR0aCwgdGhpcy5kaW1lbnNpb25zLmhlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pc01vdXNlT3Zlcikge1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMucHJvcGVydGllcy5tb3VzZU92ZXJGaWxsU3R5bGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5wcm9wZXJ0aWVzLmZpbGxTdHlsZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGN0eC5mb250ID0gdGhpcy5wcm9wZXJ0aWVzLmdldEZvbnQoKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IFwibGVmdFwiO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcbiAgICAgICAgY3R4LmZpbGxUZXh0KHRoaXMudGV4dCwgdGhpcy5kaW1lbnNpb25zLngsIHRoaXMuZGltZW5zaW9ucy55KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0ID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSk6IHZvaWQgPT4ge1xuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xuXG4gICAgICAgIGN0eC5mb250ID0gdGhpcy5wcm9wZXJ0aWVzLmdldEZvbnQoKTtcbiAgICAgICAgY3R4LnRleHRBbGlnbiA9IFwibGVmdFwiO1xuICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJ0b3BcIjtcbiAgICAgICAgdmFyIHNpemUgPSBjdHgubWVhc3VyZVRleHQodGhpcy50ZXh0KTtcbiAgICAgICAgXG4gICAgICAgIHZhciB4ID0gdGhpcy5hbGlnbmVtZW50LmNhbGN1bGF0ZURpbWVuc2lvbnNYKGJvdW5kcywgc2l6ZS53aWR0aCk7XG4gICAgICAgIHZhciB5ID0gdGhpcy5hbGlnbmVtZW50LmNhbGN1bGF0ZURpbWVuc2lvbnNZKGJvdW5kcywgdGhpcy5wcm9wZXJ0aWVzLmZvbnRTaXplKTtcbiAgICAgICAgXG4gICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IG5ldyBSZWN0YW5nbGUoeCwgeSwgc2l6ZS53aWR0aCwgdGhpcy5wcm9wZXJ0aWVzLmZvbnRTaXplKVxuICAgIH1cbn0iLCJpbXBvcnQgeyBPcmllbnRhdGlvbiB9IGZyb20gXCIuLi9hbGlnbmVtZW50L29yaWVudGF0aW9uXCI7XG5cbmV4cG9ydCBjbGFzcyBMaXN0Vmlld1Byb3BlcnRpZXMge1xuICAgIHB1YmxpYyBpdGVtU3BhY2luZyA9IDMwO1xuICAgIHB1YmxpYyBvcmllbnRhdGlvbiA9IE9yaWVudGF0aW9uLlZlcnRpY2FsO1xufSIsImltcG9ydCB7IExheW91dFZpZXcgfSBmcm9tIFwiLi9sYXlvdXRWaWV3XCI7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgeyBSZW5kZXJPYmplY3QgfSBmcm9tIFwiLi4vcmVuZGVyT2JqZWN0XCI7XG5pbXBvcnQgeyBMaXN0Vmlld1Byb3BlcnRpZXMgfSBmcm9tIFwiLi9saXN0Vmlld1Byb3BlcnRpZXNcIjtcbmltcG9ydCB7IEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uIH0gZnJvbSBcIi4uL2FsaWduZW1lbnQvaG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb25cIjtcbmltcG9ydCB7IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbiB9IGZyb20gXCIuLi9hbGlnbmVtZW50L3ZlcnRpY2FsQWxpZ25lbWVudE9wdGlvblwiO1xuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tIFwiLi4vYWxpZ25lbWVudC9vcmllbnRhdGlvblwiO1xuXG5leHBvcnQgY2xhc3MgTGlzdFZpZXcgZXh0ZW5kcyBMYXlvdXRWaWV3IHtcbiAgICBwdWJsaWMgcHJvcGVydGllcyA9IG5ldyBMaXN0Vmlld1Byb3BlcnRpZXMoKTtcblxuICAgIHB1YmxpYyBhZGRJdGVtID0gKGxheW91dFZpZXc6IFJlbmRlck9iamVjdCkgPT4ge1xuICAgICAgICBsYXlvdXRWaWV3LmFsaWduZW1lbnQuaG9yaXpvbnRhbEFsaWduID0gSG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb24uTGVmdDtcbiAgICAgICAgbGF5b3V0Vmlldy5hbGlnbmVtZW50LnZlcnRpY2FsQWxpZ24gPSBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24uVG9wO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobGF5b3V0Vmlldyk7XG4gICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVJdGVtID0gKGxheW91dFZpZXc6IFJlbmRlck9iamVjdCkgPT4ge1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnJlbW92ZUl0ZW0obGF5b3V0Vmlldyk7XG4gICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZUxheW91dChjdHgsIGJvdW5kcyk7XG5cbiAgICAgICAgdmFyIHggPSB0aGlzLmFsaWduZW1lbnQuY2FsY3VsYXRlRGltZW5zaW9uc1goYm91bmRzLCB0aGlzLmRpbWVuc2lvbnMud2lkdGgpO1xuICAgICAgICB2YXIgeSA9IHRoaXMuYWxpZ25lbWVudC5jYWxjdWxhdGVEaW1lbnNpb25zWShib3VuZHMsIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQpO1xuXG4gICAgICAgIHZhciB3aWR0aCA9IDA7XG4gICAgICAgIHZhciBoZWlnaHQgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLnByb3BlcnRpZXMub3JpZW50YXRpb24gPT0gT3JpZW50YXRpb24uVmVydGljYWwpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkID0gdGhpcy5jaGlsZHJlbltpXTtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgeSArPSB0aGlzLnByb3BlcnRpZXMuaXRlbVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCArPSB0aGlzLnByb3BlcnRpZXMuaXRlbVNwYWNpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoaWxkLnVwZGF0ZUxheW91dChjdHgsIG5ldyBSZWN0YW5nbGUoeCwgeSwgMCwgMCkpO1xuICAgICAgICAgICAgICAgIHkgKz0gY2hpbGQuZGltZW5zaW9ucy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgaGVpZ2h0ICs9IGNoaWxkLmRpbWVuc2lvbnMuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGNoaWxkLmRpbWVuc2lvbnMud2lkdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICB4ICs9IHRoaXMucHJvcGVydGllcy5pdGVtU3BhY2luZztcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggKz0gdGhpcy5wcm9wZXJ0aWVzLml0ZW1TcGFjaW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjaGlsZC51cGRhdGVMYXlvdXQoY3R4LCBuZXcgUmVjdGFuZ2xlKHgsIHksIDAsIDApKTtcbiAgICAgICAgICAgICAgICB4ICs9IGNoaWxkLmRpbWVuc2lvbnMud2lkdGg7XG4gICAgICAgICAgICAgICAgd2lkdGggKz0gY2hpbGQuZGltZW5zaW9ucy53aWR0aDtcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBNYXRoLm1heChoZWlnaHQsIGNoaWxkLmRpbWVuc2lvbnMuaGVpZ2h0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRpbWVuc2lvbnMueCAhPSB4IHx8IHRoaXMuZGltZW5zaW9ucy55ICE9IHkgfHwgdGhpcy5kaW1lbnNpb25zLndpZHRoICE9IHdpZHRoIHx8IHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgIT0gaGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLmRpbWVuc2lvbnMueCA9IHg7XG4gICAgICAgICAgICB0aGlzLmRpbWVuc2lvbnMueSA9IHk7XG4gICAgICAgICAgICB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgdGhpcy5kaW1lbnNpb25zLndpZHRoID0gd2lkdGg7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUxheW91dChjdHgsIGJvdW5kcyk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuL2NvbnRyb2xcIjtcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi8uLi9nZW9tZXRyeS9yZWN0YW5nbGVcIjtcbmltcG9ydCB7IEVFdmVudFQgfSBmcm9tIFwiLi4vLi4vZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBTbGlkZXIgZXh0ZW5kcyBDb250cm9sIHtcbiAgICBwdWJsaWMgcmFkaXVzOiBudW1iZXIgPSAxMDtcblxuICAgIHB1YmxpYyBtaW5WYWx1ZSA9IDA7XG4gICAgcHVibGljIG1heFZhbHVlID0gMTAwO1xuICAgIHB1YmxpYyBjdXJyZW50VmFsdWUgPSA1MDtcbiAgICBpc0RyYWdnaW5nOiBib29sZWFuO1xuXG4gICAgcHVibGljIHZhbHVlQ2hhbmdlZCA9IG5ldyBFRXZlbnRUPG51bWJlcj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW5kZXIoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpOiB2b2lkIHtcbiAgICAgICAgdmFyIHggPSB0aGlzLmRpbWVuc2lvbnMueDtcbiAgICAgICAgdmFyIHkgPSB0aGlzLmRpbWVuc2lvbnMueTtcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICBjdHgubGluZVdpZHRoID0gMjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHgubW92ZVRvKHggKyB0aGlzLnJhZGl1cywgeSArIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgLyAyKTtcbiAgICAgICAgY3R4LmxpbmVUbyh4ICsgdGhpcy5kaW1lbnNpb25zLndpZHRoIC0gdGhpcy5yYWRpdXMsIHkgKyB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC8gMik7XG4gICAgICAgIGN0eC5zdHJva2UoKTtcblxuICAgICAgICB2YXIgcmVsVmFsdWUgPSAodGhpcy5jdXJyZW50VmFsdWUgLSB0aGlzLm1pblZhbHVlKSAvICh0aGlzLm1heFZhbHVlIC0gdGhpcy5taW5WYWx1ZSk7XG4gICAgICAgIGN0eC5maWxsU3R5bGUgPSBcImJsdWVcIjtcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguYXJjKHggKyB0aGlzLnJhZGl1cyArICh0aGlzLmRpbWVuc2lvbnMud2lkdGggLSB0aGlzLnJhZGl1cyAqIDIpICogcmVsVmFsdWUsIHkgKyB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC8gMiwgdGhpcy5yYWRpdXMsIDAsIE1hdGguUEkgKiAyKTtcbiAgICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgICBjdHguZmlsbCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQgPSAoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCA9PiB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZUxheW91dChjdHgsIGJvdW5kcyk7XG5cbiAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gbmV3IFJlY3RhbmdsZShib3VuZHMueCwgYm91bmRzLnksIDIwMCwgdGhpcy5yYWRpdXMgKiAyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW91c2VEb3duID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmRpbWVuc2lvbnMuaXNIaXRCeShldi5jbGllbnRYLCBldi5jbGllbnRZKSkge1xuICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VycmVudFZhbHVlKGV2KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgbW91c2VVcCA9IChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICB0aGlzLmlzRHJhZ2dpbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbW91c2VNb3ZlKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHN1cGVyLm1vdXNlTW92ZShldik7XG4gICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VycmVudFZhbHVlKGV2KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlQ3VycmVudFZhbHVlKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHZhciB2YWwgPSBldi5jbGllbnRYIC0gdGhpcy5kaW1lbnNpb25zLnggLSB0aGlzLnJhZGl1cztcbiAgICAgICAgdmFsID0gdmFsIC8gKHRoaXMuZGltZW5zaW9ucy53aWR0aCAtIHRoaXMucmFkaXVzICogMikgKiAodGhpcy5tYXhWYWx1ZSAtIHRoaXMubWluVmFsdWUpICsgdGhpcy5taW5WYWx1ZTtcbiAgICAgICAgaWYgKHZhbCA+IHRoaXMubWF4VmFsdWUpIHtcbiAgICAgICAgICAgIHZhbCA9IHRoaXMubWF4VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCA8IHRoaXMubWluVmFsdWUpIHtcbiAgICAgICAgICAgIHZhbCA9IHRoaXMubWluVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jdXJyZW50VmFsdWUgPSB2YWw7XG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2VkLmRpc3BhdGNoRXZlbnQodGhpcy5jdXJyZW50VmFsdWUpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xuaW1wb3J0IHsgRUV2ZW50VFQgfSBmcm9tIFwiLi4vLi4vZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBSYW5nZVNsaWRlciBleHRlbmRzIENvbnRyb2wge1xuICAgIHB1YmxpYyByYWRpdXM6IG51bWJlciA9IDEwO1xuXG4gICAgcHVibGljIG1pblZhbHVlID0gMDtcbiAgICBwdWJsaWMgbWF4VmFsdWUgPSAxMDA7XG4gICAgcHVibGljIGN1cnJlbnRWYWx1ZUxvdyA9IDI1O1xuICAgIHB1YmxpYyBjdXJyZW50VmFsdWVIaWdoID0gNzU7XG4gICAgcHVibGljIG1pbkRpZmYgPSAwLjE7XG5cbiAgICBwcml2YXRlIGlzRHJhZ2dpbmdMb3c6IGJvb2xlYW47XG4gICAgcHJpdmF0ZSBpc0RyYWdnaW5nSGlnaDogYm9vbGVhbjtcblxuICAgIHB1YmxpYyB2YWx1ZXNDaGFuZ2VkID0gbmV3IEVFdmVudFRUPG51bWJlciwgbnVtYmVyPigpO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcihjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCk6IHZvaWQge1xuICAgICAgICB2YXIgeCA9IHRoaXMuZGltZW5zaW9ucy54O1xuICAgICAgICB2YXIgeSA9IHRoaXMuZGltZW5zaW9ucy55O1xuXG4gICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcbiAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgICAgY3R4Lm1vdmVUbyh4ICsgdGhpcy5yYWRpdXMsIHkgKyB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC8gMik7XG4gICAgICAgIGN0eC5saW5lVG8oeCArIHRoaXMuZGltZW5zaW9ucy53aWR0aCAtIHRoaXMucmFkaXVzLCB5ICsgdGhpcy5kaW1lbnNpb25zLmhlaWdodCAvIDIpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiYmx1ZVwiO1xuICAgICAgICB2YXIgc2xpZGVyWSA9IHkgKyB0aGlzLmRpbWVuc2lvbnMuaGVpZ2h0IC8gMjtcblxuICAgICAgICB2YXIgcmVsVmFsdWVMb3cgPSAodGhpcy5jdXJyZW50VmFsdWVMb3cgLSB0aGlzLm1pblZhbHVlKSAvICh0aGlzLm1heFZhbHVlIC0gdGhpcy5taW5WYWx1ZSk7XG4gICAgICAgIHZhciBsb3dYID0geCArIHRoaXMucmFkaXVzICsgKHRoaXMuZGltZW5zaW9ucy53aWR0aCAtIHRoaXMucmFkaXVzICogMikgKiByZWxWYWx1ZUxvdztcblxuICAgICAgICB2YXIgcmVsVmFsdWVIaWdoID0gKHRoaXMuY3VycmVudFZhbHVlSGlnaCAtIHRoaXMubWluVmFsdWUpIC8gKHRoaXMubWF4VmFsdWUgLSB0aGlzLm1pblZhbHVlKTtcbiAgICAgICAgdmFyIGhpZ2hYID0geCArIHRoaXMucmFkaXVzICsgKHRoaXMuZGltZW5zaW9ucy53aWR0aCAtIHRoaXMucmFkaXVzICogMikgKiByZWxWYWx1ZUhpZ2g7XG5cbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJibHVlXCI7XG4gICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5tb3ZlVG8obG93WCwgc2xpZGVyWSk7XG4gICAgICAgIGN0eC5saW5lVG8oaGlnaFgsIHNsaWRlclkpO1xuICAgICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguYXJjKGxvd1gsIHNsaWRlclksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcblxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgIGN0eC5hcmMoaGlnaFgsIHNsaWRlclksIHRoaXMucmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG4gICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0ID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSk6IHZvaWQgPT4ge1xuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xuXG4gICAgICAgIHRoaXMuZGltZW5zaW9ucyA9IG5ldyBSZWN0YW5nbGUoYm91bmRzLngsIGJvdW5kcy55LCAyMDAsIHRoaXMucmFkaXVzICogMik7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdXNlRG93biA9IChldjogTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5kaW1lbnNpb25zLmlzSGl0QnkoZXYuY2xpZW50WCwgZXYuY2xpZW50WSkpIHtcbiAgICAgICAgICAgIHZhciB2YWwgPSB0aGlzLmdldENsaWNrZWRWYWx1ZShldik7XG4gICAgICAgICAgICB2YXIgZGlmZlRvTG93ID0gTWF0aC5hYnModGhpcy5jdXJyZW50VmFsdWVMb3cgLSB2YWwpO1xuICAgICAgICAgICAgdmFyIGRpZmZUb0hpZ2ggPSBNYXRoLmFicyh0aGlzLmN1cnJlbnRWYWx1ZUhpZ2ggLSB2YWwpO1xuXG4gICAgICAgICAgICBpZiAoZGlmZlRvTG93ID09IGRpZmZUb0hpZ2gpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsIDwgdGhpcy5jdXJyZW50VmFsdWVMb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nTG93ID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmdIaWdoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkaWZmVG9Mb3cgPiBkaWZmVG9IaWdoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0RyYWdnaW5nSGlnaCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRHJhZ2dpbmdMb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUN1cnJlbnRWYWx1ZXMoZXYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBtb3VzZVVwID0gKGV2OiBNb3VzZUV2ZW50KSA9PiB7XG4gICAgICAgIHRoaXMuaXNEcmFnZ2luZ0hpZ2ggPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0RyYWdnaW5nTG93ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdXNlTW92ZShldjogTW91c2VFdmVudCkge1xuICAgICAgICBzdXBlci5tb3VzZU1vdmUoZXYpO1xuICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nSGlnaCB8fCB0aGlzLmlzRHJhZ2dpbmdMb3cpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ3VycmVudFZhbHVlcyhldik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZUN1cnJlbnRWYWx1ZXMoZXY6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgdmFyIHZhbCA9IHRoaXMuZ2V0Q2xpY2tlZFZhbHVlKGV2KTtcblxuICAgICAgICBpZiAodGhpcy5pc0RyYWdnaW5nTG93KSB7XG4gICAgICAgICAgICBpZiAodmFsID4gKHRoaXMuY3VycmVudFZhbHVlSGlnaCAtIHRoaXMubWluRGlmZikpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmN1cnJlbnRWYWx1ZUhpZ2ggLSB0aGlzLm1pbkRpZmY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAodmFsIDwgdGhpcy5jdXJyZW50VmFsdWVMb3cgKyB0aGlzLm1pbkRpZmYpIHtcbiAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmN1cnJlbnRWYWx1ZUxvdyArIHRoaXMubWluRGlmZjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmlzRHJhZ2dpbmdMb3cpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFZhbHVlTG93ID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50VmFsdWVIaWdoID0gdmFsO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudmFsdWVzQ2hhbmdlZC5kaXNwYXRjaEV2ZW50KHRoaXMuY3VycmVudFZhbHVlTG93LCB0aGlzLmN1cnJlbnRWYWx1ZUhpZ2gpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0Q2xpY2tlZFZhbHVlKGV2OiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIHZhciB2YWwgPSBldi5jbGllbnRYIC0gdGhpcy5kaW1lbnNpb25zLnggLSB0aGlzLnJhZGl1cztcbiAgICAgICAgdmFsID0gdmFsIC8gKHRoaXMuZGltZW5zaW9ucy53aWR0aCAtIHRoaXMucmFkaXVzICogMikgKiAodGhpcy5tYXhWYWx1ZSAtIHRoaXMubWluVmFsdWUpICsgdGhpcy5taW5WYWx1ZTtcbiAgICAgICAgaWYgKHZhbCA+IHRoaXMubWF4VmFsdWUpIHtcbiAgICAgICAgICAgIHZhbCA9IHRoaXMubWF4VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbCA8IHRoaXMubWluVmFsdWUpIHtcbiAgICAgICAgICAgIHZhbCA9IHRoaXMubWluVmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG59IiwiaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xheW91dFZpZXdcIjtcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xuaW1wb3J0IHsgU3RhckxheWVyIH0gZnJvbSBcIi4uLy4uL21vZGVscy9zdGFyTGF5ZXJcIjtcbmltcG9ydCB7IExpc3RWaWV3IH0gZnJvbSBcIi4uLy4uLy4uL2VuYy9zcmMvdWkvbGF5b3V0Q29udHJvbHMvbGlzdFZpZXdcIjtcbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2J1dHRvblwiO1xuaW1wb3J0IHsgQ29udHJvbCB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2NvbnRyb2xcIjtcbmltcG9ydCB7IEFwcCB9IGZyb20gXCIuLi8uLi9hcHBcIjtcbmltcG9ydCB7IEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2VuYy9zcmMvdWkvYWxpZ25lbWVudC9ob3Jpem9udGFsQWxpZ25lbWVudE9wdGlvblwiO1xuaW1wb3J0IHsgVmVydGljYWxBbGlnbmVtZW50T3B0aW9uIH0gZnJvbSBcIi4uLy4uLy4uL2VuYy9zcmMvdWkvYWxpZ25lbWVudC92ZXJ0aWNhbEFsaWduZW1lbnRPcHRpb25cIjtcbmltcG9ydCB7IFNsaWRlciB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2NvbnRyb2xzL3NsaWRlclwiO1xuaW1wb3J0IHsgUmFuZ2VTbGlkZXIgfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9jb250cm9scy9yYW5nZVNsaWRlclwiO1xuXG5leHBvcnQgY2xhc3MgU3RhckxheWVyVmlldyBleHRlbmRzIExheW91dFZpZXcge1xuICAgIHByaXZhdGUgc2V0dGluZ3NMaXN0OiBMaXN0VmlldztcblxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBzdGFyTGF5ZXI6IFN0YXJMYXllcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdCA9IG5ldyBMaXN0VmlldygpO1xuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5hbGlnbmVtZW50Lmhvcml6b250YWxBbGlnbiA9IEhvcml6b250YWxBbGlnbmVtZW50T3B0aW9uLkxlZnQ7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0LmFsaWduZW1lbnQudmVydGljYWxBbGlnbiA9IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbi5Ub3A7XG4gICAgICAgIHZhciBidG5Gb3JMYXllciA9IG5ldyBCdXR0b24oKTtcbiAgICAgICAgYnRuRm9yTGF5ZXIudGV4dCA9IFwiUmVtb3ZlIExheWVyXCI7XG4gICAgICAgIGJ0bkZvckxheWVyLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5hZGRJdGVtKGJ0bkZvckxheWVyKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGJ0bkZvckxheWVyKTtcbiAgICAgICAgYnRuRm9yTGF5ZXIuY2xpY2tlZC5hZGRFdmVudExpc3RlbmVyKChzZW5kZXI6IENvbnRyb2wpID0+IHtcbiAgICAgICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci5yZW1vdmVTdGFyTGF5ZXIodGhpcy5zdGFyTGF5ZXIpO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXIgc2xpZGVyID0gbmV3IFNsaWRlcigpO1xuICAgICAgICBzbGlkZXIubWluVmFsdWUgPSAxMDtcbiAgICAgICAgc2xpZGVyLm1heFZhbHVlID0gMTAwMDtcbiAgICAgICAgc2xpZGVyLmN1cnJlbnRWYWx1ZSA9IHN0YXJMYXllci5zdGFycy5sZW5ndGg7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChzbGlkZXIpO1xuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5hZGRJdGVtKHNsaWRlcik7XG4gICAgICAgIHNsaWRlci52YWx1ZUNoYW5nZWQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm51bWJlck9mU3RhcnNDaGFuZ2VkKTtcblxuICAgICAgICB2YXIgc2xpZGVyU3BlZWQgPSBuZXcgU2xpZGVyKCk7XG4gICAgICAgIHNsaWRlclNwZWVkLm1pblZhbHVlID0gMDtcbiAgICAgICAgc2xpZGVyU3BlZWQubWF4VmFsdWUgPSAzMDtcbiAgICAgICAgc2xpZGVyU3BlZWQuY3VycmVudFZhbHVlID0gc3RhckxheWVyLnNwZWVkO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goc2xpZGVyU3BlZWQpO1xuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5hZGRJdGVtKHNsaWRlclNwZWVkKTtcbiAgICAgICAgc2xpZGVyU3BlZWQudmFsdWVDaGFuZ2VkLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5zcGVlZENoYW5nZWQpO1xuXG4gICAgICAgIHZhciBzbGlkZXJTaXplID0gbmV3IFJhbmdlU2xpZGVyKCk7XG4gICAgICAgIHZhciBzaXplcyA9IHRoaXMuc3RhckxheWVyLnN0YXJzLm1hcCh4ID0+IHgucik7XG4gICAgICAgIHNsaWRlclNpemUubWluVmFsdWUgPSAwLjAxO1xuICAgICAgICBzbGlkZXJTaXplLm1heFZhbHVlID0gNTtcbiAgICAgICAgc2xpZGVyU2l6ZS5jdXJyZW50VmFsdWVMb3cgPSBNYXRoLm1pbiguLi5zaXplcyk7XG4gICAgICAgIHNsaWRlclNpemUuY3VycmVudFZhbHVlSGlnaCA9IE1hdGgubWF4KC4uLnNpemVzKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHNsaWRlclNpemUpO1xuICAgICAgICB0aGlzLnNldHRpbmdzTGlzdC5hZGRJdGVtKHNsaWRlclNpemUpO1xuICAgICAgICBzbGlkZXJTaXplLnZhbHVlc0NoYW5nZWQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnNpemVzQ2hhbmdlZCk7XG4gICAgfVxuXG4gICAgcHVibGljIG51bWJlck9mU3RhcnNDaGFuZ2VkID0gKG51bWJlck9mU3RhcnM6IG51bWJlcikgPT4ge1xuICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIuY2hhbmdlTnVtYmVyT2ZTdGFycyh0aGlzLnN0YXJMYXllciwgTWF0aC5yb3VuZChudW1iZXJPZlN0YXJzKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHNwZWVkQ2hhbmdlZCA9IChzcGVlZDogbnVtYmVyKSA9PiB7XG4gICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci5jaGFuZ2VTcGVlZCh0aGlzLnN0YXJMYXllciwgc3BlZWQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzaXplc0NoYW5nZWQgPSAobG93Qm9yZGVyOiBudW1iZXIsIGhpZ2hCb3JkZXI6IG51bWJlcikgPT4ge1xuICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIuY2hhbmdlU2l6ZXModGhpcy5zdGFyTGF5ZXIsIGxvd0JvcmRlciwgaGlnaEJvcmRlcik7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QudXBkYXRlTGF5b3V0KGN0eCwgbmV3IFJlY3RhbmdsZShib3VuZHMueCwgYm91bmRzLnksIDAsIDApKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgTGF5b3V0VmlldyB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xheW91dFZpZXdcIjtcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xuaW1wb3J0IHsgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsIH0gZnJvbSBcIi4vc2V0dGluZ3NPdmVybGF5Vmlld01vZGVsXCI7XG5pbXBvcnQgeyBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZSB9IGZyb20gXCIuL3NldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlXCI7XG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9jb250cm9scy9idXR0b25cIjtcbmltcG9ydCB7IENvbnRyb2wgfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9jb250cm9scy9jb250cm9sXCI7XG5pbXBvcnQgeyBMaXN0VmlldyB9IGZyb20gXCIuLi8uLi8uLi9lbmMvc3JjL3VpL2xheW91dENvbnRyb2xzL2xpc3RWaWV3XCI7XG5pbXBvcnQgeyBTdGFyTGF5ZXIgfSBmcm9tIFwiLi4vLi4vbW9kZWxzL3N0YXJMYXllclwiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uLy4uL2FwcFwiO1xuaW1wb3J0IHsgU2V0dGluZ09wZXJhdGlvbiB9IGZyb20gXCIuLi8uLi9zZXR0aW5ncy9zZXR0aW5nT3BlcmF0aW9uXCI7XG5pbXBvcnQgeyBWZXJ0aWNhbEFsaWduZW1lbnRPcHRpb24gfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9hbGlnbmVtZW50L3ZlcnRpY2FsQWxpZ25lbWVudE9wdGlvblwiO1xuaW1wb3J0IHsgSG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb24gfSBmcm9tIFwiLi4vLi4vLi4vZW5jL3NyYy91aS9hbGlnbmVtZW50L2hvcml6b250YWxBbGlnbmVtZW50T3B0aW9uXCI7XG5pbXBvcnQgeyBTdGFyTGF5ZXJWaWV3IH0gZnJvbSBcIi4vc3RhckxheWVyVmlld1wiO1xuXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NPdmVybGF5VmlldyBleHRlbmRzIExheW91dFZpZXcge1xuICAgIHByaXZhdGUgdmlld01vZGVsOiBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWwgPSBuZXcgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsKCk7XG4gICAgcHJpdmF0ZSBsYXN0TW92ZWQgPSBEYXRlLm5vdygpO1xuICAgIHByaXZhdGUgaW5hY3Rpdml0eVRpbWVvdXQgPSAyMDAwO1xuICAgIHByaXZhdGUgc2hvd092ZXJMYXllckJ1dHRvbjogQnV0dG9uO1xuICAgIHByaXZhdGUgc2V0dGluZ3NMaXN0OiBMaXN0VmlldztcblxuICAgIHByaXZhdGUgbGF5ZXJCdXR0b25zOiBCdXR0b25bXSA9IFtdO1xuICAgIHByaXZhdGUgYWRkTGF5ZXJCdG46IEJ1dHRvbjtcbiAgICBwcml2YXRlIGRldGFpbGVkU3RhckxheWVyVmlldzogU3RhckxheWVyVmlldztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24gPSBuZXcgQnV0dG9uKCk7XG4gICAgICAgIHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbi50ZXh0ID0gXCJTaG93L0hpZGUgU2V0dGluZ3NcIjtcbiAgICAgICAgdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJncmVlblwiO1xuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24uYWxpZ25lbWVudC52ZXJ0aWNhbEFsaWduID0gVmVydGljYWxBbGlnbmVtZW50T3B0aW9uLlRvcDtcbiAgICAgICAgdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uLmFsaWduZW1lbnQuaG9yaXpvbnRhbEFsaWduID0gSG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb24uTGVmdDtcbiAgICAgICAgdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uLmNsaWNrZWQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnNob3dIaWRlT3ZlcmxheUNsaWNrZWQpO1xuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24ucHJvcGVydGllcy5iYWNrZ3JvdW5kRmlsbFN0eWxlID0gXCJyZ2JhKDAsIDAsIDAsIDAuNSlcIjtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuc2hvd092ZXJMYXllckJ1dHRvbik7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0ID0gbmV3IExpc3RWaWV3KCk7XG4gICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0LmFsaWduZW1lbnQuaG9yaXpvbnRhbEFsaWduID0gSG9yaXpvbnRhbEFsaWduZW1lbnRPcHRpb24uTGVmdDtcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWxpZ25lbWVudC52ZXJ0aWNhbEFsaWduID0gVmVydGljYWxBbGlnbmVtZW50T3B0aW9uLlRvcDtcblxuICAgICAgICB2YXIgYnRuRm9yTmV3TGF5ZXIgPSBuZXcgQnV0dG9uKCk7XG4gICAgICAgIGJ0bkZvck5ld0xheWVyLnRleHQgPSBcIkFkZCBMYXllclwiO1xuICAgICAgICBidG5Gb3JOZXdMYXllci5wcm9wZXJ0aWVzLmZpbGxTdHlsZSA9IFwid2hpdGVcIjtcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWRkSXRlbShidG5Gb3JOZXdMYXllcik7XG4gICAgICAgIGJ0bkZvck5ld0xheWVyLmNsaWNrZWQuYWRkRXZlbnRMaXN0ZW5lcigoc2VuZGVyOiBDb250cm9sKSA9PiB7XG4gICAgICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIuYWRkU3RhckxheWVyKCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmFkZExheWVyQnRuID0gYnRuRm9yTmV3TGF5ZXI7XG5cblxuICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIudXBkYXRlLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5zZXR0aW5nc1VwZGF0ZWQpO1xuXG5cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHRpbmdzVXBkYXRlZCA9IChvcGVyYXRpb246IFNldHRpbmdPcGVyYXRpb24pID0+IHtcbiAgICAgICAgc3dpdGNoIChvcGVyYXRpb24pIHtcbiAgICAgICAgICAgIGNhc2UgU2V0dGluZ09wZXJhdGlvbi5BZGRTdGFyTGF5ZXI6XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBzdGFyTGF5ZXIgb2YgQXBwLnNldHRpbmdzLnN0YXJMYXllcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmxheWVyQnV0dG9ucy5tYXAoeCA9PiB4LnRhZykuY29udGFpbnMoc3RhckxheWVyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QucmVtb3ZlSXRlbSh0aGlzLmFkZExheWVyQnRuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidG5Gb3JMYXllciA9IG5ldyBCdXR0b24oKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkZvckxheWVyLnRleHQgPSBcIkVkaXQgTGF5ZXJcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkZvckxheWVyLnRhZyA9IHN0YXJMYXllcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkZvckxheWVyLnByb3BlcnRpZXMuZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWRkSXRlbShidG5Gb3JMYXllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxheWVyQnV0dG9ucy5wdXNoKGJ0bkZvckxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bkZvckxheWVyLmNsaWNrZWQuYWRkRXZlbnRMaXN0ZW5lcigoc2VuZGVyOiBDb250cm9sKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVTaG93SGlkZVN0YXJMYXllclZpZXcoc3RhckxheWVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QuYWRkSXRlbSh0aGlzLmFkZExheWVyQnRuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTZXR0aW5nT3BlcmF0aW9uLlJlbW92ZVN0YXJMYXllcjpcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHNldHRpbmdzTGF5ZXIgb2YgdGhpcy5sYXllckJ1dHRvbnMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcHAuc2V0dGluZ3Muc3RhckxheWVycy5jb250YWlucyhzZXR0aW5nc0xheWVyLnRhZykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0dGluZ3NMaXN0LnJlbW92ZUl0ZW0oc2V0dGluZ3NMYXllcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxheWVyQnV0dG9ucy5yZW1vdmVJdGVtKHNldHRpbmdzTGF5ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmVJdGVtKHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3KTtcbiAgICAgICAgICAgICAgICB0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldyA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcml2YXRlIHRvZ2dsZVNob3dIaWRlU3RhckxheWVyVmlldyA9IChzdGFyTGF5ZXI6IFN0YXJMYXllcikgPT4ge1xuICAgICAgICBpZiAoIXRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3KSB7XG4gICAgICAgICAgICB2YXIgdmlldyA9IG5ldyBTdGFyTGF5ZXJWaWV3KHN0YXJMYXllcik7XG4gICAgICAgICAgICB0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldyA9IHZpZXc7XG4gICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcpO1xuICAgICAgICAgICAgdGhpcy50cmlnZ2VyVXBkYXRlTGF5b3V0KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcuc3RhckxheWVyICE9IHN0YXJMYXllcikge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmVJdGVtKHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3KTtcbiAgICAgICAgICAgIHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgdmFyIHZpZXcgPSBuZXcgU3RhckxheWVyVmlldyhzdGFyTGF5ZXIpO1xuICAgICAgICAgICAgdGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcgPSB2aWV3O1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3KTtcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5yZW1vdmVJdGVtKHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3KTtcbiAgICAgICAgICAgIHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzaG93SGlkZU92ZXJsYXlDbGlja2VkID0gKHNlbmRlcjogQ29udHJvbCkgPT4ge1xuICAgICAgICBpZiAodGhpcy52aWV3TW9kZWwuc3RhdGUgPT0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUudmlzaWJsZSkge1xuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZShTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5iZWZvcmVWaXNpYmxlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUudmlzaWJsZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSk6IHZvaWQge1xuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xuICAgICAgICB0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24udXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcbiAgICAgICAgdmFyIHNwYWNlID0gdGhpcy5zaG93T3ZlckxheWVyQnV0dG9uLmRpbWVuc2lvbnMuaGVpZ2h0ICogMjtcbiAgICAgICAgdGhpcy5zZXR0aW5nc0xpc3QudXBkYXRlTGF5b3V0KGN0eCwgbmV3IFJlY3RhbmdsZShib3VuZHMueCwgYm91bmRzLnkgKyBzcGFjZSwgYm91bmRzLndpZHRoLCBib3VuZHMuaGVpZ2h0IC0gc3BhY2UpKTtcbiAgICAgICAgaWYgKHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3KSB7XG4gICAgICAgICAgICB0aGlzLmRldGFpbGVkU3RhckxheWVyVmlldy51cGRhdGVMYXlvdXQoY3R4LCBuZXcgUmVjdGFuZ2xlKGJvdW5kcy54ICsgdGhpcy5zZXR0aW5nc0xpc3QuZGltZW5zaW9ucy53aWR0aCwgYm91bmRzLnkgKyBzcGFjZSwgYm91bmRzLndpZHRoLCBib3VuZHMuaGVpZ2h0IC0gc3BhY2UpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBtb3VzZU1vdmUgPSAoZXY6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmhpZGRlbiB8fCB0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9PSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5iZWZvcmVWaXNpYmxlKSB7XG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGUpO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyLm1vdXNlTW92ZShldik7XG4gICAgfVxuXG4gICAgcHVibGljIG1vdXNlSW5hY3Rpdml0eUhhbmRsZXIgPSAoKSA9PiB7XG4gICAgICAgIGlmIChEYXRlLm5vdygpIC0gdGhpcy5sYXN0TW92ZWQgPj0gdGhpcy5pbmFjdGl2aXR5VGltZW91dCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmJlZm9yZVZpc2libGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLmhpZGRlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHRoaXMubW91c2VJbmFjdGl2aXR5SGFuZGxlciwgdGhpcy5pbmFjdGl2aXR5VGltZW91dCAtIChEYXRlLm5vdygpIC0gdGhpcy5sYXN0TW92ZWQpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2V0U3RhdGUgPSAoc3RhdGU6IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlKSA9PiB7XG4gICAgICAgIHN3aXRjaCAoc3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuOlxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlSXRlbSh0aGlzLnNob3dPdmVyTGF5ZXJCdXR0b24pO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld01vZGVsLnN0YXRlID0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTZXR0aW5nc092ZXJsYXlWaWV3TW9kZWxTdGF0ZS5iZWZvcmVWaXNpYmxlOlxuICAgICAgICAgICAgICAgIHRoaXMubGFzdE1vdmVkID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3TW9kZWwuc3RhdGUgPT0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuaGlkZGVuKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQodGhpcy5tb3VzZUluYWN0aXZpdHlIYW5kbGVyLCB0aGlzLmluYWN0aXZpdHlUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGRJdGVtSWZOb3RFeGlzdHModGhpcy5zaG93T3ZlckxheWVyQnV0dG9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlld01vZGVsLnN0YXRlID09IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLnZpc2libGUpIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCh0aGlzLm1vdXNlSW5hY3Rpdml0eUhhbmRsZXIsIHRoaXMuaW5hY3Rpdml0eVRpbWVvdXQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnJlbW92ZUl0ZW1JZkV4aXN0cyh0aGlzLnNldHRpbmdzTGlzdCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlSXRlbUlmRXhpc3RzKHRoaXMuZGV0YWlsZWRTdGFyTGF5ZXJWaWV3KTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRhaWxlZFN0YXJMYXllclZpZXcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMudmlld01vZGVsLnN0YXRlID0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuYmVmb3JlVmlzaWJsZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUudmlzaWJsZTpcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aWV3TW9kZWwuc3RhdGUgPT0gU2V0dGluZ3NPdmVybGF5Vmlld01vZGVsU3RhdGUuYmVmb3JlVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2godGhpcy5zZXR0aW5nc0xpc3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbC5zdGF0ZSA9IFNldHRpbmdzT3ZlcmxheVZpZXdNb2RlbFN0YXRlLnZpc2libGU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcFwiO1xuaW1wb3J0IHsgU3RhckxheWVyIH0gZnJvbSBcIi4uL21vZGVscy9zdGFyTGF5ZXJcIjtcblxuZXhwb3J0IGNsYXNzIFN0YXJMYXllckFuaW1hdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgc3RhckxheWVyOiBTdGFyTGF5ZXIpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlID0gKHRpbWVEaWZmOiBudW1iZXIpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBzdGFyIG9mIHRoaXMuc3RhckxheWVyLnN0YXJzKSB7XG4gICAgICAgICAgICBzdGFyLnggKz0gdGhpcy5zdGFyTGF5ZXIuc3BlZWQgKiB0aW1lRGlmZjtcbiAgICAgICAgICAgIHN0YXIueSArPSB0aGlzLnN0YXJMYXllci5zcGVlZCAqIHRpbWVEaWZmO1xuICAgICAgICAgICAgaWYgKHN0YXIueCA+IEFwcC5zZXR0aW5ncy53aWR0aCkge1xuICAgICAgICAgICAgICAgIHN0YXIueCAtPSBBcHAuc2V0dGluZ3Mud2lkdGg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3Rhci55ID4gQXBwLnNldHRpbmdzLmhlaWdodCkge1xuICAgICAgICAgICAgICAgIHN0YXIueSAtPSBBcHAuc2V0dGluZ3MuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImV4cG9ydCBjbGFzcyBEaW5qZWN0IHtcbiAgICBwcml2YXRlIHN0YXRpYyBpbnN0YW5jZXM6IHsgW2tleTogc3RyaW5nXTogYW55IH0gPSB7fVxuXG4gICAgcHVibGljIHN0YXRpYyBhZGRJbnN0YW5jZSA9IChuYW1lOiBzdHJpbmcsIGluc3RhbmNlOiBhbnkpID0+IHtcbiAgICAgICAgRGluamVjdC5pbnN0YW5jZXNbbmFtZV0gPSBpbnN0YW5jZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlID0gPFQ+KG5hbWU6IHN0cmluZyk6IFQgPT4ge1xuICAgICAgICByZXR1cm4gPFQ+RGluamVjdC5pbnN0YW5jZXNbbmFtZV07XG4gICAgfVxufSIsImltcG9ydCB7IExheW91dFZpZXcgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9sYXlvdXRWaWV3XCI7XG5cbmltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2J1dHRvblwiO1xuaW1wb3J0IHsgVmVydGljYWxBbGlnbmVtZW50T3B0aW9uIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvYWxpZ25lbWVudC92ZXJ0aWNhbEFsaWduZW1lbnRPcHRpb25cIjtcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xuaW1wb3J0IHsgTGlzdFZpZXcgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9saXN0Vmlld1wiO1xuaW1wb3J0IHsgT3JpZW50YXRpb24gfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9hbGlnbmVtZW50L29yaWVudGF0aW9uXCI7XG5pbXBvcnQgeyBEaW5qZWN0IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZGluamVjdFwiO1xuaW1wb3J0IHsgQXVkaW9NYW5hZ2VyIH0gZnJvbSBcIi4uL2F1ZGlvTWFuYWdlclwiO1xuXG5leHBvcnQgY2xhc3MgUGxheWVyVmlldyBleHRlbmRzIExheW91dFZpZXcge1xuXG4gICAgcHJpdmF0ZSBwbGF5SWNvblRleHQgPSBcIlxcdWYwNGJcIlxuICAgIHByaXZhdGUgcGF1c2VJY29uVGV4dCA9IFwiXFx1ZjA0Y1wiXG4gICAgcHJpdmF0ZSBzdG9wSWNvblRleHQgPSBcIlxcdWYwNGRcIlxuICAgIHByaXZhdGUgbmV4dEljb25UZXh0ID0gXCJcXHVmMDUxXCJcbiAgICBwcml2YXRlIHByZXZpb3VzSWNvblRleHQgPSBcIlxcdWYwNDhcIlxuXG4gICAgLy8gcHJpdmF0ZSBwbGF5SWNvblRleHQgPSBcInBsYXlcIlxuICAgIC8vIHByaXZhdGUgcGF1c2VJY29uVGV4dCA9IFwicGF1c2VcIlxuICAgIC8vIHByaXZhdGUgc3RvcEljb25UZXh0ID0gXCJzdG9wXCJcbiAgICAvLyBwcml2YXRlIG5leHRJY29uVGV4dCA9IFwibmV4dFwiXG4gICAgLy8gcHJpdmF0ZSBwcmV2aW91c0ljb25UZXh0ID0gXCJwcmV2aW91c1wiXG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB2YXIgYXVkaW9NYW5hZ2VyOiBBdWRpb01hbmFnZXIgPSBEaW5qZWN0LmdldEluc3RhbmNlKFwiYXVkaW9cIik7XG5cbiAgICAgICAgdmFyIGxpc3RWaWV3ID0gbmV3IExpc3RWaWV3KCk7XG4gICAgICAgIGxpc3RWaWV3LmFsaWduZW1lbnQudmVydGljYWxBbGlnbiA9IFZlcnRpY2FsQWxpZ25lbWVudE9wdGlvbi5Cb3R0b207XG4gICAgICAgIGxpc3RWaWV3LmFsaWduZW1lbnQubWFyZ2luLmJvdHRvbSA9IDEwO1xuICAgICAgICBsaXN0Vmlldy5wcm9wZXJ0aWVzLm9yaWVudGF0aW9uID0gT3JpZW50YXRpb24uSG9yaXpvbnRhbDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGxpc3RWaWV3KTtcblxuICAgICAgICB2YXIgcGxheVBhdXNlQnRuID0gbmV3IEJ1dHRvbigpO1xuICAgICAgICBwbGF5UGF1c2VCdG4ucHJvcGVydGllcy5mb250UHJlZml4ID0gXCI5MDBcIlxuICAgICAgICBwbGF5UGF1c2VCdG4ucHJvcGVydGllcy5mb250RmFtaWx5ID0gXCInRm9udCBBd2Vzb21lIDUgRnJlZSdcIlxuICAgICAgICBwbGF5UGF1c2VCdG4udGV4dCA9IHRoaXMucGxheUljb25UZXh0O1xuICAgICAgICBwbGF5UGF1c2VCdG4uY2xpY2tlZC5hZGRFdmVudExpc3RlbmVyKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChwbGF5UGF1c2VCdG4udGV4dCA9PSB0aGlzLnBsYXlJY29uVGV4dCkge1xuICAgICAgICAgICAgICAgIGF1ZGlvTWFuYWdlci5wbGF5KCk7XG4gICAgICAgICAgICAgICAgcGxheVBhdXNlQnRuLnRleHQgPSB0aGlzLnBhdXNlSWNvblRleHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGF1ZGlvTWFuYWdlci5wYXVzZSgpO1xuICAgICAgICAgICAgICAgIHBsYXlQYXVzZUJ0bi50ZXh0ID0gdGhpcy5wbGF5SWNvblRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpc3RWaWV3LmFkZEl0ZW0ocGxheVBhdXNlQnRuKTtcblxuICAgICAgICB2YXIgc3RvcEJ0biA9IG5ldyBCdXR0b24oKTtcbiAgICAgICAgc3RvcEJ0bi5wcm9wZXJ0aWVzLmZvbnRQcmVmaXggPSBcIjkwMFwiXG4gICAgICAgIHN0b3BCdG4ucHJvcGVydGllcy5mb250RmFtaWx5ID0gXCInRm9udCBBd2Vzb21lIDUgRnJlZSdcIlxuICAgICAgICBzdG9wQnRuLnRleHQgPSB0aGlzLnN0b3BJY29uVGV4dDtcbiAgICAgICAgc3RvcEJ0bi5jbGlja2VkLmFkZEV2ZW50TGlzdGVuZXIoKCkgPT4ge1xuICAgICAgICAgICAgYXVkaW9NYW5hZ2VyLnN0b3AoKTtcbiAgICAgICAgICAgIGlmIChwbGF5UGF1c2VCdG4udGV4dCA9PSB0aGlzLnBhdXNlSWNvblRleHQpIHtcbiAgICAgICAgICAgICAgICBwbGF5UGF1c2VCdG4udGV4dCA9IHRoaXMucGxheUljb25UZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyVXBkYXRlTGF5b3V0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICBsaXN0Vmlldy5hZGRJdGVtKHN0b3BCdG4pO1xuXG4gICAgICAgIHZhciBwcmV2aW91c0J0biA9IG5ldyBCdXR0b24oKTtcbiAgICAgICAgcHJldmlvdXNCdG4ucHJvcGVydGllcy5mb250UHJlZml4ID0gXCI5MDBcIlxuICAgICAgICBwcmV2aW91c0J0bi5wcm9wZXJ0aWVzLmZvbnRGYW1pbHkgPSBcIidGb250IEF3ZXNvbWUgNSBGcmVlJ1wiXG4gICAgICAgIHByZXZpb3VzQnRuLnRleHQgPSB0aGlzLnByZXZpb3VzSWNvblRleHQ7XG4gICAgICAgIHByZXZpb3VzQnRuLmNsaWNrZWQuYWRkRXZlbnRMaXN0ZW5lcigoKSA9PiB7XG4gICAgICAgICAgICBhdWRpb01hbmFnZXIucHJldmlvdXMoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGxpc3RWaWV3LmFkZEl0ZW0ocHJldmlvdXNCdG4pO1xuXG4gICAgICAgIHZhciBuZXh0QnRuID0gbmV3IEJ1dHRvbigpO1xuICAgICAgICBuZXh0QnRuLnByb3BlcnRpZXMuZm9udFByZWZpeCA9IFwiOTAwXCJcbiAgICAgICAgbmV4dEJ0bi5wcm9wZXJ0aWVzLmZvbnRGYW1pbHkgPSBcIidGb250IEF3ZXNvbWUgNSBGcmVlJ1wiXG4gICAgICAgIG5leHRCdG4udGV4dCA9IHRoaXMubmV4dEljb25UZXh0O1xuICAgICAgICBuZXh0QnRuLmNsaWNrZWQuYWRkRXZlbnRMaXN0ZW5lcigoKSA9PiB7XG4gICAgICAgICAgICBhdWRpb01hbmFnZXIubmV4dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgbGlzdFZpZXcuYWRkSXRlbShuZXh0QnRuKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgdXBkYXRlTGF5b3V0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBib3VuZHM6IFJlY3RhbmdsZSkge1xuICAgICAgICBzdXBlci51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xuICAgICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIHRoaXMuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGNoaWxkLnVwZGF0ZUxheW91dChjdHgsIHRoaXMuYm91bmRzKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBJbWFnZVNjYWxpbmdNb2RlIH0gZnJvbSBcIi4vaW1hZ2VTY2FsaW5nTW9kZVwiO1xuXG5leHBvcnQgY2xhc3MgSW1hZ2VQcm9wZXJ0aWVzIHtcbiAgICBwdWJsaWMgaW1hZ2VTY2FsaW5nTW9kZSA9IEltYWdlU2NhbGluZ01vZGUuRml0QW5kU3BhY2U7XG4gICAgcHVibGljIHNjYWxlID0gMTtcbn0iLCJpbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgeyBDb250cm9sIH0gZnJvbSBcIi4vY29udHJvbFwiO1xuaW1wb3J0IHsgSW1hZ2VQcm9wZXJ0aWVzIH0gZnJvbSBcIi4vaW1hZ2VQcm9wZXJ0aWVzXCI7XG5pbXBvcnQgeyBJbWFnZVNjYWxpbmdNb2RlIH0gZnJvbSBcIi4vaW1hZ2VTY2FsaW5nTW9kZVwiO1xuXG5leHBvcnQgY2xhc3MgRUltYWdlIGV4dGVuZHMgQ29udHJvbCB7XG4gICAgcHJpdmF0ZSBpbWFnZTogSFRNTEltYWdlRWxlbWVudDtcbiAgICBwdWJsaWMgcHJvcGVydGllcyA9IG5ldyBJbWFnZVByb3BlcnRpZXMoKTtcblxuICAgIGNvbnN0cnVjdG9yKGltYWdlOiBIVE1MSW1hZ2VFbGVtZW50KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21VcmwgPSAoaW1hZ2VVcmw6IHN0cmluZyk6IFByb21pc2U8RUltYWdlPiA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB2YXIgaW1hZ2UgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgICAgIGltYWdlLnNyYyA9IGltYWdlVXJsO1xuICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlc29sdmUobmV3IEVJbWFnZShpbWFnZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVuZGVyID0gKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEKSA9PiB7XG4gICAgICAgIHN1cGVyLnJlbmRlcihjdHgpO1xuXG4gICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgdGhpcy5kaW1lbnNpb25zLngsIHRoaXMuZGltZW5zaW9ucy55LCB0aGlzLmRpbWVuc2lvbnMud2lkdGgsIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQpO1xuICAgICAgICBpZiAodGhpcy5pc01vdXNlT3ZlciAmJiB0aGlzLmlzRW5hYmxlZCkge1xuICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwicmdiYSgyNTUsMjU1LDI1NSwwLjUpXCI7XG4gICAgICAgICAgICBjdHguZmlsbFJlY3QodGhpcy5kaW1lbnNpb25zLngsIHRoaXMuZGltZW5zaW9ucy55LCB0aGlzLmRpbWVuc2lvbnMud2lkdGgsIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcblxuICAgICAgICB2YXIgZml0U2NhbGUgPSAxO1xuXG4gICAgICAgIHZhciBpbWFnZVNpemluZyA9IHRoaXMuaW1hZ2UubmF0dXJhbFdpZHRoIC8gdGhpcy5pbWFnZS5uYXR1cmFsSGVpZ2h0O1xuICAgICAgICB2YXIgc3RhZ2VTaXppbmcgPSBib3VuZHMud2lkdGggLyBib3VuZHMuaGVpZ2h0O1xuXG4gICAgICAgIHZhciBpc0ltYWdlV2lkZXIgPSBpbWFnZVNpemluZyA+IHN0YWdlU2l6aW5nO1xuXG4gICAgICAgIHN3aXRjaCAodGhpcy5wcm9wZXJ0aWVzLmltYWdlU2NhbGluZ01vZGUpIHtcbiAgICAgICAgICAgIGNhc2UgSW1hZ2VTY2FsaW5nTW9kZS5GaXRBbmRPdmVyZmlsbDpcbiAgICAgICAgICAgICAgICBpZiAoaXNJbWFnZVdpZGVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpdFNjYWxlID0gYm91bmRzLmhlaWdodCAvIHRoaXMuaW1hZ2UuaGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZpdFNjYWxlID0gYm91bmRzLndpZHRoIC8gdGhpcy5pbWFnZS53aWR0aDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIEltYWdlU2NhbGluZ01vZGUuRml0QW5kU3BhY2U6XG4gICAgICAgICAgICAgICAgaWYgKGlzSW1hZ2VXaWRlcikge1xuICAgICAgICAgICAgICAgICAgICBmaXRTY2FsZSA9IGJvdW5kcy53aWR0aCAvIHRoaXMuaW1hZ2Uud2lkdGg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZml0U2NhbGUgPSBib3VuZHMuaGVpZ2h0IC8gdGhpcy5pbWFnZS5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHdpZHRoID0gdGhpcy5pbWFnZS5uYXR1cmFsV2lkdGggKiBmaXRTY2FsZTtcbiAgICAgICAgdmFyIGhlaWdodCA9IHRoaXMuaW1hZ2UubmF0dXJhbEhlaWdodCAqIGZpdFNjYWxlO1xuXG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy54ID0gdGhpcy5hbGlnbmVtZW50LmNhbGN1bGF0ZURpbWVuc2lvbnNYKGJvdW5kcywgd2lkdGgpO1xuICAgICAgICB0aGlzLmRpbWVuc2lvbnMueSA9IHRoaXMuYWxpZ25lbWVudC5jYWxjdWxhdGVEaW1lbnNpb25zWShib3VuZHMsIHdpZHRoKTtcbiAgICAgICAgdGhpcy5kaW1lbnNpb25zLndpZHRoID0gd2lkdGg7XG4gICAgICAgIHRoaXMuZGltZW5zaW9ucy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgfVxufSIsImltcG9ydCB7IExheW91dFZpZXcgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9sYXlvdXRWaWV3XCI7XG5pbXBvcnQgeyBEaW5qZWN0IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZGluamVjdFwiO1xuaW1wb3J0IHsgQXNzZXRNYW5hZ2VyIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvYXNzZXRNYW5hZ2VyXCI7XG5pbXBvcnQgeyBFSW1hZ2UgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9jb250cm9scy9pbWFnZVwiO1xuaW1wb3J0IHsgUmVjdGFuZ2xlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZ2VvbWV0cnkvcmVjdGFuZ2xlXCI7XG5pbXBvcnQgeyBJbWFnZVNjYWxpbmdNb2RlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvaW1hZ2VTY2FsaW5nTW9kZVwiO1xuXG5leHBvcnQgY2xhc3MgQmFja2dyb3VuZEltYWdlVmlldyBleHRlbmRzIExheW91dFZpZXcge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB2YXIgYXNzZXRNYW5hZ2VyID0gRGluamVjdC5nZXRJbnN0YW5jZShcImFzc2V0c1wiKSBhcyBBc3NldE1hbmFnZXI7XG4gICAgICAgIHZhciBiYWNrZ3JvdW5kID0gYXNzZXRNYW5hZ2VyLmdldEltYWdlKFwiYmFja2dyb3VuZFwiKTtcblxuICAgICAgICB2YXIgaW1hZ2UgPSBuZXcgRUltYWdlKGJhY2tncm91bmQpXG4gICAgICAgIGltYWdlLmRpc2FibGVNb3VzZUV2ZW50cygpO1xuICAgICAgICBpbWFnZS5wcm9wZXJ0aWVzLmltYWdlU2NhbGluZ01vZGUgPSBJbWFnZVNjYWxpbmdNb2RlLkZpdEFuZE92ZXJmaWxsO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2goaW1hZ2UpO1xuICAgIH1cblxuICAgIHB1YmxpYyB1cGRhdGVMYXlvdXQoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQsIGJvdW5kczogUmVjdGFuZ2xlKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLnVwZGF0ZUxheW91dChjdHgsIGJvdW5kcyk7XG4gICAgICAgIGZvciAoY29uc3QgY2hpbGQgb2YgdGhpcy5jaGlsZHJlbikge1xuICAgICAgICAgICAgY2hpbGQudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCJpbXBvcnQgeyBMYXlvdXRWaWV3IH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvbGF5b3V0Q29udHJvbHMvbGF5b3V0Vmlld1wiO1xuaW1wb3J0IHsgRGluamVjdCB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2RpbmplY3RcIjtcbmltcG9ydCB7IEFzc2V0TWFuYWdlciB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2Fzc2V0TWFuYWdlclwiO1xuaW1wb3J0IHsgRUltYWdlIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvdWkvY29udHJvbHMvaW1hZ2VcIjtcbmltcG9ydCB7IFJlY3RhbmdsZSB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2dlb21ldHJ5L3JlY3RhbmdsZVwiO1xuaW1wb3J0IHsgSW1hZ2VTY2FsaW5nTW9kZSB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL3VpL2NvbnRyb2xzL2ltYWdlU2NhbGluZ01vZGVcIjtcbmltcG9ydCB7IEVBbmltYXRpb24gfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy9lQW5pbWF0aW9uXCI7XG5pbXBvcnQgeyBBdWRpb01hbmFnZXIgfSBmcm9tIFwiLi4vYXVkaW9NYW5hZ2VyXCI7XG5pbXBvcnQgeyBBdWRpb0dyYXBoTm9kZUFuYWx5c2VyIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvYXVkaW8vYXVkaW9HcmFwaE5vZGVBbmFseXNlclwiO1xuXG5leHBvcnQgY2xhc3MgRnJvbnRWaWV3IGV4dGVuZHMgTGF5b3V0VmlldyB7XG4gICAgYW5hbHlzZXI6IEF1ZGlvR3JhcGhOb2RlQW5hbHlzZXI7XG5cbiAgICBwcml2YXRlIGZyZXF1ZW5jeUluZGV4ID0gNztcbiAgICBwcml2YXRlIGxvd2VyQm9yZGVyID0gMC40O1xuICAgIHByaXZhdGUgdXBwZXJCb3JkZXIgPSAwLjk7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdmFyIGFzc2V0TWFuYWdlciA9IERpbmplY3QuZ2V0SW5zdGFuY2UoXCJhc3NldHNcIikgYXMgQXNzZXRNYW5hZ2VyO1xuXG4gICAgICAgIHZhciBhdWRpb01hbmFnZXIgPSBEaW5qZWN0LmdldEluc3RhbmNlKFwiYXVkaW9cIikgYXMgQXVkaW9NYW5hZ2VyO1xuICAgICAgICB0aGlzLmFuYWx5c2VyID0gYXVkaW9NYW5hZ2VyLmdldEFuYWx5c2VyKCk7XG5cbiAgICAgICAgdmFyIGxvZ28gPSBhc3NldE1hbmFnZXIuZ2V0SW1hZ2UoXCJsb2dvXCIpO1xuICAgICAgICB2YXIgbG9nb05vdmEgPSBhc3NldE1hbmFnZXIuZ2V0SW1hZ2UoXCJsb2dvLW5vdmFcIik7XG5cbiAgICAgICAgdGhpcy5kaXNhYmxlTW91c2VFdmVudHMoKTtcblxuICAgICAgICB2YXIgbG9nb05vdmFFSW1hZ2UgPSBuZXcgRUltYWdlKGxvZ29Ob3ZhKTtcbiAgICAgICAgbG9nb05vdmFFSW1hZ2UucHJvcGVydGllcy5pbWFnZVNjYWxpbmdNb2RlID0gSW1hZ2VTY2FsaW5nTW9kZS5GaXRBbmRPdmVyZmlsbDtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKGxvZ29Ob3ZhRUltYWdlKTtcblxuICAgICAgICB2YXIgZnVuYyA9IGxvZ29Ob3ZhRUltYWdlLnJlbmRlclxuXG4gICAgICAgIGxvZ29Ob3ZhRUltYWdlLnJlbmRlciA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkgPT4ge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSB0aGlzLmFuYWx5c2VyLmdldFNwZWN0cnVtKCk7XG4gICAgICAgICAgICB2YXIgcmVsRGF0YVZhbHVlID0gdGhpcy5jYWxjdWxhdGVSZWxEYXRhVmFsdWUoZGF0YVt0aGlzLmZyZXF1ZW5jeUluZGV4XSk7XG5cbiAgICAgICAgICAgIGN0eC5zYXZlKCk7XG4gICAgICAgICAgICBjdHguZ2xvYmFsQWxwaGEgPSByZWxEYXRhVmFsdWU7XG4gICAgICAgICAgICBmdW5jKGN0eCk7XG4gICAgICAgICAgICBjdHgucmVzdG9yZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvZ29Gcm9udCA9IG5ldyBFSW1hZ2UobG9nbyk7XG4gICAgICAgIGxvZ29Gcm9udC5wcm9wZXJ0aWVzLmltYWdlU2NhbGluZ01vZGUgPSBJbWFnZVNjYWxpbmdNb2RlLkZpdEFuZE92ZXJmaWxsO1xuICAgICAgICB0aGlzLmNoaWxkcmVuLnB1c2gobG9nb0Zyb250KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGNhbGN1bGF0ZVJlbERhdGFWYWx1ZShkYXRhVmFsdWU6IG51bWJlcikge1xuICAgICAgICB2YXIgcmVsRGF0YVZhbHVlID0gZGF0YVZhbHVlIC8gMjU1O1xuICAgICAgICBpZiAocmVsRGF0YVZhbHVlIDwgdGhpcy5sb3dlckJvcmRlcikge1xuICAgICAgICAgICAgcmVsRGF0YVZhbHVlID0gdGhpcy5sb3dlckJvcmRlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocmVsRGF0YVZhbHVlID4gdGhpcy51cHBlckJvcmRlcikge1xuICAgICAgICAgICAgcmVsRGF0YVZhbHVlID0gdGhpcy51cHBlckJvcmRlcjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZmluYWxSZWxEYXRhVmFsdWUgPSAocmVsRGF0YVZhbHVlIC0gdGhpcy5sb3dlckJvcmRlcikgLyAodGhpcy51cHBlckJvcmRlciAtIHRoaXMubG93ZXJCb3JkZXIpO1xuICAgICAgICByZXR1cm4gZmluYWxSZWxEYXRhVmFsdWU7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjaGlsZC51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7IExheW91dFZpZXcgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy91aS9sYXlvdXRDb250cm9scy9sYXlvdXRWaWV3XCI7XG5pbXBvcnQgeyBSZWN0YW5nbGUgfSBmcm9tIFwiLi4vLi4vZW5jL3NyYy9nZW9tZXRyeS9yZWN0YW5nbGVcIjtcbmltcG9ydCB7IFN0YXJMYXllckRyYXdlciB9IGZyb20gXCIuL3N0YXJMYXllckRyYXdlclwiO1xuaW1wb3J0IHsgU2V0dGluZ3NPdmVybGF5VmlldyB9IGZyb20gXCIuL292ZXJsYXkvc2V0dGluZ3NPdmVybGF5Vmlld1wiO1xuaW1wb3J0IHsgQXBwIH0gZnJvbSBcIi4uL2FwcFwiO1xuaW1wb3J0IHsgU3RhckxheWVyQW5pbWF0b3IgfSBmcm9tIFwiLi9zdGFyTGF5ZXJBbmltYXRvclwiO1xuaW1wb3J0IHsgRUFuaW1hdGlvbiB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2VBbmltYXRpb25cIjtcbmltcG9ydCB7IFNldHRpbmdPcGVyYXRpb24gfSBmcm9tIFwiLi4vc2V0dGluZ3Mvc2V0dGluZ09wZXJhdGlvblwiO1xuaW1wb3J0IHsgRGluamVjdCB9IGZyb20gXCIuLi8uLi9lbmMvc3JjL2RpbmplY3RcIjtcbmltcG9ydCB7IFBsYXllclZpZXcgfSBmcm9tIFwiLi9wbGF5ZXJWaWV3XCI7XG5pbXBvcnQgeyBCYWNrZ3JvdW5kSW1hZ2VWaWV3IH0gZnJvbSBcIi4vYmFja2dyb3VuZEltYWdlVmlld1wiO1xuaW1wb3J0IHsgRnJvbnRWaWV3IH0gZnJvbSBcIi4vZnJvbnRWaWV3XCI7XG5cbmV4cG9ydCBjbGFzcyBJbnNwaWVydHlQbGF5ZXJWaWV3IGV4dGVuZHMgTGF5b3V0VmlldyB7XG4gICAgcHJpdmF0ZSBzdGFyTGF5ZXJzOiBTdGFyTGF5ZXJEcmF3ZXJbXSA9IFtdO1xuICAgIHByaXZhdGUgc3RhckFuaW1hdG9yczogU3RhckxheWVyQW5pbWF0b3JbXSA9IFtdO1xuICAgIHByaXZhdGUgc2V0dGluZ3NPdmVybGF5OiBTZXR0aW5nc092ZXJsYXlWaWV3O1xuXG4gICAgcHJpdmF0ZSBhbmltYXRpb246IEVBbmltYXRpb247XG4gICAgcGxheWVyVmlldzogUGxheWVyVmlldztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gRGluamVjdC5nZXRJbnN0YW5jZShcImFuaW1hdGlvblwiKTtcblxuICAgICAgICB0aGlzLnNldHRpbmdzT3ZlcmxheSA9IG5ldyBTZXR0aW5nc092ZXJsYXlWaWV3KCk7XG4gICAgICAgIHRoaXMucGxheWVyVmlldyA9IG5ldyBQbGF5ZXJWaWV3KCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuZXcgQmFja2dyb3VuZEltYWdlVmlldygpKTtcbiAgICAgICAgdGhpcy5jaGlsZHJlbi5wdXNoKHRoaXMucGxheWVyVmlldyk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaCh0aGlzLnNldHRpbmdzT3ZlcmxheSk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4ucHVzaChuZXcgRnJvbnRWaWV3KCkpO1xuICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIudXBkYXRlLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5hcHBTZXR0aW5nc1VwZGF0ZWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgYXBwU2V0dGluZ3NVcGRhdGVkID0gKG9wZXJhdGlvbjogU2V0dGluZ09wZXJhdGlvbikgPT4ge1xuICAgICAgICBzd2l0Y2ggKG9wZXJhdGlvbikge1xuICAgICAgICAgICAgY2FzZSBTZXR0aW5nT3BlcmF0aW9uLkFkZFN0YXJMYXllcjpcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFN0YXJMYXllcigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTZXR0aW5nT3BlcmF0aW9uLlJlbW92ZVN0YXJMYXllcjpcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0YXJMYXllcigpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFN0YXJMYXllciA9ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBzdGFyTGF5ZXIgb2YgQXBwLnNldHRpbmdzLnN0YXJMYXllcnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXJMYXllcnMuZmlyc3RPckRlZmF1bHQoeCA9PiB4LnN0YXJMYXllciA9PSBzdGFyTGF5ZXIpID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGF5ZXIgPSBuZXcgU3RhckxheWVyRHJhd2VyKHN0YXJMYXllcik7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyTGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uc3BsaWNlKDEsIDAsIGxheWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRyaWdnZXJVcGRhdGVMYXlvdXQoKTtcblxuICAgICAgICAgICAgICAgIHZhciBhbmltYXRvciA9IG5ldyBTdGFyTGF5ZXJBbmltYXRvcihzdGFyTGF5ZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5pbWF0aW9uLmFkZFVwZGF0ZUZ1bmN0aW9uKGFuaW1hdG9yLnVwZGF0ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyQW5pbWF0b3JzLnB1c2goYW5pbWF0b3IpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHJlbW92ZVN0YXJMYXllciA9ICgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBzdGFyTGF5ZXJEcmF3cyBvZiB0aGlzLnN0YXJMYXllcnMpIHtcbiAgICAgICAgICAgIGlmIChBcHAuc2V0dGluZ3Muc3RhckxheWVycy5maXJzdE9yRGVmYXVsdCh4ID0+IHggPT0gc3RhckxheWVyRHJhd3Muc3RhckxheWVyKSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGFuaW1hdG9yID0gdGhpcy5zdGFyQW5pbWF0b3JzLmZpcnN0KHggPT4geC5zdGFyTGF5ZXIgPT0gc3RhckxheWVyRHJhd3Muc3RhckxheWVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuaW1hdGlvbi5yZW1vdmVVcGRhdGVGdW5jdGlvbihhbmltYXRvci51cGRhdGUpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RhckFuaW1hdG9ycy5yZW1vdmVJdGVtKGFuaW1hdG9yKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4ucmVtb3ZlKHggPT4geCA9PSBzdGFyTGF5ZXJEcmF3cyk7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFyTGF5ZXJzLnJlbW92ZSh4ID0+IHggPT0gc3RhckxheWVyRHJhd3MpO1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlclVwZGF0ZUxheW91dCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZUxheW91dChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgYm91bmRzOiBSZWN0YW5nbGUpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIudXBkYXRlTGF5b3V0KGN0eCwgYm91bmRzKTtcbiAgICAgICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLmNoaWxkcmVuKSB7XG4gICAgICAgICAgICBjaGlsZC51cGRhdGVMYXlvdXQoY3R4LCBib3VuZHMpO1xuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7IFN0YXIgfSBmcm9tIFwiLi9zdGFyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RhckxheWVyIHtcclxuICAgIHB1YmxpYyBzdGFyczogU3RhcltdID0gW107XHJcbiAgICBwdWJsaWMgc3BlZWQgPSBNYXRoLnJhbmRvbSgpICogMSArIDAuMTtcclxufSIsImV4cG9ydCB0eXBlIFVwZGF0ZUZ1bmN0aW9uID0gKHRpbWVEaWZmOiBudW1iZXIpID0+IHZvaWQ7XG5cbmV4cG9ydCBjbGFzcyBFQW5pbWF0aW9uIHtcbiAgICBwcml2YXRlIHVwZGF0ZUZ1bmN0aW9uczogVXBkYXRlRnVuY3Rpb25bXSA9IFtdO1xuICAgIHByaXZhdGUgaXNSdW5uaW5nID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBsYXN0RnJhbWVUaW1lOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBmcHM6IG51bWJlcjtcbiAgICBwcml2YXRlIGZwc0ludGVydmFsOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc2V0RnBzKDMwKTtcbiAgICAgICAgdGhpcy5wbGF5KCk7XG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSA4MCkgeyAvLyBwXG4gICAgICAgICAgICAgICAgdGhpcy5wbGF5UGF1c2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIHBsYXkoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubGFzdEZyYW1lVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB0aGlzLmFuaW1hdGlvbkxvb3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBwYXVzZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNSdW5uaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHBsYXlQYXVzZSgpIHtcbiAgICAgICAgdGhpcy5pc1J1bm5pbmcgPyB0aGlzLnBhdXNlKCkgOiB0aGlzLnBsYXkoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYWRkVXBkYXRlRnVuY3Rpb24gPSAoZnVuYzogVXBkYXRlRnVuY3Rpb24pID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVGdW5jdGlvbnMucHVzaChmdW5jKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVtb3ZlVXBkYXRlRnVuY3Rpb24gPSAoZnVuYzogVXBkYXRlRnVuY3Rpb24pID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVGdW5jdGlvbnMuc3BsaWNlKHRoaXMudXBkYXRlRnVuY3Rpb25zLmluZGV4T2YoZnVuYyksIDEpO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXRGcHMgPSAoZnBzOiBudW1iZXIpID0+IHtcbiAgICAgICAgdGhpcy5mcHMgPSBmcHM7XG4gICAgICAgIHRoaXMuZnBzSW50ZXJ2YWwgPSAxMDAwIC8gdGhpcy5mcHM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhbmltYXRpb25Mb29wID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmcpIHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkxvb3ApO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIHZhciBlbGFwc2VkID0gbm93IC0gdGhpcy5sYXN0RnJhbWVUaW1lO1xuXG4gICAgICAgIGlmIChlbGFwc2VkID4gdGhpcy5mcHNJbnRlcnZhbCkge1xuICAgICAgICAgICAgdGhpcy5sYXN0RnJhbWVUaW1lID0gbm93O1xuICAgICAgICAgICAgdmFyIHRpbWVEaWZmID0gZWxhcHNlZCAvIDEwMDA7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgdXBkYXRlRnVuY3Rpb24gb2YgdGhpcy51cGRhdGVGdW5jdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB1cGRhdGVGdW5jdGlvbih0aW1lRGlmZik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIENhbnZhc0hlbHBlciB7XG4gICAgcHVibGljIGxvYWRGb250YXdlc29tZUZyZWUgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvYWRGb250KFwiXFx1ZjI0NFwiLCBcIlxcdWYyNDBcIiwgXCI5MDAgMjBweCAnRm9udCBBd2Vzb21lIDUgRnJlZSdcIik7XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWRGb250YXdlc29tZUJyYW5kcyA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9hZEZvbnQoXCJcXHVmM2QzXCIsIFwiXFx1ZjNiOFwiLCBcIjQwMCAyMHB4ICdGb250IEF3ZXNvbWUgNSBCcmFuZHMnXCIpO1xuICAgIH1cblxuICAgIHByaXZhdGUgY291bnRQaXhlbHMgPSAoaW1hZ2VEYXRhOiBJbWFnZURhdGEpID0+IHtcbiAgICAgICAgdmFyIHBpeGVsQ291bnQgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlRGF0YS5kYXRhLmxlbmd0aDsgaSA9IGkgKyA0KSB7XG4gICAgICAgICAgICB2YXIgciA9IGltYWdlRGF0YS5kYXRhW2ldO1xuICAgICAgICAgICAgdmFyIGcgPSBpbWFnZURhdGEuZGF0YVtpICsgMV07XG4gICAgICAgICAgICB2YXIgYiA9IGltYWdlRGF0YS5kYXRhW2kgKyAyXTtcbiAgICAgICAgICAgIHZhciBhID0gaW1hZ2VEYXRhLmRhdGFbaSArIDNdO1xuXG4gICAgICAgICAgICBpZiAociA8IDUwICYmIGcgPCA1MCAmJiBiIDwgNTAgJiYgYSA+IDAuOSkge1xuICAgICAgICAgICAgICAgIHBpeGVsQ291bnQrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGl4ZWxDb3VudFxuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0SWNvblBpeGVscyA9IChjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCwgY2FudmFzOiBIVE1MQ2FudmFzRWxlbWVudCwgaWNvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgIGN0eC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY3R4LmZpbGxUZXh0KGljb24sIDAsIDApO1xuICAgICAgICB2YXIgaW1hZ2VEYXRhID0gY3R4LmdldEltYWdlRGF0YSgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB2YXIgaWNvbjFQaXhlbENvdW50ID0gdGhpcy5jb3VudFBpeGVscyhpbWFnZURhdGEpO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcImljb24gMSBwaXhlbCBjb3VudDogXCIgKyBpY29uMVBpeGVsQ291bnQpO1xuICAgICAgICByZXR1cm4gaWNvbjFQaXhlbENvdW50O1xuICAgIH1cblxuICAgIHByaXZhdGUgbG9hZEZvbnQgPSAoaWNvbjE6IHN0cmluZywgaWNvbjI6IHN0cmluZywgZm9udDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHZhciByZXRyeURlbGF5TXMgPSA1MDA7XG4gICAgICAgIHZhciByZXRyaWVzID0gMTBcblxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJsb2FkaW5nIGZvbnQgXFxcIlwiICsgZm9udCArIFwiXFxcIlwiKTtcblxuICAgICAgICAgICAgdmFyIHRlbXBDYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICAgICAgICAgIHRlbXBDYW52YXMud2lkdGggPSAyMDtcbiAgICAgICAgICAgIHRlbXBDYW52YXMuaGVpZ2h0ID0gMjA7XG4gICAgICAgICAgICB2YXIgdGVtcEN0eCA9IHRlbXBDYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgICAgIHRlbXBDdHguZm9udCA9IGZvbnQ7XG4gICAgICAgICAgICB0ZW1wQ3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgICAgICAgIHRlbXBDdHgudGV4dEFsaWduID0gXCJsZWZ0XCI7XG4gICAgICAgICAgICB0ZW1wQ3R4LnRleHRCYXNlbGluZSA9IFwidG9wXCI7XG5cbiAgICAgICAgICAgIHZhciBjaGVja0xvYWRlZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgaWNvbjFQaXhlbENvdW50ID0gdGhpcy5nZXRJY29uUGl4ZWxzKHRlbXBDdHgsIHRlbXBDYW52YXMsIGljb24xKTtcbiAgICAgICAgICAgICAgICB2YXIgaWNvbjJQaXhlbENvdW50ID0gdGhpcy5nZXRJY29uUGl4ZWxzKHRlbXBDdHgsIHRlbXBDYW52YXMsIGljb24yKTtcblxuICAgICAgICAgICAgICAgIHZhciBkaWZmUGl4ZWxzID0gTWF0aC5hYnMoaWNvbjJQaXhlbENvdW50IC0gaWNvbjFQaXhlbENvdW50KTtcblxuICAgICAgICAgICAgICAgIGlmIChkaWZmUGl4ZWxzID4gNSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRlZCBmb250IFxcXCJcIiArIGZvbnQgKyBcIlxcXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXRyaWVzLS07XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXRyaWVzID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3RvcCBsb2FkaW5nIGZvbnQgYWZ0ZXIgXCIgKyByZXRyaWVzICsgXCIgcmV0cmllcyB3aXRoIFwiICsgcmV0cnlEZWxheU1zICsgXCJtcyBkZWxheVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwid2FpdGluZyBhIHdoaWxlIChcIiArIHJldHJ5RGVsYXlNcyArIFwibXMpXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tMb2FkZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIHJldHJ5RGVsYXlNcyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjaGVja0xvYWRlZCgpO1xuICAgICAgICB9KTtcbiAgICB9XG59IiwiZXhwb3J0IGFic3RyYWN0IGNsYXNzIEF1ZGlvR3JhcGhOb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbmFtZTogc3RyaW5nLCBwcm90ZWN0ZWQgYXVkaW9DdHg6IEF1ZGlvQ29udGV4dCkgeyB9XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0QXVkaW9Ob2RlKCk6IEF1ZGlvTm9kZTtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVsb2FkKCk6IFByb21pc2U8dm9pZD47XG59IiwiaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGUgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZVwiO1xuXG5leHBvcnQgY2xhc3MgQXVkaW9HcmFwaE5vZGVBbmFseXNlciBleHRlbmRzIEF1ZGlvR3JhcGhOb2RlIHtcbiAgICBhbmFseXNlck5vZGU6IEFuYWx5c2VyTm9kZTtcbiAgICBidWZmZXJMZW5ndGg6IG51bWJlcjtcbiAgICBkYXRhQXJyYXk6IFVpbnQ4QXJyYXk7XG5cbiAgICBwdWJsaWMgZ2V0QXVkaW9Ob2RlID0gKCk6IEF1ZGlvTm9kZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmFuYWx5c2VyTm9kZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVsb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLmFuYWx5c2VyTm9kZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYW5hbHlzZXJOb2RlID0gdGhpcy5hdWRpb0N0eC5jcmVhdGVBbmFseXNlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hbmFseXNlck5vZGUuZmZ0U2l6ZSA9IDMyO1xuICAgICAgICAgICAgdGhpcy5hbmFseXNlck5vZGUuc21vb3RoaW5nVGltZUNvbnN0YW50ID0gMC45O1xuICAgICAgICAgICAgdGhpcy5idWZmZXJMZW5ndGggPSB0aGlzLmFuYWx5c2VyTm9kZS5mcmVxdWVuY3lCaW5Db3VudDtcbiAgICAgICAgICAgIHRoaXMuZGF0YUFycmF5ID0gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXJMZW5ndGgpO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0U3BlY3RydW0oKSB7XG4gICAgICAgIGlmICh0aGlzLmFuYWx5c2VyTm9kZSkge1xuICAgICAgICAgICAgdGhpcy5hbmFseXNlck5vZGUuZ2V0Qnl0ZUZyZXF1ZW5jeURhdGEodGhpcy5kYXRhQXJyYXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUFycmF5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0V2F2ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuYW5hbHlzZXJOb2RlKSB7XG4gICAgICAgICAgICB0aGlzLmFuYWx5c2VyTm9kZS5nZXRCeXRlVGltZURvbWFpbkRhdGEodGhpcy5kYXRhQXJyYXkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUFycmF5O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgVWludDhBcnJheSgwKTtcbiAgICB9XG59IiwiaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGUgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZVwiO1xuXG5leHBvcnQgY2xhc3MgQXVkaW9HcmFwaE5vZGVEZXN0aW5hdGlvbiBleHRlbmRzIEF1ZGlvR3JhcGhOb2RlIHtcbiAgICBwdWJsaWMgZ2V0QXVkaW9Ob2RlID0gKCk6IEF1ZGlvTm9kZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmF1ZGlvQ3R4LmRlc3RpbmF0aW9uO1xuICAgIH1cblxuICAgIHB1YmxpYyByZWxvYWQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG59IiwiaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGUgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZVwiO1xuaW1wb3J0IHsgRUV2ZW50IH0gZnJvbSBcIi4uL2VFdmVudFwiO1xuXG5leHBvcnQgY2xhc3MgQXVkaW9HcmFwaE5vZGVFbGVtZW50U291cmNlIGV4dGVuZHMgQXVkaW9HcmFwaE5vZGUge1xuICAgIHB1YmxpYyB1cmw6IHN0cmluZztcbiAgICBwdWJsaWMgYXVkaW9FbmRlZCA9IG5ldyBFRXZlbnQoKTtcblxuICAgIHByaXZhdGUgc291cmNlOiBNZWRpYUVsZW1lbnRBdWRpb1NvdXJjZU5vZGU7XG4gICAgcHJpdmF0ZSBhdWRpbzogSFRNTEF1ZGlvRWxlbWVudDtcblxuICAgIGNvbnN0cnVjdG9yKG5hbWU6IHN0cmluZywgYXVkaW9DdHg6IEF1ZGlvQ29udGV4dCwgdXJsOiBzdHJpbmcpIHtcbiAgICAgICAgc3VwZXIobmFtZSwgYXVkaW9DdHgpO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcblxuICAgICAgICB0aGlzLmF1ZGlvID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYXVkaW8nKTtcbiAgICAgICAgdGhpcy5hdWRpby5jb250cm9scyA9IHRydWU7XG4gICAgICAgIHRoaXMuYXVkaW8uc3JjID0gdGhpcy51cmw7XG4gICAgICAgIHRoaXMuYXVkaW8uYWRkRXZlbnRMaXN0ZW5lcihcImVuZGVkXCIsIHRoaXMuYXVkaW9FbmRlZEV2ZW50KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGF1ZGlvRW5kZWRFdmVudCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5hdWRpb0VuZGVkLmRpc3BhdGNoRXZlbnQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0QXVkaW9Ob2RlID0gKCk6IEF1ZGlvTm9kZSA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLnNvdXJjZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcmVsb2FkKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlID0gdGhpcy5hdWRpb0N0eC5jcmVhdGVNZWRpYUVsZW1lbnRTb3VyY2UodGhpcy5hdWRpbyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBwbGF5ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmF1ZGlvLnBsYXkoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGF1c2UgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuYXVkaW8ucGF1c2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RvcCA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5hdWRpby5wYXVzZSgpO1xuICAgICAgICB0aGlzLmF1ZGlvLmN1cnJlbnRUaW1lID0gMDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0VXJsID0gKHVybDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHZhciBwbGF5ID0gIXRoaXMuYXVkaW8ucGF1c2VkO1xuICAgICAgICB0aGlzLnVybCA9IHVybDtcbiAgICAgICAgdGhpcy5hdWRpby5zcmMgPSB1cmw7XG4gICAgICAgIHRoaXMuYXVkaW8ubG9hZCgpO1xuICAgICAgICBpZiAocGxheSkge1xuICAgICAgICAgICAgdGhpcy5hdWRpby5wbGF5KCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwiaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGUgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZVwiO1xuaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGVBbmFseXNlciB9IGZyb20gXCIuL2F1ZGlvR3JhcGhOb2RlQW5hbHlzZXJcIjtcbmltcG9ydCB7IEF1ZGlvR3JhcGhOb2RlRGVzdGluYXRpb24gfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZURlc3RpbmF0aW9uXCI7XG5pbXBvcnQgeyBBdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UgfSBmcm9tIFwiLi9hdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2VcIjtcbmltcG9ydCB7IEF1ZGlvR3JhcGhOb2RlU3RyZWFtU291cmNlIH0gZnJvbSBcIi4vYXVkaW9HcmFwaE5vZGVTdHJlYW1Tb3VyY2VcIjtcbmltcG9ydCB7IEVFdmVudFQgfSBmcm9tIFwiLi4vZUV2ZW50XCI7XG5cbmV4cG9ydCBjbGFzcyBBdWRpb0dyYXBoIHtcbiAgICBwdWJsaWMgYXVkaW9DdHg6IEF1ZGlvQ29udGV4dDtcblxuICAgIC8vIHByaXZhdGUgc291cmNlTm9kZTogQXVkaW9HcmFwaE5vZGU8QXVkaW9Ob2RlPjtcbiAgICAvLyBwcml2YXRlIGFuYWx5emVyTm9kZTogQXVkaW9HcmFwaE5vZGVBbmFseXNlcjtcblxuICAgIC8vIHJlbW92ZSBnZW5lcmljIFQ/XG4gICAgcHJpdmF0ZSBhdWRpb05vZGVzOiBBdWRpb0dyYXBoTm9kZVtdID0gW107XG5cbiAgICBwdWJsaWMgZGVzdGluYXRpb25Ob2RlOiBBdWRpb0dyYXBoTm9kZTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmF1ZGlvQ3R4ID0gbmV3IEF1ZGlvQ29udGV4dCgpO1xuICAgICAgICB0aGlzLmF1ZGlvQ3R4LmFkZEV2ZW50TGlzdGVuZXIoXCJzdGF0ZWNoYW5nZVwiLCB0aGlzLmF1ZGlvQ29udGV4dFN0YXRlQ2hhbmdlZEV2YWx1YXRvcik7XG4gICAgICAgIGlmICh0aGlzLmF1ZGlvQ3R4LnN0YXRlID09PSBcInN1c3BlbmRlZFwiKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgdGhpcy5kb2N1bWVudENsaWNrKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQXVkaW8gY29udGV4dCBpcyBzdXNwZW5kZWQuIENsaWNrIHRoZSBkb20gdG8gbWFrZSBpdCBydW5uaW5nLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uTm9kZSA9IG5ldyBBdWRpb0dyYXBoTm9kZURlc3RpbmF0aW9uKFwiZGVzdGluYXRpb25cIiwgdGhpcy5hdWRpb0N0eCk7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZE1lZGlhRWxlbWVudFNvdXJjZSA9IChuYW1lOiBzdHJpbmcsIHVybDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHZhciBzb3VyY2VOb2RlID0gbmV3IEF1ZGlvR3JhcGhOb2RlRWxlbWVudFNvdXJjZShuYW1lLCB0aGlzLmF1ZGlvQ3R4LCB1cmwpO1xuICAgICAgICB0aGlzLmF1ZGlvTm9kZXMucHVzaChzb3VyY2VOb2RlKTtcbiAgICAgICAgcmV0dXJuIHNvdXJjZU5vZGU7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZEFuYWx5emVyID0gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICB2YXIgYW5hbHl6ZXJOb2RlID0gbmV3IEF1ZGlvR3JhcGhOb2RlQW5hbHlzZXIobmFtZSwgdGhpcy5hdWRpb0N0eCk7XG4gICAgICAgIHRoaXMuYXVkaW9Ob2Rlcy5wdXNoKGFuYWx5emVyTm9kZSk7XG4gICAgICAgIHJldHVybiBhbmFseXplck5vZGU7XG4gICAgfVxuXG4gICAgcHVibGljIGdldEF1ZGlvR3JhcGhOb2RlID0gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5hdWRpb05vZGVzLmZpcnN0KHggPT4geC5uYW1lID09IG5hbWUpO1xuICAgIH1cblxuICAgIC8vIHB1YmxpYyBwbGF5VXJsID0gKHVybDogc3RyaW5nKSA9PiB7XG4gICAgLy8gICAgIHRoaXMuc291cmNlTm9kZSA9IG5ldyBBdWRpb0dyYXBoTm9kZUVsZW1lbnRTb3VyY2UodGhpcy5hdWRpb0N0eCwgdXJsKTtcbiAgICAvLyAgICAgaWYgKHRoaXMuYXVkaW9DdHguc3RhdGUgPT09IFwicnVubmluZ1wiKSB7XG4gICAgLy8gICAgICAgICB0aGlzLmJ1aWxkR3JhcGgoKTtcbiAgICAvLyAgICAgfVxuICAgIC8vIH1cblxuICAgIC8vIHB1YmxpYyBwbGF5U3RyZWFtID0gKCkgPT4ge1xuICAgIC8vICAgICB0aGlzLnNvdXJjZU5vZGUgPSBuZXcgQXVkaW9HcmFwaE5vZGVTdHJlYW1Tb3VyY2UodGhpcy5hdWRpb0N0eCk7XG4gICAgLy8gICAgIGlmICh0aGlzLmF1ZGlvQ3R4LnN0YXRlID09PSBcInJ1bm5pbmdcIikge1xuICAgIC8vICAgICAgICAgdGhpcy5idWlsZEdyYXBoKCk7XG4gICAgLy8gICAgIH1cbiAgICAvLyB9XG5cbiAgICBwdWJsaWMgYXVkaW9Db250ZXh0U3RhdGVDaGFuZ2VkID0gbmV3IEVFdmVudFQ8c3RyaW5nPigpO1xuXG4gICAgcHJpdmF0ZSBkb2N1bWVudENsaWNrID0gKCkgPT4ge1xuICAgICAgICBpZiAodGhpcy5hdWRpb0N0eC5zdGF0ZSA9PT0gXCJzdXNwZW5kZWRcIikge1xuICAgICAgICAgICAgdGhpcy5hdWRpb0N0eC5yZXN1bWUoKTtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCB0aGlzLmRvY3VtZW50Q2xpY2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhdWRpb0NvbnRleHRTdGF0ZUNoYW5nZWRFdmFsdWF0b3IgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmF1ZGlvQ3R4LnN0YXRlID09PSBcInJ1bm5pbmdcIikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJhdWRpbyBjb250ZXh0IHN0YXRlIGNoYW5nZWRcIik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHRoaXMuYXVkaW9DdHgucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN0YXRlY2hhbmdlXCIsIHRoaXMuYXVkaW9Db250ZXh0U3RhdGVDaGFuZ2VkRXZhbHVhdG9yKTtcbiAgICAgICAgICAgIHRoaXMucmVsb2FkKClcbiAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXVkaW9Db250ZXh0U3RhdGVDaGFuZ2VkLmRpc3BhdGNoRXZlbnQodGhpcy5hdWRpb0N0eC5zdGF0ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgcmVsb2FkID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWFsb2FkaW5nIGF1ZGlvIGdyYXBoXCIpO1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwodGhpcy5hdWRpb05vZGVzLm1hcCh4ID0+IHgucmVsb2FkKCkpKVxuICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJyZWxvYWRlZCBhdWRpbyBncmFwaFwiKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmF1ZGlvTm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1ZGlvTm9kZSA9IHRoaXMuYXVkaW9Ob2Rlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF1ZGlvTm9kZS5nZXRBdWRpb05vZGUoKS5kaXNjb25uZWN0KCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDwgdGhpcy5hdWRpb05vZGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdWRpb05vZGUuZ2V0QXVkaW9Ob2RlKCkuY29ubmVjdCh0aGlzLmF1ZGlvTm9kZXNbaSArIDFdLmdldEF1ZGlvTm9kZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXVkaW9Ob2RlLmdldEF1ZGlvTm9kZSgpLmNvbm5lY3QodGhpcy5kZXN0aW5hdGlvbk5vZGUuZ2V0QXVkaW9Ob2RlKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gcHJpdmF0ZSBidWlsZEdyYXBoKCkge1xuICAgIC8vICAgICBjb25zb2xlLmxvZyhcIkJ1aWxkaW5nIGF1ZGlvIGdyYXBoLlwiKTtcblxuICAgIC8vICAgICBpZiAodGhpcy5zb3VyY2VOb2RlLmdldEF1ZGlvTm9kZSgpKSB7XG4gICAgLy8gICAgICAgICB0aGlzLnNvdXJjZU5vZGUuZ2V0QXVkaW9Ob2RlKCkuZGlzY29ubmVjdCgpO1xuICAgIC8vICAgICAgICAgdGhpcy5hbmFseXplck5vZGUuZ2V0QXVkaW9Ob2RlKCkuZGlzY29ubmVjdCgpO1xuICAgIC8vICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbk5vZGUuZ2V0QXVkaW9Ob2RlKCkuZGlzY29ubmVjdCgpO1xuICAgIC8vICAgICAgICAgdGhpcy5zb3VyY2VOb2RlLmdldEF1ZGlvTm9kZSgpLmNvbm5lY3QodGhpcy5hbmFseXplck5vZGUuZ2V0QXVkaW9Ob2RlKCkpO1xuICAgIC8vICAgICAgICAgdGhpcy5hbmFseXplck5vZGUuZ2V0QXVkaW9Ob2RlKCkuY29ubmVjdCh0aGlzLmRlc3RpbmF0aW9uTm9kZS5nZXRBdWRpb05vZGUoKSk7XG4gICAgLy8gICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICBjb25zb2xlLmxvZyhcIkF1ZGlvIHNvdXJjZSBub3QgYXZhaWxhYmxlLiBXYWl0aW5nIHNvbWUgdGltZS5cIik7XG4gICAgLy8gICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAvLyAgICAgICAgICAgICB0aGlzLmJ1aWxkR3JhcGgoKTtcbiAgICAvLyAgICAgICAgIH0sIDEwMDApO1xuICAgIC8vICAgICB9XG4gICAgLy8gfVxuXG4gICAgLy8gcHVibGljIGdldFNwZWN0cnVtKCkge1xuICAgIC8vICAgICByZXR1cm4gdGhpcy5hbmFseXplck5vZGUuZ2V0U3BlY3RydW0oKTtcbiAgICAvLyB9XG5cbiAgICAvLyBwdWJsaWMgZ2V0V2F2ZSgpIHtcbiAgICAvLyAgICAgcmV0dXJuIHRoaXMuYW5hbHl6ZXJOb2RlLmdldFdhdmUoKTtcbiAgICAvLyB9XG59IiwiaW1wb3J0IHsgQXVkaW9HcmFwaCB9IGZyb20gXCIuLi9lbmMvc3JjL2F1ZGlvL2F1ZGlvR3JhcGhcIjtcbmltcG9ydCB7IEF1ZGlvR3JhcGhOb2RlRWxlbWVudFNvdXJjZSB9IGZyb20gXCIuLi9lbmMvc3JjL2F1ZGlvL2F1ZGlvR3JhcGhOb2RlRWxlbWVudFNvdXJjZVwiO1xuaW1wb3J0IHsgQXVkaW9HcmFwaE5vZGVBbmFseXNlciB9IGZyb20gXCIuLi9lbmMvc3JjL2F1ZGlvL2F1ZGlvR3JhcGhOb2RlQW5hbHlzZXJcIjtcblxuLy8gaW1wb3J0IEZhaW50QXNzZXRNUDMgZnJvbSBcIi4vYXNzZXRzL21wMy1kZW1vL2RlbW9fMV9mYWludF9jb2xvci5tcDNcIlxuLy8gaW1wb3J0IFByaXNtQXNzZXRNUDMgZnJvbSBcIi4vYXNzZXRzL21wMy1kZW1vL2RlbW9fMl9wcmlzbS5tcDNcIlxuLy8gaW1wb3J0IEhvcGVmdWxBc3NldE1QMyBmcm9tIFwiLi9hc3NldHMvbXAzLWRlbW8vZGVtb18zX2hvcGVmdWwubXAzXCJcbi8vIGltcG9ydCBEZWVwQXNzZXRNUDMgZnJvbSBcIi4vYXNzZXRzL21wMy1kZW1vL2RlbW9fNF9kZWVwX2ZpZWxkLm1wM1wiXG4vLyBpbXBvcnQgR3Jhdml0eUFzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9tcDMtZGVtby9kZW1vXzVfZ3Jhdml0eS5tcDNcIlxuLy8gaW1wb3J0IEpvdXJuZXlBc3NldE1QMyBmcm9tIFwiLi9hc3NldHMvbXAzLWRlbW8vZGVtb182X2pvdXJuZXlfdG9fdGhlX3BsYW5ldHMubXAzXCJcbi8vIGltcG9ydCBEcmlmdGluZ0Fzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9tcDMtZGVtby9kZW1vXzdfZHJpZnRpbmdfaW50b190aGVfYXRtb3NwaGVyZS5tcDNcIlxuXG5pbXBvcnQgRmFpbnRBc3NldE1QMyBmcm9tIFwiLi9hc3NldHMvZGVtby9UcmFpbGVyX2ZhaW50Q29sb3IubXAzXCJcbmltcG9ydCBEZWVwQXNzZXRNUDMgZnJvbSBcIi4vYXNzZXRzL2RlbW8vVHJhaWxlcl9EZWVwRmllbGQubXAzXCJcbmltcG9ydCBEcmlmdGluZ0Fzc2V0TVAzIGZyb20gXCIuL2Fzc2V0cy9kZW1vL1RyYWlsZXJfRHJpZnRpbmdJbnRvVGhlQXRtb3NwaGVyZS5tcDNcIlxuXG5leHBvcnQgY2xhc3MgQXVkaW9NYW5hZ2VyIHtcbiAgICBwcml2YXRlIGF1ZGlvR3JhcGg6IEF1ZGlvR3JhcGg7XG4gICAgcHJpdmF0ZSBzb3VyY2U6IEF1ZGlvR3JhcGhOb2RlRWxlbWVudFNvdXJjZTtcbiAgICBwcml2YXRlIGFuYWx5c2VyOiBBdWRpb0dyYXBoTm9kZUFuYWx5c2VyO1xuXG4gICAgcHJpdmF0ZSBzb25ncyA9IFtcbiAgICAgICAgRmFpbnRBc3NldE1QMyxcbiAgICAgICAgLy8gUHJpc21Bc3NldE1QMyxcbiAgICAgICAgLy8gSG9wZWZ1bEFzc2V0TVAzLFxuICAgICAgICBEZWVwQXNzZXRNUDMsXG4gICAgICAgIC8vIEdyYXZpdHlBc3NldE1QMyxcbiAgICAgICAgLy8gSm91cm5leUFzc2V0TVAzLFxuICAgICAgICBEcmlmdGluZ0Fzc2V0TVAzXG4gICAgXVxuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYXVkaW9HcmFwaCA9IG5ldyBBdWRpb0dyYXBoKCk7XG4gICAgICAgIHRoaXMuc291cmNlID0gdGhpcy5hdWRpb0dyYXBoLmFkZE1lZGlhRWxlbWVudFNvdXJjZShcInNvdXJjZVwiLCB0aGlzLnNvbmdzWzBdKVxuICAgICAgICB0aGlzLmFuYWx5c2VyID0gdGhpcy5hdWRpb0dyYXBoLmFkZEFuYWx5emVyKFwiYW5hbHlzZXJcIik7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbG9hZCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYXVkaW9HcmFwaC5yZWxvYWQoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgcGxheSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zb3VyY2UucGxheSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBwYXVzZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zb3VyY2UucGF1c2UoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgbmV4dCA9ICgpID0+IHtcbiAgICAgICAgdmFyIGN1cnJlbnRTb25nSW5kZXggPSB0aGlzLnNvbmdzLmluZGV4T2YodGhpcy5zb3VyY2UudXJsKTtcbiAgICAgICAgdmFyIG5leHRTb25nSW5kZXggPSBjdXJyZW50U29uZ0luZGV4ICsgMTtcbiAgICAgICAgaWYgKG5leHRTb25nSW5kZXggPT0gdGhpcy5zb25ncy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG5leHRTb25nSW5kZXggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zb3VyY2Uuc2V0VXJsKHRoaXMuc29uZ3NbbmV4dFNvbmdJbmRleF0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBwcmV2aW91cyA9ICgpID0+IHtcbiAgICAgICAgdmFyIGN1cnJlbnRTb25nSW5kZXggPSB0aGlzLnNvbmdzLmluZGV4T2YodGhpcy5zb3VyY2UudXJsKTtcbiAgICAgICAgdmFyIHByZXZpb3VzU29uZ0luZGV4ID0gY3VycmVudFNvbmdJbmRleCAtIDE7XG4gICAgICAgIGlmIChwcmV2aW91c1NvbmdJbmRleCA9PSAtMSkge1xuICAgICAgICAgICAgcHJldmlvdXNTb25nSW5kZXggPSB0aGlzLnNvbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnNvdXJjZS5zZXRVcmwodGhpcy5zb25nc1twcmV2aW91c1NvbmdJbmRleF0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRBbmFseXNlciA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYW5hbHlzZXI7XG4gICAgfVxuXG4gICAgcHVibGljIHN0b3AgPSAoKSA9PiB7XG4gICAgICAgIHRoaXMuc291cmNlLnN0b3AoKTtcbiAgICB9XG59IiwiZXhwb3J0IGNsYXNzIEFzc2V0TWFuYWdlciB7XG4gICAgcHJpdmF0ZSBpbWFnZUFzc2V0czogeyBuYW1lOiBzdHJpbmcsIHVybDogc3RyaW5nLCBpbWFnZTogSFRNTEltYWdlRWxlbWVudCB9W10gPSBbXTtcblxuICAgIHB1YmxpYyBhZGRJbWFnZSA9IChuYW1lOiBzdHJpbmcsIHVybDogc3RyaW5nKSA9PiB7XG4gICAgICAgIHRoaXMuaW1hZ2VBc3NldHMucHVzaCh7XG4gICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICBpbWFnZTogdW5kZWZpbmVkXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRJbWFnZSA9IChuYW1lOiBzdHJpbmcpOiBIVE1MSW1hZ2VFbGVtZW50ID0+IHtcbiAgICAgICAgdmFyIGltYWdlQXNzZXQgPSB0aGlzLmltYWdlQXNzZXRzLmZpcnN0T3JEZWZhdWx0KHggPT4geC5uYW1lID09IG5hbWUpO1xuICAgICAgICBpZiAoaW1hZ2VBc3NldCkge1xuICAgICAgICAgICAgcmV0dXJuIGltYWdlQXNzZXQuaW1hZ2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGxvYWQgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLmFsbCh0aGlzLmltYWdlQXNzZXRzLm1hcCh4ID0+IHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCF4LmltYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZSA9IG5ldyBJbWFnZSgpO1xuICAgICAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSB4LnVybDtcbiAgICAgICAgICAgICAgICAgICAgaW1hZ2Uub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgeC5pbWFnZSA9IGltYWdlO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KSk7XG4gICAgfVxufSIsImltcG9ydCB7IFN0YWdlIH0gZnJvbSBcIi4uL2VuYy9zcmMvdWkvc3RhZ2VcIjtcclxuaW1wb3J0IHsgSW5zcGllcnR5UGxheWVyVmlldyB9IGZyb20gXCIuL3ZpZXcvaW5zcGllcnR5UGxheWVyVmlld1wiO1xyXG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gXCIuL21vZGVscy9zZXR0aW5nc1wiO1xyXG5pbXBvcnQgeyBTZXR0aW5nc01hbmFnZXIgfSBmcm9tIFwiLi9zZXR0aW5ncy9zZXR0aW5nc01hbmFnZXJcIjtcclxuaW1wb3J0IHsgRGluamVjdCB9IGZyb20gXCIuLi9lbmMvc3JjL2RpbmplY3RcIjtcclxuaW1wb3J0IHsgRUFuaW1hdGlvbiB9IGZyb20gXCIuLi9lbmMvc3JjL2VBbmltYXRpb25cIjtcclxuaW1wb3J0IHsgRUNhbnZhcyB9IGZyb20gXCIuLi9lbmMvc3JjL3VpL2VDYW52YXNcIjtcclxuaW1wb3J0IHsgQ2FudmFzSGVscGVyIH0gZnJvbSBcIi4uL2VuYy9zcmMvdWkvY2FudmFzSGVscGVyXCI7XHJcbmltcG9ydCB7IEF1ZGlvTWFuYWdlciB9IGZyb20gXCIuL2F1ZGlvTWFuYWdlclwiO1xyXG5pbXBvcnQgeyBBc3NldE1hbmFnZXIgfSBmcm9tIFwiLi4vZW5jL3NyYy9hc3NldE1hbmFnZXJcIjtcclxuXHJcbmltcG9ydCBiYWNrZ3JvdW5kUG5nIGZyb20gXCIuL2Fzc2V0cy9iYWNrZ3JvdW5kLnBuZ1wiXHJcbmltcG9ydCBsb2dvRnJvbnRQbmcgZnJvbSBcIi4vYXNzZXRzL2xvZ28tZnJvbnQucG5nXCJcclxuaW1wb3J0IGxvZ29Ob3ZhUG5nIGZyb20gXCIuL2Fzc2V0cy9sb2dvLW5vdmEucG5nXCJcclxuXHJcbmV4cG9ydCBjbGFzcyBBcHAge1xyXG4gICAgcHVibGljIHN0YXRpYyBzZXR0aW5ncyA9IG5ldyBTZXR0aW5ncyh3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0KTtcclxuICAgIHB1YmxpYyBzdGF0aWMgc2V0dGluZ01hbmFnZXIgPSBuZXcgU2V0dGluZ3NNYW5hZ2VyKCk7XHJcblxyXG4gICAgcHVibGljIHJ1biA9ICgpID0+IHtcclxuICAgICAgICBkb2N1bWVudC5ib2R5LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwiYmxhY2tcIjtcclxuXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJsb2FkaW5nIGFwcFwiKTtcclxuICAgICAgICBQcm9taXNlLmFsbChbXHJcbiAgICAgICAgICAgIG5ldyBDYW52YXNIZWxwZXIoKS5sb2FkRm9udGF3ZXNvbWVGcmVlKCksXHJcbiAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBhdWRpb01hbmFnZXIgPSBuZXcgQXVkaW9NYW5hZ2VyKCk7XHJcbiAgICAgICAgICAgICAgICBhdWRpb01hbmFnZXIucmVsb2FkKClcclxuICAgICAgICAgICAgICAgIERpbmplY3QuYWRkSW5zdGFuY2UoXCJhdWRpb1wiLCBhdWRpb01hbmFnZXIpO1xyXG4gICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhbnZhcyA9IEVDYW52YXMuY3JlYXRlRnVsbFNjcmVlbigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YWdlID0gbmV3IFN0YWdlKGNhbnZhcyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYW5pbWF0aW9uID0gbmV3IEVBbmltYXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbi5hZGRVcGRhdGVGdW5jdGlvbihjYW52YXMuZHJhdyk7XHJcblxyXG4gICAgICAgICAgICAgICAgRGluamVjdC5hZGRJbnN0YW5jZShcImNhbnZhc1wiLCBjYW52YXMpO1xyXG4gICAgICAgICAgICAgICAgRGluamVjdC5hZGRJbnN0YW5jZShcInN0YWdlXCIsIHN0YWdlKTtcclxuICAgICAgICAgICAgICAgIERpbmplY3QuYWRkSW5zdGFuY2UoXCJhbmltYXRpb25cIiwgYW5pbWF0aW9uKTtcclxuICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBhc3NldE1hbmFnZXIgPSBuZXcgQXNzZXRNYW5hZ2VyKCk7XHJcbiAgICAgICAgICAgICAgICBEaW5qZWN0LmFkZEluc3RhbmNlKFwiYXNzZXRzXCIsIGFzc2V0TWFuYWdlcik7XHJcbiAgICAgICAgICAgICAgICBhc3NldE1hbmFnZXIuYWRkSW1hZ2UoXCJiYWNrZ3JvdW5kXCIsIGJhY2tncm91bmRQbmcpO1xyXG4gICAgICAgICAgICAgICAgYXNzZXRNYW5hZ2VyLmFkZEltYWdlKFwibG9nb1wiLCBsb2dvRnJvbnRQbmcpO1xyXG4gICAgICAgICAgICAgICAgYXNzZXRNYW5hZ2VyLmFkZEltYWdlKFwibG9nby1ub3ZhXCIsIGxvZ29Ob3ZhUG5nKTtcclxuICAgICAgICAgICAgICAgIGFzc2V0TWFuYWdlci5sb2FkKClcclxuICAgICAgICAgICAgICAgICAgICAudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIF0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcImxvYWRlZCBhcHBcIik7XHJcblxyXG4gICAgICAgICAgICB2YXIgc3RhZ2UgPSBEaW5qZWN0LmdldEluc3RhbmNlKFwic3RhZ2VcIikgYXMgU3RhZ2U7XHJcbiAgICAgICAgICAgIHZhciB2aWV3ID0gbmV3IEluc3BpZXJ0eVBsYXllclZpZXcoKTtcclxuICAgICAgICAgICAgc3RhZ2Uuc2V0Vmlldyh2aWV3KTtcclxuXHJcbiAgICAgICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci5hZGRTdGFyTGF5ZXIoKTtcclxuICAgICAgICAgICAgQXBwLnNldHRpbmdNYW5hZ2VyLmFkZFN0YXJMYXllcigpO1xyXG4gICAgICAgICAgICBBcHAuc2V0dGluZ01hbmFnZXIuYWRkU3RhckxheWVyKCk7XHJcbiAgICAgICAgICAgIEFwcC5zZXR0aW5nTWFuYWdlci5hZGRTdGFyTGF5ZXIoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFN0YXJMYXllciB9IGZyb20gXCIuL3N0YXJMYXllclwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNldHRpbmdzIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB3aWR0aDogbnVtYmVyLCBwdWJsaWMgaGVpZ2h0OiBudW1iZXIpIHsgfVxyXG5cclxuICAgIHB1YmxpYyBzdGFyTGF5ZXJzOiBTdGFyTGF5ZXJbXSA9IFtdO1xyXG59XHJcbiIsImltcG9ydCB7IFNldHRpbmdPcGVyYXRpb24gfSBmcm9tIFwiLi9zZXR0aW5nT3BlcmF0aW9uXCI7XG5pbXBvcnQgeyBFRXZlbnRUIH0gZnJvbSBcIi4uLy4uL2VuYy9zcmMvZUV2ZW50XCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi4vYXBwXCI7XG5pbXBvcnQgeyBTdGFyTGF5ZXIgfSBmcm9tIFwiLi4vbW9kZWxzL3N0YXJMYXllclwiO1xuXG5leHBvcnQgY2xhc3MgU2V0dGluZ3NNYW5hZ2VyIHtcbiAgICBwdWJsaWMgdXBkYXRlID0gbmV3IEVFdmVudFQ8U2V0dGluZ09wZXJhdGlvbj4oKTtcblxuICAgIHB1YmxpYyBhZGRTdGFyTGF5ZXIgPSAoKSA9PiB7XG4gICAgICAgIHZhciBsYXllciA9IG5ldyBTdGFyTGF5ZXIoKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDMwMDsgaSsrKSB7XG4gICAgICAgICAgICBsYXllci5zdGFycy5wdXNoKHtcbiAgICAgICAgICAgICAgICB4OiBNYXRoLnJhbmRvbSgpICogQXBwLnNldHRpbmdzLndpZHRoLFxuICAgICAgICAgICAgICAgIHk6IE1hdGgucmFuZG9tKCkgKiBBcHAuc2V0dGluZ3MuaGVpZ2h0LFxuICAgICAgICAgICAgICAgIHI6IE1hdGgucmFuZG9tKCkgKiAwLjUgKyAwLjA1XG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgQXBwLnNldHRpbmdzLnN0YXJMYXllcnMucHVzaChsYXllcik7XG4gICAgICAgIHRoaXMudXBkYXRlLmRpc3BhdGNoRXZlbnQoU2V0dGluZ09wZXJhdGlvbi5BZGRTdGFyTGF5ZXIpO1xuICAgIH1cblxuICAgIHB1YmxpYyByZW1vdmVTdGFyTGF5ZXIgPSAoc3RhckxheWVyOiBTdGFyTGF5ZXIpID0+IHtcbiAgICAgICAgQXBwLnNldHRpbmdzLnN0YXJMYXllcnMucmVtb3ZlSXRlbShzdGFyTGF5ZXIpO1xuICAgICAgICB0aGlzLnVwZGF0ZS5kaXNwYXRjaEV2ZW50KFNldHRpbmdPcGVyYXRpb24uUmVtb3ZlU3RhckxheWVyKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hhbmdlTnVtYmVyT2ZTdGFycyA9IChzdGFyTGF5ZXI6IFN0YXJMYXllciwgbnVtYmVyT2ZTdGFyczogbnVtYmVyKSA9PiB7XG4gICAgICAgIGlmIChudW1iZXJPZlN0YXJzID4gMCkge1xuICAgICAgICAgICAgdmFyIGRpZmYgPSBudW1iZXJPZlN0YXJzIC0gc3RhckxheWVyLnN0YXJzLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChkaWZmID4gMCkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlmZjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJMYXllci5zdGFycy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHg6IE1hdGgucmFuZG9tKCkgKiBBcHAuc2V0dGluZ3Mud2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICB5OiBNYXRoLnJhbmRvbSgpICogQXBwLnNldHRpbmdzLmhlaWdodCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHI6IE1hdGgucmFuZG9tKCkgKiAyICsgMC4wNVxuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRpZmYgPCAwKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAtZGlmZjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0YXJMYXllci5zdGFycy5zcGxpY2UoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogc3RhckxheWVyLnN0YXJzLmxlbmd0aCksIDEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlLmRpc3BhdGNoRXZlbnQoU2V0dGluZ09wZXJhdGlvbi5DaGFuZ2VOdW1iZXJPZlN0YXJzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBjaGFuZ2VTcGVlZCA9IChzdGFyTGF5ZXI6IFN0YXJMYXllciwgc3BlZWQ6IG51bWJlcikgPT4ge1xuICAgICAgICBzdGFyTGF5ZXIuc3BlZWQgPSBzcGVlZDtcbiAgICAgICAgdGhpcy51cGRhdGUuZGlzcGF0Y2hFdmVudChTZXR0aW5nT3BlcmF0aW9uLkNoYW5nZVNwZWVkKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hhbmdlU2l6ZXMgPSAoc3RhckxheWVyOiBTdGFyTGF5ZXIsIGxvd0JvcmRlcjogbnVtYmVyLCBoaWdoQm9yZGVyOiBudW1iZXIpID0+IHtcbiAgICAgICAgdmFyIHNpemVzID0gc3RhckxheWVyLnN0YXJzLm1hcCh4ID0+IHgucik7XG4gICAgICAgIHZhciBjdXJyZW50VmFsdWVMb3cgPSBNYXRoLm1pbiguLi5zaXplcyk7XG4gICAgICAgIHZhciBjdXJyZW50VmFsdWVIaWdoID0gTWF0aC5tYXgoLi4uc2l6ZXMpO1xuXG4gICAgICAgIHZhciBtaW5GaXggPSAoY3VycmVudFZhbHVlSGlnaCAtIGN1cnJlbnRWYWx1ZUxvdyk7XG4gICAgICAgIGlmIChtaW5GaXggPD0gMCkge1xuICAgICAgICAgICAgbWluRml4ID0gMC4wMDAxXG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBzdGFyIG9mIHN0YXJMYXllci5zdGFycykge1xuICAgICAgICAgICAgc3Rhci5yID0gKChzdGFyLnIgLSBjdXJyZW50VmFsdWVMb3cpIC8gbWluRml4ICogKGhpZ2hCb3JkZXIgLSBsb3dCb3JkZXIpKSArIGxvd0JvcmRlcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnVwZGF0ZS5kaXNwYXRjaEV2ZW50KFNldHRpbmdPcGVyYXRpb24uQ2hhbmdlU3BlZWQpO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9hcHBcIjtcbmltcG9ydCBcIi4uL2VuYy9zcmMvZXh0ZW5zaW9uc1wiO1xuXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbWFpbiwgZmFsc2UpO1xuXG5mdW5jdGlvbiBtYWluKCkge1xuICAgIHZhciBhcHAgPSBuZXcgQXBwKCk7XG4gICAgYXBwLnJ1bigpO1xufSJdLCJzb3VyY2VSb290IjoiIn0=